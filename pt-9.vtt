WEBVTT

00:00:02.994 --> 00:00:04.990
[MÚSICA, TOCANDO]

00:01:12.920 --> 00:01:16.430
DAVID MALAN: Tudo bem, isso é CS50, e isso já é

00:01:16.430 --> 00:01:19.040
semana nove, que é a penúltima.

00:01:19.040 --> 00:01:22.460
Na verdade, esta é realmente a última semana em que você aprenderá nesta aula

00:01:22.460 --> 00:01:23.450
como programar.

00:01:23.450 --> 00:01:25.370
Mas, de fato, é esta semana que realmente significa

00:01:25.370 --> 00:01:29.210
para ser o clímax pedagógico de todas essas várias linguagens que temos

00:01:29.210 --> 00:01:32.250
estive olhando-- todas essas várias técnicas, toda essa sintaxe.

00:01:32.250 --> 00:01:34.670
Para que no final do CS50 em apenas algumas semanas,

00:01:34.670 --> 00:01:37.070
você realmente sente que não fez uma aula de C,

00:01:37.070 --> 00:01:39.530
e você não fez uma aula de Python, mas você realmente mais

00:01:39.530 --> 00:01:41.240
geralmente fazia aulas de programação.

00:01:41.240 --> 00:01:43.670
Porque de fato já conhecemos cerca de metade de vocês

00:01:43.670 --> 00:01:46.880
continuarão a estudar ciência da computação, mas metade de vocês não.

00:01:46.880 --> 00:01:49.520
E, de fato, todos os seus cortes de programação daqui em diante,

00:01:49.520 --> 00:01:51.470
teoricamente, terá fundamento naquilo que

00:01:51.470 --> 00:01:53.527
temos feito nas últimas semanas.

00:01:53.527 --> 00:01:55.610
Mas daqui em diante, realmente vai depender de você

00:01:55.610 --> 00:01:58.370
para aprender alguma nova linguagem sofisticada quando ela for lançada,

00:01:58.370 --> 00:02:00.830
ou para seguir alguma nova tendência quando algum idioma ofusca

00:02:00.830 --> 00:02:03.110
os que temos usado como mais populares, como

00:02:03.110 --> 00:02:05.640
mais apropriado para os problemas que você deseja resolver.

00:02:05.640 --> 00:02:08.090
E hoje é realmente sobre sintetizar tantos

00:02:08.090 --> 00:02:11.870
das últimas semanas, mas fazendo isso no contexto da programação web, que

00:02:11.870 --> 00:02:14.150
para o bem ou para o mal, está tão em voga

00:02:14.150 --> 00:02:16.460
hoje em dia, tanto em nossos laptops quanto em telefones.

00:02:16.460 --> 00:02:19.040
E, de fato, os idiomas que examinamos nas últimas semanas são

00:02:19.040 --> 00:02:23.300
usado não apenas para fazer sites, mas também aplicativos completos e aplicativos

00:02:23.300 --> 00:02:24.270
lojas e afins.

00:02:24.270 --> 00:02:27.350
Portanto, este será realmente o ponto culminante das últimas semanas.

00:02:27.350 --> 00:02:30.890
E, de fato, falaremos sobre alguns conceitos familiares, como carrinhos de compras

00:02:30.890 --> 00:02:33.230
quando você está na Amazon, e essas coisas chamadas cookies

00:02:33.230 --> 00:02:34.480
quando você está visitando sites.

00:02:34.480 --> 00:02:36.500
Todos esses tópicos também entrarão em jogo

00:02:36.500 --> 00:02:39.810
e você terá uma compreensão do que tudo isso significa desde o início.

00:02:39.810 --> 00:02:41.220
Então, como nós chegamos aqui?

00:02:41.220 --> 00:02:44.990
Bem, na semana passada, focamos em HTML e CSS

00:02:44.990 --> 00:02:47.000
principalmente, que não são linguagens de programação.

00:02:47.000 --> 00:02:49.520
Eles são apenas sobre estética, estruturando seus dados,

00:02:49.520 --> 00:02:51.780
apresentando seus dados, e assim por diante.

00:02:51.780 --> 00:02:56.600
E servimos as páginas da web que escrevemos usando este servidor HTTP do programa.

00:02:56.600 --> 00:03:00.380
Este é apenas um desses programas - há dezenas, centenas de diferentes

00:03:00.380 --> 00:03:02.130
servidores que você pode usar lá fora.

00:03:02.130 --> 00:03:05.240
Este é apenas um super simples que pré-instalamos em seu espaço de código para você

00:03:05.240 --> 00:03:08.150
no código VS para que você possa apenas servir páginas da web.

00:03:08.150 --> 00:03:10.430
No final da semana passada também, porém, nós provocamos

00:03:10.430 --> 00:03:12.980
JavaScript, uma linguagem de programação completa

00:03:12.980 --> 00:03:17.300
que você pode usar para manipular a experiência do usuário para melhor.

00:03:17.300 --> 00:03:20.750
Para tornar as coisas mais dinâmicas e interativas executando o código

00:03:20.750 --> 00:03:22.460
no navegador do usuário--

00:03:22.460 --> 00:03:24.860
em seu Mac, seu PC, seu telefone-- ao contrário

00:03:24.860 --> 00:03:28.730
para o lado do servidor, que até agora é onde todo o nosso código e C e Python

00:03:28.730 --> 00:03:29.720
tem sido escrito.

00:03:29.720 --> 00:03:33.150
Então você está escrevendo código em um servidor, está servindo código de um servidor,

00:03:33.150 --> 00:03:37.910
mas agora com HTML, CSS e JavaScript está sendo executado em um navegador.

00:03:37.910 --> 00:03:41.210
Mas hoje vamos ser um recurso final do Python--

00:03:41.210 --> 00:03:44.690
ou realmente linguagens como essa-- que você também pode usar o código no servidor

00:03:44.690 --> 00:03:47.030
para gerar automaticamente dinamicamente.

00:03:47.030 --> 00:03:51.860
O HTML, o JavaScript, o CSS que você realmente deseja que o usuário receba.

00:03:51.860 --> 00:03:54.290
Você não precisa codificar tudo como faz quando

00:03:54.290 --> 00:03:55.920
fazendo sua própria página inicial.

00:03:55.920 --> 00:03:59.130
Bem, vamos considerar o que alguns dos blocos de construção foram na semana passada.

00:03:59.130 --> 00:04:02.165
Aqui está um exemplo de URL e aqui a barra

00:04:02.165 --> 00:04:04.910
é a página padrão em qualquer servidor web.

00:04:04.910 --> 00:04:07.430
Pode ser index.html, pode ser outra coisa,

00:04:07.430 --> 00:04:08.480
isso é apenas uma convenção.

00:04:08.480 --> 00:04:10.850
Mas refere-se a qualquer que seja o padrão.

00:04:10.850 --> 00:04:13.430
Você pode visitar, é claro, em qualquer navegador-- como um URL que

00:04:13.430 --> 00:04:17.089
termina em file.html, ou algo mais dot HTML--

00:04:17.089 --> 00:04:21.320
e isso significa literalmente que seu navegador deseja este arquivo neste servidor.

00:04:21.320 --> 00:04:23.730
Ou claro, vimos que pode ser uma pasta.

00:04:23.730 --> 00:04:28.040
E dentro dessa pasta é presumivelmente algum nome de arquivo padrão, como novamente,

00:04:28.040 --> 00:04:32.360
index.html, ou você pode ser mais explícito como pasta/arquivo.html,

00:04:32.360 --> 00:04:34.460
e esses, de forma mais geral, chamamos apenas de caminhos.

00:04:34.460 --> 00:04:37.850
E, de fato, um caminho é apenas um local no seu Mac, seu PC,

00:04:37.850 --> 00:04:40.770
ou em um servidor de alguma informação.

00:04:40.770 --> 00:04:43.010
Mas hoje vamos apenas renomear isso apenas

00:04:43.010 --> 00:04:45.830
para usar outra terminologia comum, mas na verdade são apenas sinônimos.

00:04:45.830 --> 00:04:48.590
Hoje vamos nos referir a essas mesmas coisas como rotas

00:04:48.590 --> 00:04:52.430
porque hoje vamos substituir o servidor HTTP, que

00:04:52.430 --> 00:04:56.750
apenas serve conteúdo estático que todos vocês escrevem com seu próprio servidor web.

00:04:56.750 --> 00:04:59.090
Como agora, vocês serão os únicos a controlar

00:04:59.090 --> 00:05:02.900
o que o servidor faz em resposta à solicitação do usuário

00:05:02.900 --> 00:05:05.600
para que você possa responder de forma interativa e dinâmica.

00:05:05.600 --> 00:05:08.030
Mas ainda veremos técnicas como essa.

00:05:08.030 --> 00:05:11.267
Esses eram nossos chamados parâmetros HTTP.

00:05:11.267 --> 00:05:13.850
Eles são tudo o que vem depois de um ponto de interrogação em uma URL.

00:05:13.850 --> 00:05:15.870
E pode ser chave = valor.

00:05:15.870 --> 00:05:17.030
Um exemplo foi, o quê?

00:05:17.030 --> 00:05:19.610
Quando jogamos com o Google, qual era a chave

00:05:19.610 --> 00:05:22.970
e qual foi o valor que eu tentei primeiro?

00:05:22.970 --> 00:05:24.020
Alguma lembrança?

00:05:26.550 --> 00:05:29.370
Eu estava procurando por gatos e então a chave eu descobri

00:05:29.370 --> 00:05:32.880
foi uma sugestão porque foi isso que Larry e Sergey, que criaram o Google anos atrás

00:05:32.880 --> 00:05:38.160
decidiu que o nome seria da caixa de texto HTML na qual você digita sua consulta.

00:05:38.160 --> 00:05:40.620
E se eu digitar CAT para gato, o valor disso

00:05:40.620 --> 00:05:44.428
acabaria no URL do Google como sendo um ponto de interrogação cat = value.

00:05:44.428 --> 00:05:46.470
E eu mencionei que muitas vezes você

00:05:46.470 --> 00:05:48.480
deseja enviar duas entradas diferentes para um servidor.

00:05:48.480 --> 00:05:51.438
E é por isso que proponho que você fique de olho nos e comerciais.

00:05:51.438 --> 00:05:53.800
E os e comerciais separam esses pares de valores-chave.

00:05:53.800 --> 00:05:56.100
Mas, novamente, este é o mesmo paradigma maldito de antes,

00:05:56.100 --> 00:05:57.808
e já vimos isso tantas vezes, certo?

00:05:57.808 --> 00:06:00.030
Pares de valores-chave em dicionários, em Python.

00:06:00.030 --> 00:06:03.690
Vimos atributos HTML e seus valores.

00:06:03.690 --> 00:06:06.480
Vimos propriedades CSS e seus valores.

00:06:06.480 --> 00:06:09.270
É tudo a mesma coisa, associar algo a algo.

00:06:09.270 --> 00:06:11.610
Else, embora cada idioma, cada pessoa

00:06:11.610 --> 00:06:15.910
parece ter seu próprio vernáculo para isso, é realmente a mesma ideia.

00:06:15.910 --> 00:06:19.440
Essa associação de algo com outra coisa continuaremos a ver.

00:06:19.440 --> 00:06:24.600
E, aqui para ser concreto, foram as linhas de texto HTTP

00:06:24.600 --> 00:06:26.730
que estavam naqueles envelopes virtuais, se preferir.

00:06:26.730 --> 00:06:30.000
Se eu estivesse realmente selecionando-- tentando procurar por algo como gatos

00:06:30.000 --> 00:06:34.140
no Google, lembre-se, esta foi a mensagem que foi enviada ao servidor

00:06:34.140 --> 00:06:37.020
pelo meu navegador para dizer ao Google para pesquisar

00:06:37.020 --> 00:06:39.900
para não cães, mas neste caso gatos.

00:06:39.900 --> 00:06:42.360
Agora, o que o servidor HTTP tem feito por nós?

00:06:42.360 --> 00:06:45.900
Bem, está apenas servindo arquivo HTML, arquivos CSS, talvez alguns JS

00:06:45.900 --> 00:06:50.910
ou arquivos JavaScript, mas tem ignorado quaisquer parâmetros HTTP.

00:06:50.910 --> 00:06:53.430
Como o servidor HTTP, não aceita entrada do usuário.

00:06:53.430 --> 00:06:53.970
Por que?

00:06:53.970 --> 00:06:55.270
Bem, o que isso vai fazer com isso?

00:06:55.270 --> 00:06:57.120
Porque você já escreveu o HTML, você já

00:06:57.120 --> 00:06:59.100
escreveu o CSS, como se não houvesse decisões a serem

00:06:59.100 --> 00:07:03.090
feito até introduzirmos uma linguagem de programação adequada no servidor.

00:07:03.090 --> 00:07:06.540
E então vamos nos afastar agora deste simples programa de servidor HTTP

00:07:06.540 --> 00:07:11.250
e apresentá-lo ao seu próprio servidor que lidará com a análise,

00:07:11.250 --> 00:07:13.672
que é a extração desses pares de chave-valor,

00:07:13.672 --> 00:07:16.380
para que você e eu não tenhamos que escrever código Python de repente

00:07:16.380 --> 00:07:18.570
que analisa essas coisas, descobre o que

00:07:18.570 --> 00:07:20.280
as páginas solicitaram os pares chave-valor.

00:07:20.280 --> 00:07:24.780
Ainda obteremos tudo isso de graça apenas usando a estrutura certa.

00:07:24.780 --> 00:07:29.310
E hoje revisitamos o Python, que já usamos de alguma forma

00:07:29.310 --> 00:07:30.180
nas últimas semanas.

00:07:30.180 --> 00:07:33.150
E, de fato, tem sido a cola que nos permite costurar

00:07:33.150 --> 00:07:34.290
parte de nossa própria lógica.

00:07:34.290 --> 00:07:37.810
Vimos com SQL, agora veremos com HTML, CSS,

00:07:37.810 --> 00:07:39.185
e até mesmo JavaScript, se quisermos.

00:07:39.185 --> 00:07:42.060
E também veremos outra linguagem hoje, não uma linguagem de programação

00:07:42.060 --> 00:07:43.110
linguagem, chamada Jinja.

00:07:43.110 --> 00:07:46.680
E este será um paradigma comum no mundo real, segundo o qual

00:07:46.680 --> 00:07:49.530
linguagens diferentes, bibliotecas diferentes, estruturas diferentes

00:07:49.530 --> 00:07:53.052
muitas vezes emprestam uns dos outros, ou usam tecnologias

00:07:53.052 --> 00:07:56.010
que outra pessoa escreveu apenas para não ter que reinventar a roda.

00:07:56.010 --> 00:07:57.870
Portanto, o Flask é apenas uma estrutura.

00:07:57.870 --> 00:08:00.720
Essa é uma biblioteca de terceiros, bastante popular hoje em dia,

00:08:00.720 --> 00:08:03.390
é relativamente simples, e é por isso que o usamos no CS50.

00:08:03.390 --> 00:08:05.700
Se você programou antes do CS50, o Django é

00:08:05.700 --> 00:08:09.172
outra estrutura popular, ou biblioteca, no espaço Python,

00:08:09.172 --> 00:08:10.630
mas é um pouco mais complicado.

00:08:10.630 --> 00:08:11.790
Então nos concentramos no Flask.

00:08:11.790 --> 00:08:14.640
E Jinja, veremos, não é uma linguagem de programação.

00:08:14.640 --> 00:08:16.560
Será apenas uma sintaxe--

00:08:16.560 --> 00:08:18.930
felizmente familiar-- com chaves que

00:08:18.930 --> 00:08:22.300
nos permitem usar espaços reservados em nossas páginas da web reais.

00:08:22.300 --> 00:08:24.810
Então, novamente, você vai envolver suas mentes eventualmente

00:08:24.810 --> 00:08:27.313
em torno de onde estão as linhas entre essas várias tecnologias,

00:08:27.313 --> 00:08:28.980
mas essas não são as idéias interessantes.

00:08:28.980 --> 00:08:32.070
As ideias interessantes são as que serão focadas no código.

00:08:32.070 --> 00:08:35.400
Mas a partir de hoje, em vez de executar o servidor HTTP

00:08:35.400 --> 00:08:40.200
para servir um site estático, faremos com que você comece a executar literalmente o espaço do Flask

00:08:40.200 --> 00:08:45.750
execute em sua janela de terminal para executar seu próprio servidor web implementado

00:08:45.750 --> 00:08:48.300
em Python usando esta estrutura Flask.

00:08:48.300 --> 00:08:51.990
Então bootstrap era uma biblioteca para fazer seu CSS

00:08:51.990 --> 00:08:54.510
e JavaScript mais bonito e interativo.

00:08:54.510 --> 00:08:57.030
Flask é uma estrutura, ou biblioteca, para apenas

00:08:57.030 --> 00:09:00.750
tornando seu código Python mais agradável de usar, já que você está emprestando recursos

00:09:00.750 --> 00:09:02.100
de outra pessoa.

00:09:02.100 --> 00:09:04.150
Tudo bem, então como podemos fazer isso?

00:09:04.150 --> 00:09:08.430
Bem, se você fosse escrever seu próprio aplicativo da web, seu próprio amazon.com,

00:09:08.430 --> 00:09:11.670
seu próprio google.com em Python usando Flask,

00:09:11.670 --> 00:09:15.342
minimamente, você precisa ter um arquivo chamado app.py por convenção, que

00:09:15.342 --> 00:09:16.800
é onde vai todo o seu código Python.

00:09:16.800 --> 00:09:19.810
E então uma pasta chamada templates, que é onde todos os seus templates

00:09:19.810 --> 00:09:20.310
ir.

00:09:20.310 --> 00:09:23.050
E, por enquanto, seus modelos são apenas seus arquivos HTML.

00:09:23.050 --> 00:09:26.250
Então, se vamos começar a construir coisas interativas mais interessantes

00:09:26.250 --> 00:09:29.760
como google.com ou amazon.com, precisamos ser

00:09:29.760 --> 00:09:31.300
capaz de executar código no servidor.

00:09:31.300 --> 00:09:32.550
E então esta é a convenção.

00:09:32.550 --> 00:09:34.500
Não é mais indexado em HTML necessariamente,

00:09:34.500 --> 00:09:36.750
são essas duas coisas no nível superior.

00:09:36.750 --> 00:09:39.840
Com isso dito, veremos rapidamente que existem algumas outras convenções.

00:09:39.840 --> 00:09:43.170
E em meus exemplos online e no conjunto de problemas nove,

00:09:43.170 --> 00:09:46.170
você verá outro arquivo chamado requirements.txt,

00:09:46.170 --> 00:09:48.150
que é apenas um arquivo de texto que permite

00:09:48.150 --> 00:09:51.690
para enumerar todas as bibliotecas de terceiros que seu aplicativo pode

00:09:51.690 --> 00:09:52.530
quer usar.

00:09:52.530 --> 00:09:56.148
É uma convenção para que o servidor possa instalar coisas automaticamente para você

00:09:56.148 --> 00:09:57.690
sem você ter que fazer isso manualmente.

00:09:57.690 --> 00:10:01.350
E então estático será onde literalmente seu conteúdo estático vai.

00:10:01.350 --> 00:10:03.420
Portanto, se você tiver imagens para seu aplicativo da Web,

00:10:03.420 --> 00:10:06.240
se você tiver arquivos JavaScript, arquivos CSS,

00:10:06.240 --> 00:10:08.040
por convenção que vai em estático.

00:10:08.040 --> 00:10:10.470
Estas são apenas convenções, tudo isso pode ser mudado.

00:10:10.470 --> 00:10:12.820
Mas esta é a maneira de fazer as coisas.

00:10:12.820 --> 00:10:14.890
Então, vamos apresentá-lo aos padrões.

00:10:14.890 --> 00:10:16.660
Tudo bem, então o que isso significa?

00:10:16.660 --> 00:10:19.470
Como, por exemplo, eu poderia implementar meu próprio web

00:10:19.470 --> 00:10:25.440
aplicativo usando Python que de alguma forma emite uma mensagem como, olá, mundo?

00:10:25.440 --> 00:10:28.160
Tudo bem, bem acontece, apenas isso.

00:10:28.160 --> 00:10:30.150
Agora vamos separar isso em apenas um momento,

00:10:30.150 --> 00:10:35.300
mas este é o conteúdo de um arquivo app.py de exemplo que aparentemente usa alguns

00:10:35.300 --> 00:10:38.485
material de biblioteca-- como sintaxe familiar de algo, importar--

00:10:38.485 --> 00:10:39.110
algo mais.

00:10:39.110 --> 00:10:42.110
Já vimos isso antes com CSVs e outras bibliotecas--

00:10:42.110 --> 00:10:45.350
esta é uma sintaxe um tanto nova, mas é uma espécie de copiar e colar por enquanto.

00:10:45.350 --> 00:10:48.530
Esta é definitivamente uma nova sintaxe e meio estranha com o sinal @ aqui.

00:10:48.530 --> 00:10:50.330
Mas veremos isso de novo e de novo hoje.

00:10:50.330 --> 00:10:53.820
E é apenas copiar e colar inicialmente até você entender o que está fazendo por você.

00:10:53.820 --> 00:10:56.120
Mas pelo menos há algumas coisas familiares aqui,

00:10:56.120 --> 00:11:00.530
como index.html ainda estará conosco, mas dependerá de nós

00:11:00.530 --> 00:11:02.742
quando e como mostrá-lo ao usuário.

00:11:02.742 --> 00:11:03.950
Então, vamos tornar isso mais real.

00:11:03.950 --> 00:11:09.770
Deixe-me ir para o código VS aqui, e deixe-me ir em frente e criar um...

00:11:09.770 --> 00:11:11.990
que tal fazermos isso no Hello-- deixe-me

00:11:11.990 --> 00:11:15.050
do mkdir Hello para criar uma nova pasta chamada Hello.

00:11:15.050 --> 00:11:17.660
E eu vou colocar um CD nele apenas para isolar todos esses arquivos

00:11:17.660 --> 00:11:19.880
para o mesmo diretório, para que tenhamos aplicativos diferentes hoje

00:11:19.880 --> 00:11:20.900
e pastas diferentes.

00:11:20.900 --> 00:11:23.540
E agora eu vou fazer o código de--

00:11:23.540 --> 00:11:24.980
vamos fazer isso na verdade.

00:11:24.980 --> 00:11:27.980
Vamos fazer nosso mkdir templates.html--

00:11:27.980 --> 00:11:29.840
desculpe, não templates.html.

00:11:29.840 --> 00:11:32.875
Deixe-me renomear isso para modelos usando o comando MV.

00:11:32.875 --> 00:11:35.750
Isso não tem nada a ver com programação web, sou eu cometendo erros de digitação.

00:11:35.750 --> 00:11:39.110
Então, se eu digitar LS agora, terei uma pasta chamada templates.

00:11:39.110 --> 00:11:43.550
Tudo bem, vamos criar um arquivo chamado index.html

00:11:43.550 --> 00:11:47.030
isso vai ser super simples e basicamente copiar e colar da semana passada.

00:11:47.030 --> 00:11:50.420
Deixe-me esconder minha janela de terminal e deixe-me rapidamente

00:11:50.420 --> 00:11:53.480
uma página Hello, world simples usando minha tag HTML.

00:11:53.480 --> 00:11:59.060
Lang will = English, então dentro disso, eu vou ter uma tag head.

00:11:59.060 --> 00:12:01.160
Dentro disso, vou ter uma tag de título,

00:12:01.160 --> 00:12:03.380
e vou chamar essa coisa de Olá.

00:12:03.380 --> 00:12:05.540
Vou então ter um corpo, e neste estou

00:12:05.540 --> 00:12:08.330
só vai dizer algo simples como, Olá, mundo.

00:12:08.330 --> 00:12:10.400
E só para ser compatível com dispositivos móveis, lembre-se

00:12:10.400 --> 00:12:11.900
que tocamos nessas meta tags.

00:12:11.900 --> 00:12:14.840
Então, caso você depois da aula jogue com seu dispositivo móvel

00:12:14.840 --> 00:12:19.580
do seu laptop, farei nome = entre aspas e sem aspas "janela de visualização".

00:12:19.580 --> 00:12:22.973
Viewport-- e então content = e eu nunca me lembro disso,

00:12:22.973 --> 00:12:24.890
Estou literalmente lendo de uma folha de dicas.

00:12:24.890 --> 00:12:27.740
Escala inicial = 1.

00:12:27.740 --> 00:12:29.930
Largura = largura do dispositivo.

00:12:29.930 --> 00:12:32.390
E isso é apenas esse encantamento mágico

00:12:32.390 --> 00:12:35.120
que diz ao navegador, dimensione as coisas adequadamente

00:12:35.120 --> 00:12:37.010
para o tamanho do dispositivo.

00:12:37.010 --> 00:12:38.840
Ele aumenta um pouco o tamanho da fonte.

00:12:38.840 --> 00:12:41.090
Tudo bem, então isso é o que eu teria feito na semana passada.

00:12:41.090 --> 00:12:43.180
E eu teria servido esta página da web executando

00:12:43.180 --> 00:12:46.730
servidor HTTP no mesmo diretório e, boom, eu veria esse HTML.

00:12:46.730 --> 00:12:49.978
Mas vamos agora começar a ter algum controle sobre a experiência do usuário.

00:12:49.978 --> 00:12:51.770
E por enquanto vai ser nada assombroso.

00:12:51.770 --> 00:12:53.700
Só vai sempre dizer Olá, mundo.

00:12:53.700 --> 00:12:56.690
Mas daqui a pouco, a versão dois vai dizer Olá, David,

00:12:56.690 --> 00:12:59.120
ou Hello, Carter, um pouco mais dinamicamente.

00:12:59.120 --> 00:13:02.998
E escalaremos rapidamente a partir daí para aplicativos apenas mais interessantes, como

00:13:02.998 --> 00:13:04.790
bem, culminando com coisas como biscoitos,

00:13:04.790 --> 00:13:06.420
carrinhos de compras e similares.

00:13:06.420 --> 00:13:08.820
Então deixe-me voltar para a janela do meu terminal,

00:13:08.820 --> 00:13:13.100
e como prometido, deixe-me criar outro arquivo chamado app.py.

00:13:13.100 --> 00:13:16.670
E é aqui que agora preciso implementar o servidor web que vou

00:13:16.670 --> 00:13:18.622
para executar usando esta estrutura Flask.

00:13:18.622 --> 00:13:20.330
E, por enquanto, vou apenas fazer

00:13:20.330 --> 00:13:24.110
alguma cópia e cola do que vimos no slide há pouco,

00:13:24.110 --> 00:13:25.760
da biblioteca Flask--

00:13:25.760 --> 00:13:27.530
que pré-instalamos para você--

00:13:27.530 --> 00:13:33.470
Vou importar uma função chamada Flask capital F. É sutil,

00:13:33.470 --> 00:13:34.770
mas é importante lá.

00:13:34.770 --> 00:13:37.970
E também vou importar algumas outras coisas-- uma função chamada

00:13:37.970 --> 00:13:42.080
modelo de renderização e outra variável chamada request.

00:13:42.080 --> 00:13:45.230
E a única maneira de saber disso é por ter ensinado isso antes,

00:13:45.230 --> 00:13:47.797
leia a documentação, siga um tutorial.

00:13:47.797 --> 00:13:50.880
Você não saberia disso a menos que alguém lhe dissesse ou você lesse como fazer isso.

00:13:50.880 --> 00:13:52.838
Mas o que isso significa é que essa biblioteca chamada

00:13:52.838 --> 00:13:57.110
Flask tem três coisas - uma função chamada Flask F maiúsculo,

00:13:57.110 --> 00:14:01.002
uma função chamada modelo de renderização e uma variável incorporada chamada request.

00:14:01.002 --> 00:14:02.960
E isso vai ser todos os blocos de construção

00:14:02.960 --> 00:14:05.570
Eu preciso implementar meu próprio servidor web.

00:14:05.570 --> 00:14:09.200
A convenção no Flask, quando você deseja criar um aplicativo da Web em Python, é você

00:14:09.200 --> 00:14:11.420
crie uma variável por convenção chamada app,

00:14:11.420 --> 00:14:16.070
e então você atribui a ele o valor de retorno dessa função Flask-- F maiúsculo--

00:14:16.070 --> 00:14:23.000
e passe para ele __name__, o que é estranho, mas já vimos isso antes.

00:14:23.000 --> 00:14:29.840
Algumas semanas atrás, alguém se lembra quando e por que mencionamos __name__?

00:14:29.840 --> 00:14:31.796
Sim?

00:14:31.796 --> 00:14:35.660
AUDIÊNCIA: [INAUDÍVEL]

00:14:35.660 --> 00:14:41.030
DAVID MALAN: Sim, se quiséssemos verificar se o nome do arquivo era principal

00:14:41.030 --> 00:14:45.680
para evitar uma situação em que, se você estiver escrevendo seu próprio código de biblioteca,

00:14:45.680 --> 00:14:48.500
você não quer que seu código seja executado automaticamente.

00:14:48.500 --> 00:14:51.320
Você deseja potencialmente executar a função principal.

00:14:51.320 --> 00:14:53.450
E isso foi uma solução para esse problema aqui.

00:14:53.450 --> 00:14:55.670
Para os propósitos de hoje, é assim que você faz,

00:14:55.670 --> 00:14:58.800
__name__ refere-se ao arquivo atual.

00:14:58.800 --> 00:15:02.450
E então este é apenas um pequeno truque que diz para transformar este arquivo em um Flask

00:15:02.450 --> 00:15:03.110
aplicativo.

00:15:03.110 --> 00:15:06.950
Isso é tudo, e por enquanto essa linha é suficiente.

00:15:06.950 --> 00:15:08.760
Tudo bem, o que eu quero fazer depois disso?

00:15:08.760 --> 00:15:10.730
Bem, agora estou no comando do servidor web.

00:15:10.730 --> 00:15:13.700
Eu preciso escrever o código que decide, com base

00:15:13.700 --> 00:15:18.650
a pedido do navegador, que arquivo ou arquivos vou enviar do servidor

00:15:18.650 --> 00:15:19.430
para o navegador.

00:15:19.430 --> 00:15:22.950
Na semana passada, o servidor HTTP fez tudo isso para nós apenas com base no nome do arquivo.

00:15:22.950 --> 00:15:25.730
Mas hoje vou assumir o controle desse processo.

00:15:25.730 --> 00:15:27.600
E a maneira que eu faço isso é a seguinte.

00:15:27.600 --> 00:15:32.490
Eu digo app.routh com, estranhamente, um símbolo @ na frente dele.

00:15:32.490 --> 00:15:34.610
Isso é conhecido em Python como decorador.

00:15:34.610 --> 00:15:36.800
E é um recurso do Python, não do Flask

00:15:36.800 --> 00:15:39.950
que não apresentamos nas últimas semanas, mas é um especial--

00:15:39.950 --> 00:15:42.770
é um truque útil para fazer o que estamos prestes a fazer.

00:15:42.770 --> 00:15:46.610
A raiz que quero definir é "barra" entre aspas, ou seja,

00:15:46.610 --> 00:15:51.200
aqui está o código que eu quero que o servidor execute sempre que um usuário visitar,

00:15:51.200 --> 00:15:53.960
/barra página padrão do site.

00:15:53.960 --> 00:15:55.940
Bem, qual código eu quero que eles executem?

00:15:55.940 --> 00:15:57.650
Bem, eu quero que eles executem uma função.

00:15:57.650 --> 00:16:00.050
E posso, portanto, definir uma função em Python.

00:16:00.050 --> 00:16:03.650
Tecnicamente, posso chamar isso de qualquer coisa que eu queira-- x, ou y, ou z.

00:16:03.650 --> 00:16:06.350
Mas porque eles estão acessando a página padrão conhecida de outra forma

00:16:06.350 --> 00:16:09.770
como índice do site, chamarei de forma mais razoável

00:16:09.770 --> 00:16:10.687
este índice de função.

00:16:10.687 --> 00:16:13.520
Mas apenas uma convenção, você pode chamá-lo do que quiser, mas x, y,

00:16:13.520 --> 00:16:16.430
ou z é provavelmente uma escolha estilística ruim.

00:16:16.430 --> 00:16:18.690
Não precisa de nenhum argumento neste caso.

00:16:18.690 --> 00:16:20.330
E a única coisa que este código--

00:16:20.330 --> 00:16:24.980
essa função vai fazer é, por enquanto, vamos em frente

00:16:24.980 --> 00:16:29.190
e faça com que ele retorne "Hello, world" entre aspas.

00:16:29.190 --> 00:16:31.000
E é isso.

00:16:31.000 --> 00:16:35.080
Tudo bem, agora deixe-me entrar na janela do meu terminal, deixe-me ir em frente

00:16:35.080 --> 00:16:39.490
e execute o Flask no mesmo diretório que tem app.py e pressione Enter.

00:16:39.490 --> 00:16:43.180
Vou ver uma saída enigmática, mas incluindo uma URL do meu espaço de código,

00:16:43.180 --> 00:16:45.940
e se eu abrir esse URL depois de passar o mouse sobre ele,

00:16:45.940 --> 00:16:48.460
Eu realmente verei Olá, mundo como você pode esperar.

00:16:48.460 --> 00:16:49.640
Mas deixe-me fazer isso.

00:16:49.640 --> 00:16:51.910
Deixe-me ir em frente e clicar com o botão direito na página

00:16:51.910 --> 00:16:55.000
e clique em Exibir código-fonte da página, o que, caso ainda não tenha feito,

00:16:55.000 --> 00:16:58.930
mostra todo o HTML de uma página, por mais bonito ou confuso que seja.

00:16:58.930 --> 00:17:01.540
E é isso, não há HTML que eu cuspi,

00:17:01.540 --> 00:17:04.089
é apenas entre aspas "Olá, mundo".

00:17:04.089 --> 00:17:07.569
Bem, se eu realmente quiser cuspir uma página da Web completa, o que não é

00:17:07.569 --> 00:17:09.020
um grande negócio aqui, porque quem se importa?

00:17:09.020 --> 00:17:10.400
É apenas o texto de qualquer maneira.

00:17:10.400 --> 00:17:14.510
Mas se eu quiser cuspir um arquivo inteiro, deixe-me fazer isso.

00:17:14.510 --> 00:17:18.190
Eu quero retornar, essencialmente, o conteúdo de index.html,

00:17:18.190 --> 00:17:21.710
que tem todas as tags que eu quero - o material compatível com dispositivos móveis e tudo isso.

00:17:21.710 --> 00:17:25.540
Bem, não posso simplesmente retornar index.html, mas posso retornar isso.

00:17:25.540 --> 00:17:30.190
Modelo de renderização, entre aspas, "index.html".

00:17:30.190 --> 00:17:33.280
E de acordo com a documentação do Flask, esta função de modelo de renderização

00:17:33.280 --> 00:17:36.670
irá encontrar esse arquivo para mim na minha pasta de modelos por convenção.

00:17:36.670 --> 00:17:39.850
Ele vai abrir e depois vai cuspir tudo

00:17:39.850 --> 00:17:43.420
para o navegador para mim, para que eu possa manter todo o meu HTML em um só lugar,

00:17:43.420 --> 00:17:45.890
e todo o meu código Python neste único lugar.

00:17:45.890 --> 00:17:49.540
Agora, se eu voltar ao meu navegador e recarregar,

00:17:49.540 --> 00:17:51.340
Eu não acho que vou realmente ver uma diferença,

00:17:51.340 --> 00:17:53.590
porque é o mesmo texto, em última análise.

00:17:53.590 --> 00:17:59.230
Mas se eu visualizar a fonte da página agora, observe que, ah, há todo o HTML

00:17:59.230 --> 00:18:01.430
que acabou de ser enviado para o navegador.

00:18:01.430 --> 00:18:04.270
Isso é apenas para dizer que temos os blocos de construção - o quebra-cabeça

00:18:04.270 --> 00:18:06.520
pedaços, se você quiser-- através do qual agora armazenar

00:18:06.520 --> 00:18:09.050
todo o nosso HTML em um só lugar-- e presumivelmente CSS,

00:18:09.050 --> 00:18:12.700
JavaScript, e assim por diante-- mas, em seguida, servir o que quisermos,

00:18:12.700 --> 00:18:16.690
mesmo que eu esteja apenas cuspindo index.html cegamente.

00:18:16.690 --> 00:18:20.620
Portanto, antes de prosseguirmos, qualquer dúvida sobre isso, que novamente, reivindico

00:18:20.620 --> 00:18:24.100
é como minha versão manual do que o servidor HTTP era

00:18:24.100 --> 00:18:25.940
fazendo por nós automaticamente na semana passada.

00:18:25.940 --> 00:18:28.110
Mas é assim que você mesmo faz.

00:18:28.110 --> 00:18:30.620
Alguma pergunta?

00:18:30.620 --> 00:18:32.850
Tudo bem, vamos torná-lo mais interessante,

00:18:32.850 --> 00:18:36.770
o que não poderíamos fazer apenas com servidor HTTP e HTML.

00:18:36.770 --> 00:18:39.750
Por que não vamos em frente e fazer isso.

00:18:39.750 --> 00:18:42.500
Deixe-me visitar o mesmo URL e aumentar o zoom.

00:18:42.500 --> 00:18:45.008
E sua URL será diferente do meu espaço de código,

00:18:45.008 --> 00:18:46.550
mas vai terminar da mesma forma aqui.

00:18:46.550 --> 00:18:51.560
Vou fazer /?name=David, por exemplo.

00:18:51.560 --> 00:18:55.920
Ou q=cats, ou name=Carter-- qualquer par chave-valor que eu queira,

00:18:55.920 --> 00:18:58.550
Vou acrescentar depois de uma barra e um ponto de interrogação,

00:18:58.550 --> 00:19:00.560
fornecendo assim a entrada do usuário para o servidor.

00:19:00.560 --> 00:19:02.443
Embora de uma forma muito hostil ao usuário.

00:19:02.443 --> 00:19:04.610
Ninguém vai fazer isso normalmente em seu navegador.

00:19:04.610 --> 00:19:08.070
Digite-- nada muda aqui, apenas diz Hello, world,

00:19:08.070 --> 00:19:10.070
mas não seria bom se dissesse Hello, David?

00:19:10.070 --> 00:19:13.610
Ou de forma equivalente, se eu ampliar aqui novamente e mudar David para Carter

00:19:13.610 --> 00:19:17.520
e aperte Enter, não seria bom se dissesse Hello, Carter?

00:19:17.520 --> 00:19:19.320
Então, precisamos de algum dinamismo lá.

00:19:19.320 --> 00:19:22.160
E é aqui que o Python será nosso amigo.

00:19:22.160 --> 00:19:29.120
Se eu quiser acessar os parâmetros HTTP que o usuário forneceu via

00:19:29.120 --> 00:19:31.970
a URL-- seja q=cats ou name=David--

00:19:31.970 --> 00:19:36.360
Posso usar essa variável especial que já importei preventivamente anteriormente.

00:19:36.360 --> 00:19:37.650
E eu posso fazer isso--

00:19:37.650 --> 00:19:40.340
Se houver um parâmetro HTTP chamado nome

00:19:40.340 --> 00:19:43.820
no que chamarei de request.args.

00:19:43.820 --> 00:19:47.390
Em seguida, vou criar uma variável chamada nome,

00:19:47.390 --> 00:19:51.350
e vou defini-lo igual ao nome do colchete request.args.

00:19:51.350 --> 00:19:54.290
Else-- se não houver, entre aspas, "nome"

00:19:54.290 --> 00:19:57.200
chave nesta variável especial chamada request.args,

00:19:57.200 --> 00:20:00.740
Vou assumir que o nome do usuário é world por padrão. Agora

00:20:00.740 --> 00:20:01.800
O que está acontecendo aqui?

00:20:01.800 --> 00:20:05.300
Bem, acontece que o Flask nos fornece essa variável especial chamada

00:20:05.300 --> 00:20:10.130
request.args, e lá estão todos os pares chave-valor que

00:20:10.130 --> 00:20:12.470
pode ter vindo através do URL.

00:20:12.470 --> 00:20:15.860
Então, se você tivesse que adivinhar que tipo de...

00:20:15.860 --> 00:20:19.160
ou que tipo de dados é request.args?

00:20:19.160 --> 00:20:21.410
Esse é o seu nome, e aqui está no contexto.

00:20:21.410 --> 00:20:23.750
A linha nove pode fornecer uma pista.

00:20:23.750 --> 00:20:28.710
Em Python, que tipo de dados pode ser request.args?

00:20:28.710 --> 00:20:29.715
Sim.

00:20:29.715 --> 00:20:30.590
AUDIÊNCIA: [INAUDÍVEL]

00:20:30.590 --> 00:20:33.340
DAVID MALAN: Não será uma matriz ou uma lista porque esses

00:20:33.340 --> 00:20:35.940
são sempre, em todos os idiomas que vimos, indexados numericamente.

00:20:35.940 --> 00:20:38.580
Mas você está perto.

00:20:38.580 --> 00:20:39.445
Alguém?

00:20:39.445 --> 00:20:40.320
AUDIÊNCIA: [INAUDÍVEL]

00:20:40.320 --> 00:20:41.612
DAVID MALAN: É um dicionário.

00:20:41.612 --> 00:20:44.790
Portanto, um dicionário é sintaticamente semelhante a uma lista em Python,

00:20:44.790 --> 00:20:47.520
mas em vez de índices numéricos como 0 1 2,

00:20:47.520 --> 00:20:50.373
você pode literalmente usar strings como, entre aspas, "nome".

00:20:50.373 --> 00:20:52.540
Agora isso é um pouco de mentira branca, é um dicionário.

00:20:52.540 --> 00:20:55.210
Mas é a versão sofisticada especial do Flask de um dicionário.

00:20:55.210 --> 00:20:58.757
Mas a sintaxe pela qual você pode acessá-lo é exatamente a mesma.

00:20:58.757 --> 00:21:00.090
E eu realmente-- isso é um erro de digitação.

00:21:00.090 --> 00:21:01.780
Eu não quis dizer nomes lá.

00:21:01.780 --> 00:21:06.160
Eu quis dizer nome no singular, mas por outro lado acho que o código está correto.

00:21:06.160 --> 00:21:08.580
Isso vai, na linha oito, verificar se há

00:21:08.580 --> 00:21:11.670
é uma chave chamada name em request.args e, em caso afirmativo,

00:21:11.670 --> 00:21:13.860
ele vai defini-lo igual a esse valor.

00:21:13.860 --> 00:21:15.900
Caso contrário, o padrão será world.

00:21:15.900 --> 00:21:18.540
Eu deliberadamente não fiz isso.

00:21:18.540 --> 00:21:23.130
Eu adicionei isso se mais e não fiz isso por quê?

00:21:23.130 --> 00:21:26.715
Que erro pode acontecer se eu simplesmente pegar o nome cegamente?

00:21:26.715 --> 00:21:30.645
AUDIÊNCIA: [INAUDÍVEL]

00:21:30.645 --> 00:21:31.520
DAVID MALAN: Exatamente.

00:21:31.520 --> 00:21:36.680
Se não houvesse nada no final da URL que estivesse no formato ?nome=alguém,

00:21:36.680 --> 00:21:38.660
então não haveria chave de nome.

00:21:38.660 --> 00:21:41.510
E isso é um par de semanas atrás, mas isso lhe daria

00:21:41.510 --> 00:21:43.340
um daqueles erros de teclas irritantes, quando você

00:21:43.340 --> 00:21:45.110
obter um rastreamento porque você estragou tudo porque você

00:21:45.110 --> 00:21:46.620
usou uma string que não existe.

00:21:46.620 --> 00:21:49.850
É por isso que estou apenas tentando evitar essa situação de forma proativa, assim como

00:21:49.850 --> 00:21:51.330
pode ter um par de semanas atrás.

00:21:51.330 --> 00:21:55.170
Portanto, embora seja mais detalhado, isso é muito mais defensivo

00:21:55.170 --> 00:21:59.090
para que eu não indexe acidentalmente em um dicionário onde não há chave.

00:21:59.090 --> 00:22:02.150
Mas veremos como podemos apertar isso para não ser quatro linhas, mas uma.

00:22:02.150 --> 00:22:04.290
Mas acho que agora posso fazer isso.

00:22:04.290 --> 00:22:08.700
Não seria bom se agora no meu arquivo index.html--

00:22:08.700 --> 00:22:10.910
qual recall está na minha pasta de modelos--

00:22:10.910 --> 00:22:13.670
não seria bom se eu pudesse fazer o equivalente em C

00:22:13.670 --> 00:22:16.020
de como uma pessoa S aqui por exemplo?

00:22:16.020 --> 00:22:19.160
Ou em Python, algo como este nome.

00:22:19.160 --> 00:22:22.520
Bem, está perto, e isso é só porque alguns humanos diferentes

00:22:22.520 --> 00:22:25.730
inventar linguagens diferentes, inventar estruturas diferentes.

00:22:25.730 --> 00:22:29.420
A sintaxe para isso no Flask é realmente

00:22:29.420 --> 00:22:35.540
faça, opa, duas chaves e, em seguida, o nome da variável dentro dela.

00:22:35.540 --> 00:22:36.470
Por que?

00:22:36.470 --> 00:22:39.270
Provavelmente alguém imaginou, quais são as chances

00:22:39.270 --> 00:22:42.020
que uma pessoa normal jamais usará duas chaves ao mesmo tempo

00:22:42.020 --> 00:22:42.983
contra apenas um?

00:22:42.983 --> 00:22:44.900
Isso provavelmente está diminuindo a probabilidade

00:22:44.900 --> 00:22:48.170
que as pessoas realmente querem produzir chaves literais como esta.

00:22:48.170 --> 00:22:51.710
Portanto, é semelhante em espírito às strings f do Python, é semelhante em espírito

00:22:51.710 --> 00:22:55.040
para a pessoa S de C, é semelhante em espírito aos pontos de interrogação de SQL.

00:22:55.040 --> 00:22:59.120
Mesma ideia, sintaxe ligeiramente diferente, e isso aí é Jinja.

00:22:59.120 --> 00:23:02.720
Portanto, não é um código de programação em si, é apenas um modelo.

00:23:02.720 --> 00:23:05.270
E, de fato, é por isso que esta pasta é chamada de modelos.

00:23:05.270 --> 00:23:09.410
É como um projeto para o que eu quero que seja cuspido para o usuário,

00:23:09.410 --> 00:23:11.840
mas eu tenho esses espaços reservados como esta variável

00:23:11.840 --> 00:23:13.980
que eu quero plug-in para esse valor.

00:23:13.980 --> 00:23:16.610
Agora, só isso não é suficiente.

00:23:16.610 --> 00:23:20.270
Veja o que acontece se eu voltar para meu outro navegador e

00:23:20.270 --> 00:23:22.760
recarregue a página depois de mudar aqui.

00:23:22.760 --> 00:23:24.420
Vamos fazer name=David novamente.

00:23:24.420 --> 00:23:28.970
Enter-- nada é exibido após a vírgula Hello.

00:23:28.970 --> 00:23:33.198
Portanto, parece que a variável name ainda não existe.

00:23:33.198 --> 00:23:35.240
E é por isso que, de fato, se eu visualizar o código-fonte da página,

00:23:35.240 --> 00:23:37.040
você pode ver o que foi enviado para o navegador,

00:23:37.040 --> 00:23:39.110
algo está errado com meu espaço reservado.

00:23:39.110 --> 00:23:41.180
Mas eu só preciso ser um pouco mais explícito

00:23:41.180 --> 00:23:43.010
quanto ao que eu quero enviar para onde.

00:23:43.010 --> 00:23:47.592
Acontece que a função do modelo de renderização não leva apenas um argumento--

00:23:47.592 --> 00:23:49.550
o nome do modelo que você deseja cuspir--

00:23:49.550 --> 00:23:53.810
mas leva depois disso, com vírgulas, todos os espaços reservados

00:23:53.810 --> 00:23:55.020
você deseja plug-in.

00:23:55.020 --> 00:23:59.510
Então, por exemplo, se você quiser que o espaço reservado seja isto-- literalmente

00:23:59.510 --> 00:24:02.310
espaço reservado dentro dessas chaves,

00:24:02.310 --> 00:24:05.900
você pode especificar como o segundo argumento para renderizar o modelo,

00:24:05.900 --> 00:24:11.780
um argumento nomeado de espaço reservado é igual a qualquer que seja o nome.

00:24:11.780 --> 00:24:15.470
Portanto, name é a variável nas linhas acima, espaço reservado

00:24:15.470 --> 00:24:18.620
é o nome do meu espaço reservado literal entre as chaves,

00:24:18.620 --> 00:24:22.700
e agora, se eu voltar ao meu navegador e recarregá-lo com still,

00:24:22.700 --> 00:24:23.450
entre áspas--

00:24:23.450 --> 00:24:29.630
ainda com ?name=David na URL, agora realmente vejo Olá, David.

00:24:29.630 --> 00:24:30.920
E se eu aumentar o zoom aqui--

00:24:30.920 --> 00:24:32.330
e deixe-me mudar para cá.

00:24:32.330 --> 00:24:34.160
Deixe-me digitar Carter e apertar Enter...

00:24:34.160 --> 00:24:37.070
agora vejo Olá, Carter em vez disso.

00:24:37.070 --> 00:24:40.518
Agora, isso é um pouco desnecessário chamar explicitamente o espaço reservado

00:24:40.518 --> 00:24:43.310
"placeholder", especialmente se você quiser ter dois ou três deles.

00:24:43.310 --> 00:24:45.300
Então você pode chamar isso do que quiser.

00:24:45.300 --> 00:24:48.633
E vou mudar de volta para o nome, que é um pouco mais simples.

00:24:48.633 --> 00:24:51.170
A única coisa estranha aqui é que agora você vai

00:24:51.170 --> 00:24:52.910
veja que você está escrevendo código como este.

00:24:52.910 --> 00:24:56.210
E isso está correto, e essa é a norma, só parece estranho.

00:24:56.210 --> 00:24:58.730
Mas a coisa à esquerda do sinal de igual

00:24:58.730 --> 00:25:02.450
é o espaço reservado que você está usando no modelo, a coisa à direita

00:25:02.450 --> 00:25:05.610
pode ser qualquer valor que você quiser, incluindo uma variável.

00:25:05.610 --> 00:25:08.750
Mesmo que eu esteja nomeando-os exatamente da mesma forma - o que parece estúpido,

00:25:08.750 --> 00:25:11.570
reconhecidamente - isso é o que as pessoas tendem a fazer.

00:25:11.570 --> 00:25:13.910
Só porque é mais simples do que introduzir

00:25:13.910 --> 00:25:15.470
outra palavra como espaço reservado.

00:25:15.470 --> 00:25:20.140
Alguma pergunta agora sobre isso?

00:25:20.140 --> 00:25:22.710
Alguma dúvida sobre esses espaços reservados?

00:25:22.710 --> 00:25:23.280
Não?

00:25:23.280 --> 00:25:25.470
Tudo bem, bem, vamos apertar isso um pouco

00:25:25.470 --> 00:25:28.890
e ver se não conseguimos que as coisas sejam ainda mais dinâmicas.

00:25:28.890 --> 00:25:32.970
Deixe-me propor agora que, em vez de gerar -

00:25:32.970 --> 00:25:36.630
em vez de usar esta condição que fez uma ideia muito simples como muito

00:25:36.630 --> 00:25:38.790
detalhado com quatro linhas diferentes, verifica-se

00:25:38.790 --> 00:25:40.510
há uma maneira mais fácil de fazer isso.

00:25:40.510 --> 00:25:43.410
Você ainda pode criar uma variável chamada name,

00:25:43.410 --> 00:25:46.320
e você pode defini-lo igual a request.args,

00:25:46.320 --> 00:25:50.850
mas em vez de apenas indexar cegamente nesse dicionário,

00:25:50.850 --> 00:25:57.150
acontece que request.args também vem com uma função chamada GET.

00:25:57.150 --> 00:26:01.930
Você pode passar um argumento que diga qual valor você deseja obter.

00:26:01.930 --> 00:26:07.470
E por padrão, se não houver nenhuma chave chamada name nesse dicionário,

00:26:07.470 --> 00:26:10.650
esta função não lançará um erro de chave, apenas retornará nenhum,

00:26:10.650 --> 00:26:13.470
NONE, a variável especial-- o valor especial em Python.

00:26:13.470 --> 00:26:17.490
Portanto, evita um bug em seu código, mas reduz quatro linhas em uma.

00:26:17.490 --> 00:26:19.710
Mas ainda melhor, se você ler a documentação,

00:26:19.710 --> 00:26:23.290
a função GET também pode assumir um valor padrão explícito.

00:26:23.290 --> 00:26:26.880
Então, se você não quiser que nenhum apareça na tela, como Olá, em branco ou...

00:26:26.880 --> 00:26:28.290
Quero dizer, isso seria estranho também.

00:26:28.290 --> 00:26:31.500
Você pode simplesmente colocar um valor padrão de acordo com a documentação

00:26:31.500 --> 00:26:33.460
desta função como mundo.

00:26:33.460 --> 00:26:36.160
Então agora passamos de quatro linhas para apenas uma.

00:26:36.160 --> 00:26:37.590
Então, sem dúvida, é melhor projetado.

00:26:37.590 --> 00:26:39.690
E se eu voltar para o navegador agora ainda

00:26:39.690 --> 00:26:43.260
com Carter na URL e clique em recarregar, a mesma coisa acontece,

00:26:43.260 --> 00:26:45.070
mas vamos notar isso.

00:26:45.070 --> 00:26:50.280
Suponha que eu me livre do parâmetro name e pressione Enter,

00:26:50.280 --> 00:26:52.230
agora ele vai para o padrão em vez disso--

00:26:52.230 --> 00:26:52.780
mundo.

00:26:52.780 --> 00:26:57.430
Portanto, é apenas um pouco melhor projetado do que fazer o contrário.

00:26:57.430 --> 00:27:00.300
Tudo bem, que tal subirmos um pouco mais as coisas.

00:27:00.300 --> 00:27:03.540
E que tal introduzirmos várias rotas?

00:27:03.540 --> 00:27:06.420
E realmente introduzir, talvez, uma forma na mistura.

00:27:06.420 --> 00:27:10.740
Porque, novamente, nenhuma pessoa normal vai visitar uma URL e adicionar

00:27:10.740 --> 00:27:14.610
e um ponto de interrogação e seu nome, não é assim que os navegadores funcionam.

00:27:14.610 --> 00:27:17.940
Bem, é assim que os navegadores funcionam, não é assim que os humanos interagem com os navegadores.

00:27:17.940 --> 00:27:20.320
Você e eu usamos um formulário, normalmente, em vez disso.

00:27:20.320 --> 00:27:22.320
Então agora as coisas podem ficar um pouco mais interessantes

00:27:22.320 --> 00:27:25.530
ao fazer nosso próprio aplicativo da web porque talvez nós

00:27:25.530 --> 00:27:27.550
poderia fazer algo assim.

00:27:27.550 --> 00:27:29.740
Deixe-me ir e diminuir o zoom novamente.

00:27:29.740 --> 00:27:33.900
Deixe-me voltar ao meu código aqui e deixe-me mover isso e focar agora

00:27:33.900 --> 00:27:36.120
no arquivo index.html.

00:27:36.120 --> 00:27:38.850
Em vez de apenas este espaço reservado, por que não

00:27:38.850 --> 00:27:42.360
vá em frente e dê a nós mesmos uma forma com a qual brincamos um pouco

00:27:42.360 --> 00:27:44.820
no passado, seja para o Google ou qualquer outra coisa.

00:27:44.820 --> 00:27:47.400
E vamos fazer este formulário.

00:27:47.400 --> 00:27:50.160
E dentro deste formulário, vamos ter uma entrada.

00:27:50.160 --> 00:27:53.160
E o nome dessa entrada será, entre aspas, "nome".

00:27:53.160 --> 00:27:54.480
Então isso também é confuso.

00:27:54.480 --> 00:27:58.780
Mas as entradas têm atributos de nome, mas este é o nome de uma pessoa.

00:27:58.780 --> 00:28:00.580
Então, estou dizendo nome=nome aqui.

00:28:00.580 --> 00:28:03.120
Portanto, apenas um mundo confuso de semântica.

00:28:03.120 --> 00:28:07.470
E deixe-me ir em frente e tornar isso uma caixa de texto por padrão. E então

00:28:07.470 --> 00:28:11.760
deixe-me dar a mim mesmo um botão cujo tipo padrão será enviar.

00:28:11.760 --> 00:28:14.740
E o nome deste botão será cumprimentar, por exemplo.

00:28:14.740 --> 00:28:16.830
Então vamos ver o que acontece aqui, mas deixe-me mudar

00:28:16.830 --> 00:28:18.750
app.py para ser apenas o original mais simples.

00:28:18.750 --> 00:28:22.110
Não estou passando nenhum espaço reservado agora, e vou até mesmo me livrar disso.

00:28:22.110 --> 00:28:25.120
Eu só vou voltar para a primeira versão disso para simplificar.

00:28:25.120 --> 00:28:28.990
Vamos agora mudar a URL para nos livrarmos de Carter e de mim.

00:28:28.990 --> 00:28:33.990
Então, basta ir e pressionar Enter, e agora temos um formulário super simples novamente.

00:28:33.990 --> 00:28:35.910
Tudo bem, isso não é super amigável,

00:28:35.910 --> 00:28:37.890
mas há algumas melhorias interessantes que podemos fazer.

00:28:37.890 --> 00:28:41.760
Por exemplo, podemos desativar o preenchimento automático,

00:28:41.760 --> 00:28:44.010
especialmente se eu quiser digitar David e Carter manualmente

00:28:44.010 --> 00:28:46.470
e não quero que termine meu pensamento durante a aula.

00:28:46.470 --> 00:28:49.177
Podemos fazer o foco automático que coloca o cursor lá piscando

00:28:49.177 --> 00:28:51.510
por padrão, o que é bom porque então o humano não

00:28:51.510 --> 00:28:52.870
tem que lidar com isso.

00:28:52.870 --> 00:28:55.170
E então podemos até ter um atributo de espaço reservado.

00:28:55.170 --> 00:28:59.320
Placeholder=name para que seja como instruções incorporadas para isso.

00:28:59.320 --> 00:29:01.440
E agora, se eu voltar para a outra guia,

00:29:01.440 --> 00:29:05.252
nada mudou ainda porque eu tenho que baixar o HTML novamente, recarregar--

00:29:05.252 --> 00:29:06.960
OK, agora é um pouco mais amigável.

00:29:06.960 --> 00:29:08.580
Diz o nome em cinza claro.

00:29:08.580 --> 00:29:11.410
O cursor está piscando e estou quase pronto para começar.

00:29:11.410 --> 00:29:16.300
Mas este formulário ainda não foi programado para ir a lugar nenhum, então vamos fazer isso.

00:29:16.300 --> 00:29:19.815
Digamos, por exemplo, que a ação desta forma

00:29:19.815 --> 00:29:21.690
não será algo como google.com,

00:29:21.690 --> 00:29:23.550
que fizemos da última vez para gatos.

00:29:23.550 --> 00:29:28.440
Agora serei o front-end e o back-end deste site.

00:29:28.440 --> 00:29:31.740
O front-end é o que o ser humano vê - a página da web, os gráficos, os formulários.

00:29:31.740 --> 00:29:33.840
O back-end é o material que o ser humano normalmente

00:29:33.840 --> 00:29:37.600
não vê-- o código Python, o código SQL, o próprio servidor.

00:29:37.600 --> 00:29:42.390
Mas agora estou no controle de ambos os lados da experiência, o HTML e também

00:29:42.390 --> 00:29:43.300
as raízes.

00:29:43.300 --> 00:29:46.530
Então, vamos apenas propor que inventemos nossa própria rota,

00:29:46.530 --> 00:29:51.030
e em vez de chamá-lo de /search como o Google faz, vamos chamá-lo de /greet.

00:29:51.030 --> 00:29:54.070
E deixe-me especificar que o método que este formulário usará,

00:29:54.070 --> 00:29:56.280
que é tecnicamente o padrão, será get.

00:29:56.280 --> 00:29:59.940
E confusamente, é get minúsculo mesmo no envelope

00:29:59.940 --> 00:30:02.490
continuamos falando virtualmente, na verdade são maiúsculas.

00:30:02.490 --> 00:30:06.150
Novamente, a mão esquerda não estava falando com a mão direita quando essas coisas foram decididas.

00:30:06.150 --> 00:30:10.740
Tudo bem, então tudo o que fiz foi criar um formulário da Web que enviará

00:30:10.740 --> 00:30:14.640
qualquer que seja o valor da caixa de texto para uma rota chamada /greet.

00:30:14.640 --> 00:30:19.020
Por padrão, porque não há HTTP, ou HTTPS, ou nenhum nome de domínio,

00:30:19.020 --> 00:30:22.330
/greet será assumido como não sendo um google.com,

00:30:22.330 --> 00:30:25.120
mas qualquer que seja o URL do meu próprio servidor.

00:30:25.120 --> 00:30:29.440
Portanto, seja qual for a URL do meu espaço de código, esse será o prefixo implícito.

00:30:29.440 --> 00:30:31.940
Este /greet é apenas a rota.

00:30:31.940 --> 00:30:36.280
Agora vamos voltar ao arquivo app.py de códigos VS.

00:30:36.280 --> 00:30:39.010
Como eu costuro isso agora?

00:30:39.010 --> 00:30:41.620
Bem, acho que podemos usar index.html.

00:30:41.620 --> 00:30:45.070
Se o propósito de index.html na vida é apenas cuspir este formulário,

00:30:45.070 --> 00:30:47.260
terminamos uma das minhas rotas.

00:30:47.260 --> 00:30:50.080
Mas se eu quiser ter uma segunda rota-- cumprimente--

00:30:50.080 --> 00:30:54.310
que na verdade dá uma saudação ao usuário,

00:30:54.310 --> 00:30:56.350
bem, vamos preparar esse modelo também.

00:30:56.350 --> 00:30:58.990
Deixe-me seguir em frente e destacar todo esse HTML.

00:30:58.990 --> 00:31:04.690
Deixe-me voltar para a janela do meu terminal e para o meu diretório Hello,

00:31:04.690 --> 00:31:06.880
e, em seguida, no meu diretório de modelos.

00:31:06.880 --> 00:31:09.520
E deixe-me criar outro modelo chamado greet.

00:31:09.520 --> 00:31:14.260
HTML cujo objetivo na vida não será mostrar um formulário, mas saudar o usuário

00:31:14.260 --> 00:31:15.640
com Olá fulano de tal.

00:31:15.640 --> 00:31:19.030
Nesse arquivo, vou colar todo o mesmo HTML,

00:31:19.030 --> 00:31:21.670
mas vou me livrar do formulário e essencialmente reverter

00:31:21.670 --> 00:31:22.750
para nossa versão anterior--

00:31:22.750 --> 00:31:26.830
Olá vírgula-- e, em seguida, usando o nome da sintaxe Jinja.

00:31:26.830 --> 00:31:30.220
Portanto, um modelo-- index.html-- é para o formulário.

00:31:30.220 --> 00:31:34.150
O segundo modelo, agora, é para a saudação de Olá vírgula fulano de tal.

00:31:34.150 --> 00:31:37.730
Mas, caso contrário, esses arquivos, observe, são quase os mesmos,

00:31:37.730 --> 00:31:41.050
exceto que um tem o formulário, o outro tem apenas o Hello.

00:31:41.050 --> 00:31:43.310
Então agora vamos terminar isso em app.py.

00:31:43.310 --> 00:31:46.960
Deixe-me descer aqui depois de algumas linhas em branco estilisticamente,

00:31:46.960 --> 00:31:51.107
deixe-me fazer app.route, entre aspas, "/greet"--

00:31:51.107 --> 00:31:52.940
mas eu poderia chamar essa rota do que eu quiser.

00:31:52.940 --> 00:31:54.760
Estou apenas usando um verbo razoável.

00:31:54.760 --> 00:31:56.380
Então vamos definir outra função.

00:31:56.380 --> 00:31:58.930
Eu poderia chamar uma função do que eu quisesse, X, Y ou Z.

00:31:58.930 --> 00:32:01.120
Vou chamá-lo de saudação mais razoável.

00:32:01.120 --> 00:32:02.260
Sem argumentos.

00:32:02.260 --> 00:32:05.020
E agora é o código onde desejo renderizar o modelo.

00:32:05.020 --> 00:32:08.335
Então eu retorno, renderizo, modelo, cumprimento.

00:32:08.335 --> 00:32:09.760
HTML.

00:32:09.760 --> 00:32:13.390
Mas preciso fazer mais uma coisa.

00:32:13.390 --> 00:32:16.750
O que mais eu quero fazer se quiser que o greet.html tenha acesso

00:32:16.750 --> 00:32:18.760
ao nome do humano?

00:32:18.760 --> 00:32:21.250
Só para recapitular.

00:32:21.250 --> 00:32:23.500
Acho que já resolvemos isso, mas apaguei.

00:32:23.500 --> 00:32:26.930
Mas o que eu tenho que adicionar de volta?

00:32:26.930 --> 00:32:27.845
Sim.

00:32:27.845 --> 00:32:28.720
AUDIÊNCIA: [INAUDÍVEL]

00:32:28.720 --> 00:32:31.540
DAVID MALAN: Sim, então eu tenho que passar no espaço reservado de alguma forma.

00:32:31.540 --> 00:32:33.412
Então eu posso fazer isso de duas maneiras diferentes.

00:32:33.412 --> 00:32:35.620
Vou mantê-lo um pouco mais elegante desta vez.

00:32:35.620 --> 00:32:38.290
Eu só vou colocar meu nome--

00:32:38.290 --> 00:32:43.090
argumento-- aqui, e vou defini-lo igual a request.args.GET,

00:32:43.090 --> 00:32:45.670
aspas sem aspas, "nome", "mundo".

00:32:45.670 --> 00:32:48.715
Antes eu usava uma variável separada, mas só a usava em um lugar,

00:32:48.715 --> 00:32:50.090
então isso não é estritamente necessário.

00:32:50.090 --> 00:32:53.260
Isso também é bom, mas se ficar um pouco opressor,

00:32:53.260 --> 00:32:55.570
observe que eu posso alternativamente fazer isso.

00:32:55.570 --> 00:32:58.150
Eu posso criar uma variável real chamada name

00:32:58.150 --> 00:33:02.410
e então posso passar um argumento chamado nome

00:33:02.410 --> 00:33:04.630
com um valor que é essa variável.

00:33:04.630 --> 00:33:06.790
Mas, novamente, qual é realmente o ponto aqui?

00:33:06.790 --> 00:33:08.530
Era meio mais bonito tudo em uma linha.

00:33:08.530 --> 00:33:10.363
Então, essas são exatamente as mesmas coisas, estou apenas

00:33:10.363 --> 00:33:12.705
tentando apertar as coisas ainda mais aqui.

00:33:12.705 --> 00:33:14.080
Tudo bem, então o que acabou de acontecer?

00:33:14.080 --> 00:33:17.470
Se eu voltar ao meu formulário, ainda é index.html.

00:33:17.470 --> 00:33:19.390
Se eu recarregá-lo, nada mudou.

00:33:19.390 --> 00:33:21.830
Se eu digitar meu nome neste formulário--

00:33:21.830 --> 00:33:24.490
Observe novamente, a URL em que estou atualmente--

00:33:24.490 --> 00:33:27.550
isso é o Chrome escondendo coisas, é tecnicamente / por padrão,

00:33:27.550 --> 00:33:31.180
mesmo que muitos navegadores estejam apenas escondendo caracteres desnecessários

00:33:31.180 --> 00:33:31.870
nos dias de hoje.

00:33:31.870 --> 00:33:35.140
Mas observe o que acontece agora se eu rolar aqui

00:33:35.140 --> 00:33:38.870
e clico em cumprimentar neste novo formulário.

00:33:38.870 --> 00:33:39.580
Perceber?

00:33:39.580 --> 00:33:45.760
Minha URL, minha rota mudou para /greet ?name=David.

00:33:45.760 --> 00:33:49.118
E o corpo da página no canto superior esquerdo diz Olá, David.

00:33:49.118 --> 00:33:51.160
É exatamente assim que o google.com funciona e é

00:33:51.160 --> 00:33:53.560
como implementamos o HTML da última vez.

00:33:53.560 --> 00:33:58.360
Mas, em vez de enviar o formulário ao Google por meio do formulário,

00:33:58.360 --> 00:34:00.910
Estou enviando para mim mesmo, minha própria rota.

00:34:00.910 --> 00:34:05.570
Então, estou implementando meu próprio back-end para esse mesmo front-end.

00:34:05.570 --> 00:34:08.237
Tudo bem, alguma dúvida ainda?

00:34:08.237 --> 00:34:10.070
Muito menos interessante que o Google certamente,

00:34:10.070 --> 00:34:15.380
mas nós meio que temos toda a fiação agora.

00:34:15.380 --> 00:34:17.929
Alguma pergunta?

00:34:17.929 --> 00:34:19.429
Não?

00:34:19.429 --> 00:34:23.929
Tudo bem, então o que podemos fazer para apertar ainda mais este

00:34:23.929 --> 00:34:25.550
e aderir a algumas convenções?

00:34:25.550 --> 00:34:30.179
Bem, deixe-me propor que nesta versão resolvemos um problema.

00:34:30.179 --> 00:34:32.179
E mesmo que você nunca tenha feito esse tipo de coisa

00:34:32.179 --> 00:34:35.000
antes, ouso dizer que temos semanas suficientes de CS50 onde

00:34:35.000 --> 00:34:39.739
se eu mostrar index.html novamente e greet.HTML novamente,

00:34:39.739 --> 00:34:46.070
as probabilidades são para a mente de alguém que há uma oportunidade de melhoria.

00:34:46.070 --> 00:34:50.510
Por que esse aplicativo da web, embora super simples, é indiscutivelmente ruim

00:34:50.510 --> 00:34:53.929
projetado no momento?

00:34:53.929 --> 00:34:57.200
E a resposta está em algum lugar nestes dois modelos--

00:34:57.200 --> 00:34:59.750
index.html e greet.HTML.

00:34:59.750 --> 00:35:01.658
AUDIÊNCIA: [INAUDÍVEL]

00:35:01.658 --> 00:35:03.950
DAVID MALAN: Sim, eles são quase exatamente iguais, exceto

00:35:03.950 --> 00:35:05.390
para o conteúdo do corpo.

00:35:05.390 --> 00:35:07.640
E não era grande coisa, eram apenas duas páginas.

00:35:07.640 --> 00:35:09.380
Então, o que eu copio e colei isso uma vez?

00:35:09.380 --> 00:35:11.810
Mas imagine, agora, um site normal, ou até mesmo a sua casa

00:35:11.810 --> 00:35:14.690
páginas que tinham três, quatro ou mais páginas.

00:35:14.690 --> 00:35:16.760
Quero dizer, neste ponto, você está apenas copiando

00:35:16.760 --> 00:35:18.980
e colando tudo, honestamente, como você provavelmente

00:35:18.980 --> 00:35:21.240
fez necessariamente para sua página inicial.

00:35:21.240 --> 00:35:21.740
Por que?

00:35:21.740 --> 00:35:25.130
Porque quando você tem apenas HTML, talvez CSS e até JavaScript,

00:35:25.130 --> 00:35:28.070
isso é tudo que você pode fazer é copiar e colar, copiar e colar,

00:35:28.070 --> 00:35:30.530
e apenas certifique-se de ter a mesma estrutura.

00:35:30.530 --> 00:35:33.150
Talvez você tenha o mesmo arquivo CSS, o mesmo arquivo JavaScript,

00:35:33.150 --> 00:35:35.400
as mesmas bibliotecas de terceiros, mas torna muito,

00:35:35.400 --> 00:35:38.090
muito chato como você já deve ter percebido para apenas fazer

00:35:38.090 --> 00:35:40.050
uma mudança que afeta tudo.

00:35:40.050 --> 00:35:44.360
Então, não seria bom fatorar tudo isso e tudo isso

00:35:44.360 --> 00:35:46.290
e apenas deixar o corpo mudar?

00:35:46.290 --> 00:35:50.270
Aqui também está algo que o Flask e outros frameworks equivalentes

00:35:50.270 --> 00:35:51.390
vamos fazer.

00:35:51.390 --> 00:35:54.170
Permite-nos criar o que vamos chamar convencionalmente

00:35:54.170 --> 00:35:55.398
um layout em vez disso.

00:35:55.398 --> 00:35:56.940
Então eu vou seguir em frente e fazer isso.

00:35:56.940 --> 00:36:00.620
Vou copiar uma última vez todo o mesmo HTML.

00:36:00.620 --> 00:36:03.680
Vou entrar na janela do meu terminal e estou

00:36:03.680 --> 00:36:07.580
vamos criar por convenção um arquivo chamado layout.HTML.

00:36:07.580 --> 00:36:10.340
Isso realmente vai ser uma espécie de projeto.

00:36:10.340 --> 00:36:14.000
E em layout.HTML, vou colar todo o mesmo código,

00:36:14.000 --> 00:36:17.180
mas vou usar agora alguma sintaxe Jinja

00:36:17.180 --> 00:36:22.220
para indicar que não quero plug-in apenas uma variável como nome aqui,

00:36:22.220 --> 00:36:26.220
Eu quero realmente conectar o conteúdo de um outro arquivo inteiro.

00:36:26.220 --> 00:36:29.780
Então, em vez de apenas usar chaves, duas delas à esquerda e à direita,

00:36:29.780 --> 00:36:34.160
Eu tenho que usar uma sintaxe ligeiramente diferente para dizer que quero um bloco inteiro de HTML

00:36:34.160 --> 00:36:35.790
aqui de algum outro arquivo.

00:36:35.790 --> 00:36:39.830
E a maneira de fazer isso, mesmo que a sintaxe não seja um pouco óbvia, é você

00:36:39.830 --> 00:36:43.790
use chave aberta, sinal de porcentagem, bloco,

00:36:43.790 --> 00:36:46.310
então você pode chamar a próxima palavra do que quiser.

00:36:46.310 --> 00:36:49.670
Ele só precisa ser um tipo especial de espaço reservado para um arquivo real,

00:36:49.670 --> 00:36:51.480
não apenas para uma variável.

00:36:51.480 --> 00:36:54.000
Vou chamá-lo de corpo apenas porque estou no corpo.

00:36:54.000 --> 00:36:56.670
Portanto, quero que um espaço reservado seja o corpo inteiro.

00:36:56.670 --> 00:37:00.440
E então, fora disso, você diz em uma palavra, sem espaço -

00:37:00.440 --> 00:37:01.640
endblock.

00:37:01.640 --> 00:37:03.590
Então parece meio estúpido, honestamente.

00:37:03.590 --> 00:37:05.450
E por que temos uma sintaxe ainda mais feia?

00:37:05.450 --> 00:37:07.910
Novamente, apenas diferentes desenvolvedores de software no mundo

00:37:07.910 --> 00:37:10.340
estão todos escolhendo sua própria sintaxe para suas próprias bibliotecas.

00:37:10.340 --> 00:37:13.130
Então, todos eles parecem diferentes, mas são todos semelhantes em espírito.

00:37:13.130 --> 00:37:15.410
E você acaba se acostumando a ver a sintaxe diferente.

00:37:15.410 --> 00:37:20.870
Isso agora não é tão bonito quanto o par de chaves para variáveis,

00:37:20.870 --> 00:37:25.100
mas é assim que posso dizer para conectar o conteúdo de um arquivo inteiro aqui.

00:37:25.100 --> 00:37:27.290
E agora o que isso me permite fazer?

00:37:27.290 --> 00:37:33.500
Agora posso voltar ao meu arquivo index.html, que no momento

00:37:33.500 --> 00:37:36.740
ainda se parece com isso, mas quase tudo isso é copiar e colar.

00:37:36.740 --> 00:37:39.920
As únicas linhas que são interessantes e diferentes

00:37:39.920 --> 00:37:42.600
são essas quatro linhas aqui no corpo.

00:37:42.600 --> 00:37:45.600
Então, o que posso fazer agora é destacar isso e cortá-lo,

00:37:45.600 --> 00:37:47.558
e então vou destacar todo o resto

00:37:47.558 --> 00:37:49.160
e apenas exclua o arquivo inteiro.

00:37:49.160 --> 00:37:52.190
E vou usar parte dessa mesma sintaxe e dizer

00:37:52.190 --> 00:38:02.030
[? %extends"layout.html"% ?] E então fecho meu pensamento com um % e fecho

00:38:02.030 --> 00:38:03.090
chaveta.

00:38:03.090 --> 00:38:05.510
Portanto, esta sintaxe, como você pode estar inferindo

00:38:05.510 --> 00:38:10.760
agora está dizendo, por favor, estenda qualquer aparência de layout.HTML.

00:38:10.760 --> 00:38:13.250
Esse é o projeto original, o molde fora

00:38:13.250 --> 00:38:15.020
do qual eu quero fazer esta página da web.

00:38:15.020 --> 00:38:18.480
E agora aqui a sintaxe é um pouco estranha também, mas parecida,

00:38:18.480 --> 00:38:19.520
pelo menos de antes.

00:38:19.520 --> 00:38:21.260
Agora posso dizer o bloco--

00:38:21.260 --> 00:38:25.250
o bloco de corpo que eu quero que você conecte a esse layout

00:38:25.250 --> 00:38:31.040
vai ser tudo entre essas duas tags, que já vimos anteriormente.

00:38:31.040 --> 00:38:35.150
Mas em layout.HTML, eles estão dando um espaço reservado.

00:38:35.150 --> 00:38:39.830
Em index.html, é isso que vou inserir nos outros espaços reservados

00:38:39.830 --> 00:38:40.530
também.

00:38:40.530 --> 00:38:42.822
Então, vou me dar algum espaço em branco extra.

00:38:42.822 --> 00:38:45.070
Vou colar o HTML que estava lá.

00:38:45.070 --> 00:38:46.820
Se eu quiser deixar claro o que está acontecendo, eu

00:38:46.820 --> 00:38:49.490
pode indentá-lo, embora isso não tenha impacto funcional.

00:38:49.490 --> 00:38:53.060
Mas deixa claro que, assim como no HTML, você pode abrir uma tag Jinja

00:38:53.060 --> 00:38:53.930
e feche-o.

00:38:53.930 --> 00:38:57.740
Mas em Jinja aqui, temos isso aqui--

00:38:57.740 --> 00:39:00.420
ei Python, aqui vem o corpo desta página.

00:39:00.420 --> 00:39:03.170
Hey Python, é isso para o corpo desta página.

00:39:03.170 --> 00:39:08.630
E tudo isso deve ser conectado a este layout pai principal,

00:39:08.630 --> 00:39:09.510
Se você for.

00:39:09.510 --> 00:39:12.230
Tão super feio, admito, mas agora pelo menos

00:39:12.230 --> 00:39:14.210
as coisas ficam bem menos redundantes porque eu vou

00:39:14.210 --> 00:39:16.070
para fazer exatamente a mesma coisa aqui.

00:39:16.070 --> 00:39:18.710
Em greet.HTML, ele se parece com isso.

00:39:18.710 --> 00:39:25.580
Mas agora vou fazer isso-- extends, layout.HTML também, como antes.

00:39:25.580 --> 00:39:31.310
O body que eu quero plug-in vai ser tudo dentro dessas tags

00:39:31.310 --> 00:39:31.880
aqui.

00:39:31.880 --> 00:39:38.190
E este corpo será apenas Olá, nome entre chaves assim.

00:39:38.190 --> 00:39:40.910
Então, novamente, feia-- a sintaxe ficou muito feia rapidamente.

00:39:40.910 --> 00:39:43.437
Mas é realmente apenas seguir esses padrões agora.

00:39:43.437 --> 00:39:45.020
E temos dois tipos de espaços reservados.

00:39:45.020 --> 00:39:48.830
Duas chaves para variáveis, e agora este tipo

00:39:48.830 --> 00:39:51.500
de sintaxe com os sinais de porcentagem e o único encaracolado

00:39:51.500 --> 00:39:54.650
chaves para o conteúdo dos arquivos reais.

00:39:54.650 --> 00:39:58.400
E agora neste mundo-- ou no mundo de uma página inicial,

00:39:58.400 --> 00:40:01.310
se você estivesse usando Flask e Python para fazer sua casa pessoal

00:40:01.310 --> 00:40:04.100
página com todas essas várias páginas, você provavelmente

00:40:04.100 --> 00:40:08.030
crie um layout principal com todos os seus belos logotipos, cores e fontes

00:40:08.030 --> 00:40:09.920
e como você deseja que o site seja.

00:40:09.920 --> 00:40:12.290
E então cada uma de suas páginas menores agora

00:40:12.290 --> 00:40:15.260
ser destilado apenas nesses fragmentos menores.

00:40:15.260 --> 00:40:19.490
E seja usando Python, Java, JavaScript ou outras linguagens também,

00:40:19.490 --> 00:40:22.340
todas as diferentes linguagens de programação têm estruturas populares

00:40:22.340 --> 00:40:23.570
que fazem coisas assim.

00:40:23.570 --> 00:40:26.735
A ideia é a mesma em todos eles.

00:40:26.735 --> 00:40:28.110
Tudo bem, vamos ver se funciona.

00:40:28.110 --> 00:40:29.700
Vamos voltar para o navegador.

00:40:29.700 --> 00:40:32.780
Deixe-me voltar ao meu /route.

00:40:32.780 --> 00:40:34.160
Existe esse mesmo formulário.

00:40:34.160 --> 00:40:37.310
Deixe-me digitar David e digitar-- e clicar em cumprimentar.

00:40:37.310 --> 00:40:41.870
E, de fato, vejo Olá, David, vejo que cumprimentar foi automaticamente

00:40:41.870 --> 00:40:44.690
adicionado ao URL pelo navegador quando enviei o formulário, seguido

00:40:44.690 --> 00:40:46.080
pelos pares chave-valor.

00:40:46.080 --> 00:40:48.870
E se eu visualizar a fonte da página como fiz anteriormente,

00:40:48.870 --> 00:40:51.770
você verá que tem todo esse layout

00:40:51.770 --> 00:40:54.030
com Olá, David conectado.

00:40:54.030 --> 00:40:58.380
Enquanto isso, se eu voltar ao formulário e visualizar o código-fonte desta página,

00:40:58.380 --> 00:41:02.370
você verá exatamente o mesmo layout, mas com a tag de formulário conectada.

00:41:02.370 --> 00:41:06.320
E é aqui que você pode ser um pouco menos meticuloso com o estilo.

00:41:06.320 --> 00:41:09.170
OK, sim, isso não é tecnicamente recuado dentro do corpo.

00:41:09.170 --> 00:41:11.190
Mas era relativo ao arquivo original.

00:41:11.190 --> 00:41:13.130
Então, neste ponto do jogo, você não precisa

00:41:13.130 --> 00:41:16.190
se preocupar com a aparência super bonita do HTML gerado.

00:41:16.190 --> 00:41:18.320
Você quer seu código-fonte que os humanos

00:41:18.320 --> 00:41:20.430
veja ser bonito, não o navegador.

00:41:20.430 --> 00:41:23.000
Esta não é uma preocupação estilística.

00:41:23.000 --> 00:41:29.130
OK, perguntas sobre esses recursos, então um Flask?

00:41:29.130 --> 00:41:31.830
Ou problemas que acabamos de resolver e por quê?

00:41:31.830 --> 00:41:32.859
Sim.

00:41:32.859 --> 00:41:37.573
AUDIÊNCIA: [INAUDÍVEL]

00:41:37.573 --> 00:41:38.240
DAVID MALAN: OK.

00:41:38.240 --> 00:41:41.420
Portanto, se os arquivos em questão estiverem em pastas diferentes...

00:41:41.420 --> 00:41:48.080
Por exemplo, se eu voltar para minha página de índice, que tem o formulário,

00:41:48.080 --> 00:41:53.330
as raízes aqui dependem inteiramente do que está em app.py.

00:41:53.330 --> 00:41:57.500
Não há noção de pasta quando se trata de implementar um web

00:41:57.500 --> 00:41:58.650
aplicação mais.

00:41:58.650 --> 00:42:00.140
São rotas mais genericamente.

00:42:00.140 --> 00:42:02.480
No entanto, e ainda não o fizemos, você

00:42:02.480 --> 00:42:05.780
pode colocar seu conteúdo estático-- suas imagens, seus arquivos de vídeo,

00:42:05.780 --> 00:42:07.880
seus arquivos CSS-- em uma pasta chamada static,

00:42:07.880 --> 00:42:09.870
e pode haver subpastas em que eles estão.

00:42:09.870 --> 00:42:14.060
E isso afetaria o que você usa como atributos de origem para imagens,

00:42:14.060 --> 00:42:18.890
ou suas tags de origem para vídeo ou qualquer um desses tipos de recursos.

00:42:18.890 --> 00:42:22.730
E veremos isso eventualmente em casa - no problema a seguir.

00:42:22.730 --> 00:42:24.900
Outras perguntas sobre o que acabamos de fazer aqui?

00:42:24.900 --> 00:42:25.400
Sim.

00:42:25.400 --> 00:42:27.170
AUDIÊNCIA: [INAUDÍVEL]

00:42:27.170 --> 00:42:28.920
DAVID MALAN: Boa pergunta, como eu... como

00:42:28.920 --> 00:42:31.770
assegurei-me de que o aplicativo da web iniciasse no formulário

00:42:31.770 --> 00:42:34.230
e depois vai para a página Olá?

00:42:34.230 --> 00:42:38.370
Então, o que quer que você decida, sua rota de índice padrão

00:42:38.370 --> 00:42:41.010
é, como a barra implícita, é isso que

00:42:41.010 --> 00:42:44.520
será puxado para cima quando um usuário visitar o nome de domínio onde

00:42:44.520 --> 00:42:45.880
seu site está hospedado.

00:42:45.880 --> 00:42:51.750
Então, se eu voltar aqui para app.py, porque meu /route foi projetado para retornar

00:42:51.750 --> 00:42:56.460
index.html, é exatamente por isso que essa resposta voltou.

00:42:56.460 --> 00:42:57.720
Boa pergunta.

00:42:57.720 --> 00:43:00.797
Tudo bem, além disso, vamos considerar, agora, questões de privacidade.

00:43:00.797 --> 00:43:03.630
E vamos tocar nisso também, quando chegarmos a questões como carrinhos de compras

00:43:03.630 --> 00:43:06.610
e cookies, se eu ampliar o URL aqui -

00:43:06.610 --> 00:43:09.870
mesmo que o próprio URL seja um pouco longo, feio e enigmático--

00:43:09.870 --> 00:43:13.500
mas quando digito meu nome e clico em saudar,

00:43:13.500 --> 00:43:18.060
é claro que continuamos vendo name=David na URL.

00:43:18.060 --> 00:43:22.010
Em que sentido isso pode ser um design ruim?

00:43:22.010 --> 00:43:26.390
Ou em que tipos de aplicativos da Web você não deseja que o nome

00:43:26.390 --> 00:43:28.010
para aparecer no URL assim?

00:43:28.010 --> 00:43:31.920
Porque é isso que o Google faz e é isso que meu aplicativo faz.

00:43:31.920 --> 00:43:32.420
Sim.

00:43:32.420 --> 00:43:33.360
AUDIÊNCIA: [INAUDÍVEL]

00:43:33.360 --> 00:43:34.110
DAVID MALAN: Sim.

00:43:34.110 --> 00:43:36.540
Então, se eu estiver logando com um nome de usuário e senha,

00:43:36.540 --> 00:43:40.710
Eu poderia imaginar que eles aparecem no URL após o ponto de interrogação onde

00:43:40.710 --> 00:43:47.490
nome de usuário = malan e senha = 12345, mas todos os meus irmãos intrometidos precisam fazer

00:43:47.490 --> 00:43:49.440
é passar pelo histórico do meu navegador e bum,

00:43:49.440 --> 00:43:51.630
está ali para eles copiarem e colarem.

00:43:51.630 --> 00:43:54.000
Portanto, isso não parece particularmente seguro.

00:43:54.000 --> 00:43:57.840
Ou se alguém estiver passando por você em um café, eles podem apenas olhar para o seu URL

00:43:57.840 --> 00:44:00.300
se for revelado pelo navegador e eles também o virem.

00:44:00.300 --> 00:44:03.540
Portanto, GET não é necessariamente o melhor verbo a ser usado

00:44:03.540 --> 00:44:05.880
mesmo que seja o padrão ao enviar formulários.

00:44:05.880 --> 00:44:09.630
Normalmente, quando você tem algo remotamente sensível, ou algo grande--

00:44:09.630 --> 00:44:14.040
seja uma senha, ou número de cartão de crédito, ou uma imagem ou um vídeo

00:44:14.040 --> 00:44:17.130
que você está enviando para o Instagram ou para o YouTube,

00:44:17.130 --> 00:44:21.720
ou qualquer site como esse-- você não quer que os dados entrem no URL.

00:44:21.720 --> 00:44:25.260
E, felizmente, existe uma maneira fácil de corrigir isso.

00:44:25.260 --> 00:44:29.220
posso entrar no meu formulário, que atualmente é um index.html,

00:44:29.220 --> 00:44:32.820
e posso apenas alterar o método de GET para postar.

00:44:32.820 --> 00:44:36.960
Aqui em minúsculas, mas o verbo no envelope virtual que discutimos na semana passada

00:44:36.960 --> 00:44:39.660
seria em si capital Post.

00:44:39.660 --> 00:44:43.330
Agora, infelizmente, observe o que acontece aqui.

00:44:43.330 --> 00:44:48.240
Deixe-me voltar ao meu formulário original voltando para /route--

00:44:48.240 --> 00:44:51.870
e estou recarregando a página para ter certeza de obter o HTML mais recente e atualizado.

00:44:51.870 --> 00:44:55.200
E só para confirmar aqui--

00:44:55.200 --> 00:44:58.380
sim, se eu visualizar a fonte, o método agora é POST.

00:44:58.380 --> 00:45:01.410
Então deixe-me ir em frente e digitar David agora e clicar em cumprimentar.

00:45:01.410 --> 00:45:03.210
E antes de vermos Hello, David.

00:45:03.210 --> 00:45:05.680
Mas agora recebo o método não permitido.

00:45:05.680 --> 00:45:09.510
E isso é um pouco sutil, mas no título da guia, observe

00:45:09.510 --> 00:45:12.720
que é um erro 405, que não é familiar, provavelmente.

00:45:12.720 --> 00:45:15.450
Quase todos nós já vimos o arquivo 404 não encontrado.

00:45:15.450 --> 00:45:19.530
Acontece que 405, um pouco mais misterioso, é o método.

00:45:19.530 --> 00:45:21.490
O verbo HTTP não é permitido.

00:45:21.490 --> 00:45:21.990
Por que?

00:45:21.990 --> 00:45:27.210
Porque, por padrão, meu app.py suporta apenas GET por padrão.

00:45:27.210 --> 00:45:28.910
Como posso apoiar o POST?

00:45:28.910 --> 00:45:30.900
Só preciso de um pouco mais de sintaxe.

00:45:30.900 --> 00:45:33.520
Então, deixe-me voltar ao VS Code aqui.

00:45:33.520 --> 00:45:35.460
Deixe-me entrar em app.py agora.

00:45:35.460 --> 00:45:39.150
E depois de alterar o formulário, só preciso informar Flask

00:45:39.150 --> 00:45:42.690
qual é o método que eu quero que esta ótima rota use

00:45:42.690 --> 00:45:47.010
não deve ser o padrão, que é apenas GET, quero que use esses métodos.

00:45:47.010 --> 00:45:51.210
E leva um segundo argumento chamado métodos, cujo valor

00:45:51.210 --> 00:45:54.360
é uma lista cujo padrão é, entre aspas, "GET".

00:45:54.360 --> 00:45:57.100
Então esse é o padrão. Isso não fez nenhuma alteração.

00:45:57.100 --> 00:46:00.090
Mas se eu quiser oferecer suporte ao POST, posso explicitamente

00:46:00.090 --> 00:46:03.120
passar uma lista com uma string nela--

00:46:03.120 --> 00:46:05.200
POST em vez disso.

00:46:05.200 --> 00:46:06.640
E agora o que isso significa?

00:46:06.640 --> 00:46:08.850
Não falamos sobre isso em detalhes na semana passada,

00:46:08.850 --> 00:46:11.550
mas dentro deste envelope virtual, normalmente,

00:46:11.550 --> 00:46:17.700
é aquela linha como GET/search, queue=cats após o ponto de interrogação.

00:46:17.700 --> 00:46:20.495
Se você deseja ocultar esse tipo de informação por questões de privacidade,

00:46:20.495 --> 00:46:23.370
ou porque você deseja enviar uma imagem, o que simplesmente não faz sentido

00:46:23.370 --> 00:46:26.430
para colocar no URL, essencialmente a parte da história seria,

00:46:26.430 --> 00:46:29.850
bem, o computador olha mais fundo dentro desse envelope virtual.

00:46:29.850 --> 00:46:34.050
E qualquer coisa enviada por um POST vai abaixo dos cabeçalhos HTTP,

00:46:34.050 --> 00:46:35.490
como mais fundo naquele envelope.

00:46:35.490 --> 00:46:36.550
Então eles ainda estão lá.

00:46:36.550 --> 00:46:41.500
Eles simplesmente não são obviamente visíveis para olhares indiscretos no próprio navegador do usuário.

00:46:41.500 --> 00:46:44.730
Então, apenas fazendo essa alteração no HTML,

00:46:44.730 --> 00:46:47.640
dizendo ao navegador para enviar os dados via POST,

00:46:47.640 --> 00:46:52.110
e alterando app.py para informar a rota para esperar os dados via POST,

00:46:52.110 --> 00:46:54.840
Agora posso voltar para minha outra guia.

00:46:54.840 --> 00:46:56.520
Deixe-me voltar à página original.

00:46:56.520 --> 00:46:59.460
Deixe-me recarregar apenas para obter o HTML mais recente.

00:46:59.460 --> 00:47:01.680
E, de fato, veja a fonte da página, ainda é--

00:47:01.680 --> 00:47:03.150
sim, ainda é POST.

00:47:03.150 --> 00:47:08.010
Mas agora, quando digito DAVID e clico em saudar, funciona.

00:47:08.010 --> 00:47:12.240
Mas, mas, mas, observe a implicação de privacidade--

00:47:12.240 --> 00:47:15.510
Estou na rota de boas-vindas, mas onde está meu nome?

00:47:15.510 --> 00:47:17.160
Na verdade não está lá.

00:47:17.160 --> 00:47:19.140
Ele ainda foi para o servidor, mas não é

00:47:19.140 --> 00:47:22.200
em seu preenchimento automático ou em seu histórico agora por questões de privacidade.

00:47:22.200 --> 00:47:26.630
Dúvidas agora no POST?

00:47:26.630 --> 00:47:27.210
Sim.

00:47:27.210 --> 00:47:27.710
Não?

00:47:27.710 --> 00:47:28.850
Apenas coçando.

00:47:28.850 --> 00:47:31.920
Tudo bem, você, o programador, pode ver isso?

00:47:31.920 --> 00:47:35.030
Bem, deixe-me mostrar alguns outros recursos do Chrome--

00:47:35.030 --> 00:47:38.040
Chrome, Safari e outros navegadores também.

00:47:38.040 --> 00:47:40.190
Continuo visualizando a origem da página, que mostra apenas

00:47:40.190 --> 00:47:42.290
você uma versão somente leitura do seu HTML.

00:47:42.290 --> 00:47:46.280
Mas lembre-se que da última vez, eu realmente cliquei com o botão direito e fui inspecionar,

00:47:46.280 --> 00:47:47.690
ou visualizou ferramentas de desenvolvedor.

00:47:47.690 --> 00:47:51.200
E isso traz uma versão muito mais sofisticada das ferramentas do desenvolvedor.

00:47:51.200 --> 00:47:53.150
E abaixo dos elementos aqui, você vê tudo.

00:47:53.150 --> 00:47:55.400
E é bonito e bem impresso, é hierárquico, ,

00:47:55.400 --> 00:47:58.490
ele recolhe as coisas nesses triângulos clicáveis, mas é exatamente o mesmo

00:47:58.490 --> 00:47:58.990
coisa.

00:47:58.990 --> 00:48:00.440
É apenas mais interativo.

00:48:00.440 --> 00:48:02.700
Mas observe o que posso fazer hoje é isso--

00:48:02.700 --> 00:48:06.630
Se eu for para a guia Rede aqui e me deixar diminuir um pouco o zoom,

00:48:06.630 --> 00:48:12.890
Deixe-me ir em frente e carregar novamente o formulário aqui e digitar David

00:48:12.890 --> 00:48:15.170
novamente e clique em cumprimentar.

00:48:15.170 --> 00:48:20.420
Observe agora na guia Rede das ferramentas de desenvolvedor do Chrome,

00:48:20.420 --> 00:48:22.770
Eu vejo algumas coisas como vimos antes.

00:48:22.770 --> 00:48:25.460
Primeiro, vejo que o método de solicitação é POST.

00:48:25.460 --> 00:48:27.620
Dois, vejo que o servidor automaticamente,

00:48:27.620 --> 00:48:31.100
sem que eu escreva nenhum código para isso, retorna 200 quando é bem-sucedido.

00:48:31.100 --> 00:48:34.010
Mas eu posso rolar para baixo, para baixo, para baixo, para baixo, para baixo,

00:48:34.010 --> 00:48:39.500
e você verá que, eventualmente, depois de todos esses cookies-- mais sobre eles depois.

00:48:39.500 --> 00:48:42.770
Se eu clicar em payload, a segunda guia ao lado dos cabeçalhos,

00:48:42.770 --> 00:48:46.903
você pode ver como desenvolvedor o que foi realmente enviado ao servidor.

00:48:46.903 --> 00:48:47.570
Então, de fato, isso.

00:48:47.570 --> 00:48:49.550
Vai ser super útil como ao fazer o problema

00:48:49.550 --> 00:48:51.380
definir nove, talvez seus projetos finais, se você

00:48:51.380 --> 00:48:53.960
deseja ver o que está acontecendo do navegador para o servidor,

00:48:53.960 --> 00:48:57.480
você tem controle total sobre todas essas informações.

00:48:57.480 --> 00:49:00.090
Mesmo se você estiver usando HTTPS, porque seu navegador e você,

00:49:00.090 --> 00:49:02.700
o desenvolvedor certamente pode ver tudo isso.

00:49:02.700 --> 00:49:04.880
Então, novamente, essas ferramentas de desenvolvedor, embora haja

00:49:04.880 --> 00:49:07.610
muitas guias e botões que você provavelmente não precisará tão cedo,

00:49:07.610 --> 00:49:11.720
alguns deles como elementos e rede e com console JavaScript

00:49:11.720 --> 00:49:16.430
serão super úteis para começar a se familiarizar.

00:49:16.430 --> 00:49:24.980
Tudo bem, alguma dúvida agora sobre essa implicação do POST?

00:49:24.980 --> 00:49:28.170
Nada mesmo?

00:49:28.170 --> 00:49:28.950
Não?

00:49:28.950 --> 00:49:32.850
OK, que tal um exemplo final do Hello que vincule algumas dessas coisas

00:49:32.850 --> 00:49:33.760
junto.

00:49:33.760 --> 00:49:38.130
Que tal agora tentarmos apertar ainda mais as coisas apenas em antecipação

00:49:38.130 --> 00:49:41.040
de algo como o conjunto de problemas 9, ou realmente mais complicado

00:49:41.040 --> 00:49:44.880
aplicativos da web onde você pode ter não dois, mas 20

00:49:44.880 --> 00:49:47.010
ou talvez rotas ainda mais diferentes.

00:49:47.010 --> 00:49:51.100
Pode ser ideal apenas minimizar quantas rotas totais temos.

00:49:51.100 --> 00:49:52.860
Então não ficamos um pouco sobrecarregados.

00:49:52.860 --> 00:49:56.250
E ouso dizer que esses dois caminhos são tão curtos,

00:49:56.250 --> 00:49:58.650
talvez eu possa combiná-los em um.

00:49:58.650 --> 00:50:01.980
E talvez eu possa manter o usuário no que parece ser o mesmo URL,

00:50:01.980 --> 00:50:03.810
mas apenas para arrumar as coisas.

00:50:03.810 --> 00:50:06.390
Então, deixe-me propor que façamos isso.

00:50:06.390 --> 00:50:13.670
Deixe-me me livrar da minha rota de saudação e entrar no meu formulário em index.html

00:50:13.670 --> 00:50:18.560
e deixe-me seguir em frente e fazer com que a ação desta forma ainda seja barra.

00:50:18.560 --> 00:50:22.350
Quero que o formulário fique visível na barra, o índice do site.

00:50:22.350 --> 00:50:25.340
Mas também quero que o formulário seja submetido a si mesmo

00:50:25.340 --> 00:50:28.940
apenas porque não quero introduzir outra rota como cumprimentar

00:50:28.940 --> 00:50:31.020
que eventualmente, de fato, será convincente

00:50:31.020 --> 00:50:34.130
para que você não tenha uma raiz para tudo o que deseja que seu site faça.

00:50:34.130 --> 00:50:37.400
Então, tecnicamente, esse também é o padrão e, se eu omitir a ação

00:50:37.400 --> 00:50:39.150
exatamente a mesma coisa aconteceria também.

00:50:39.150 --> 00:50:42.020
Mas deixe-me retroceder e entrar em app.py

00:50:42.020 --> 00:50:43.800
para ver como podemos fazer isso acontecer.

00:50:43.800 --> 00:50:47.720
Bem, se eu quiser que minha única rota suporte ambos os métodos,

00:50:47.720 --> 00:50:53.030
Posso dizer métodos= e, em seguida, uma lista com GET e POST em qualquer ordem

00:50:53.030 --> 00:50:55.280
mas vou mantê-los em ordem alfabética assim.

00:50:55.280 --> 00:51:00.200
Agora diga ao Python ei, esta rota deve lidar com GET e POST

00:51:00.200 --> 00:51:02.340
pedidos no mesmo local.

00:51:02.340 --> 00:51:04.520
Vamos agora entrar nesta função.

00:51:04.520 --> 00:51:07.400
Eu meio que quero dizer o equivalente a isso--

00:51:07.400 --> 00:51:11.180
se GET, então eu quero retornar o formulário.

00:51:11.180 --> 00:51:15.230
Caso contrário, se for POST, quero retornar o modelo de renderização

00:51:15.230 --> 00:51:18.860
de greet.HTML com o nome do usuário.

00:51:18.860 --> 00:51:22.260
Mas este ainda não é um código completo, mas acho que posso fazer isso.

00:51:22.260 --> 00:51:24.300
Vou seguir em frente e salvar o seguinte.

00:51:24.300 --> 00:51:30.850
Vou seguir em frente e dizer se request.method = = GET,

00:51:30.850 --> 00:51:33.710
então, de fato, retorne index.html.

00:51:33.710 --> 00:51:40.610
L se request.method = = POST, vá em frente e retorne greet.HTML.

00:51:40.610 --> 00:51:44.120
Isso não é suficiente, porque ainda quero passar nesse espaço reservado.

00:51:44.120 --> 00:51:50.120
Deixe-me adicionar novamente name=request.args.GET, entre aspas,

00:51:50.120 --> 00:51:53.510
"nome" e, em seguida, um valor padrão de mundo.

00:51:53.510 --> 00:51:55.910
O que isso faz agora por mim?

00:51:55.910 --> 00:51:58.730
Bem, deixe-me voltar para minha outra guia aqui.

00:51:58.730 --> 00:52:01.280
Deixe-me fechar as ferramentas do desenvolvedor, deixe-me voltar ao formulário

00:52:01.280 --> 00:52:03.320
aqui, deixe-me recarregar para ter certeza de que tenho o mais recente.

00:52:03.320 --> 00:52:06.237
Deixe-me ver a fonte da página apenas para ter certeza de que tenho o mais recente - e sim,

00:52:06.237 --> 00:52:08.180
Eu tenho o mais recente porque ainda diz POST.

00:52:08.180 --> 00:52:09.810
Mas agora diz barra.

00:52:09.810 --> 00:52:11.300
E vamos ver o que acontece agora.

00:52:11.300 --> 00:52:14.930
Se eu digitar meu nome David, previamente enviado via POST,

00:52:14.930 --> 00:52:17.810
então não vi nenhum nome ou valor no URL,

00:52:17.810 --> 00:52:19.520
mas acabei em /greet.

00:52:19.520 --> 00:52:22.280
Mas se a ação agora for barra, eu clico em cumprimentar,

00:52:22.280 --> 00:52:25.160
observe que ainda meio que funciona.

00:52:25.160 --> 00:52:27.695
Vejo Hello, world, embora isso não tenha funcionado muito bem.

00:52:27.695 --> 00:52:29.570
Então, voltaremos a esse assunto em um momento.

00:52:29.570 --> 00:52:31.903
Mas observe que a URL termina apenas com uma barra.

00:52:31.903 --> 00:52:34.820
E, novamente, o Chrome está escondendo a barra porque é tudo o que está lá,

00:52:34.820 --> 00:52:41.060
mas não termina em name=David neste caso, ou name=world.

00:52:41.060 --> 00:52:42.500
Agora observe isso também--

00:52:42.500 --> 00:52:45.260
se eu recarregar vou receber este aviso.

00:52:45.260 --> 00:52:47.537
Deseja confirmar o reenvio do formulário?

00:52:47.537 --> 00:52:50.120
A página que você está procurando usou as informações que você inseriu.

00:52:50.120 --> 00:52:52.760
Retornar a essa página pode fazer com que qualquer ação realizada seja repetida.

00:52:52.760 --> 00:52:53.760
Você quer continuar?

00:52:53.760 --> 00:52:56.060
Você pode ter visto isso em sites que você realmente visitou,

00:52:56.060 --> 00:52:58.520
onde você pressiona recarregar e você é solicitado-- espere um minuto,

00:52:58.520 --> 00:52:59.478
você quer fazer isso?

00:52:59.478 --> 00:53:02.720
É provável que você tenha sido solicitado a recarregar explicitamente por quê?

00:53:02.720 --> 00:53:06.500
Tudo o que você acabou de fazer foi POST em vez de GET.

00:53:06.500 --> 00:53:09.410
E por convenção, além do POST ser usado para privacidade

00:53:09.410 --> 00:53:12.950
para ocultar seu nome de usuário, senha, número do cartão de crédito ou algo semelhante.

00:53:12.950 --> 00:53:16.340
Além de ser usado para fazer upload de arquivos maiores como imagens ou vídeos,

00:53:16.340 --> 00:53:20.570
O POST também é usado por convenção para fazer alterações no servidor,

00:53:20.570 --> 00:53:24.300
adicionar algo ao seu carrinho de compras, adicionar algo ao banco de dados.

00:53:24.300 --> 00:53:26.270
Considerando que GET, como o nome sugere, é tudo

00:53:26.270 --> 00:53:30.810
sobre obter informações, não postar ou enviar informações.

00:53:30.810 --> 00:53:34.547
Portanto, este é o Chrome sendo um pouco cuidadoso, porque se você acabou de verificar

00:53:34.547 --> 00:53:36.380
na Amazon e então você clica em recarregar, você não

00:53:36.380 --> 00:53:39.710
quer comprar acidentalmente o mesmo livro novamente, por assim dizer,

00:53:39.710 --> 00:53:42.500
mesmo que a Amazon e sites sofisticados tenham outras defesas

00:53:42.500 --> 00:53:44.660
para isso também para evitar esse problema.

00:53:44.660 --> 00:53:47.120
Agora há um bug, porém, aqui.

00:53:47.120 --> 00:53:50.630
Ele diz Olá, mundo em vez de Olá, David, e

00:53:50.630 --> 00:53:52.700
na verdade teria dito o mesmo um momento atrás

00:53:52.700 --> 00:53:56.030
e eu simplesmente não testei novamente o código e revelei tanto para você.

00:53:56.030 --> 00:53:59.720
Ou, se o fiz, nem percebi que dizia Olá, mundo em vez de Olá, David.

00:53:59.720 --> 00:54:05.390
Acontece que request.args é usado apenas para GET.

00:54:05.390 --> 00:54:08.420
Ao usar GET, request.args é um dicionário que

00:54:08.420 --> 00:54:10.200
contém todos os seus pares de valores-chave.

00:54:10.200 --> 00:54:13.790
Mas um tanto confuso, ao usar POST com Flask,

00:54:13.790 --> 00:54:15.830
você tem que entrar em request.form.

00:54:15.830 --> 00:54:20.540
Não tenho ideia de por que esses não são opostos mais óbvios, como request.GET,

00:54:20.540 --> 00:54:22.520
request.form, e--

00:54:22.520 --> 00:54:26.300
desculpe, request.GET e request.POST seriam nomes sensatos.

00:54:26.300 --> 00:54:29.480
Neste caso, porém, temos request.args para GET,

00:54:29.480 --> 00:54:31.868
e request.form para POST.

00:54:31.868 --> 00:54:33.410
Tudo bem, essa é uma solução fácil.

00:54:33.410 --> 00:54:38.460
Se eu voltar ao VS Code aqui, vamos alterar request.args para request.form.

00:54:38.460 --> 00:54:40.280
Vamos voltar para minha outra guia.

00:54:40.280 --> 00:54:42.050
Deixe-me apenas recarregar, e quer saber?

00:54:42.050 --> 00:54:45.290
Eu vou dizer, OK, continue a reenviar o mesmo formulário

00:54:45.290 --> 00:54:48.530
porque o formulário estava OK, era meu código Python que estava com erros.

00:54:48.530 --> 00:54:51.950
Pressionando Enter agora-- está acessando David OK.

00:54:51.950 --> 00:54:55.550
Mas observe isto-- novamente se eu clicar em recarregar, Command R ou Control R,

00:54:55.550 --> 00:54:56.752
Recebo o mesmo Aviso.

00:54:56.752 --> 00:54:58.460
Tem certeza que deseja enviar o formulário?

00:54:58.460 --> 00:54:58.960
Sim.

00:54:58.960 --> 00:55:02.880
Se eu fizer isso manualmente com o ícone de recarga, recebo o mesmo aviso de antes.

00:55:02.880 --> 00:55:06.470
Mas se eu quiser induzir manualmente uma solicitação GET, tudo bem.

00:55:06.470 --> 00:55:08.860
Não clique em recarregar e enviar a mesma solicitação.

00:55:08.860 --> 00:55:13.750
Em vez disso, vá até o seu URL e coloque o cursor lá em cima e pressione Enter.

00:55:13.750 --> 00:55:17.270
E agora observe, o mesmo URL é um GET por padrão.

00:55:17.270 --> 00:55:19.960
Sempre que você e eu digitamos URLs em navegadores,

00:55:19.960 --> 00:55:23.650
GET é sempre o padrão. Somente quando você clica em um botão,

00:55:23.650 --> 00:55:26.050
normalmente, que o programador configurou

00:55:26.050 --> 00:55:29.930
para usar o POST, você está realmente adicionando coisas ao seu carrinho de compras,

00:55:29.930 --> 00:55:30.890
ou semelhante.

00:55:30.890 --> 00:55:33.710
Tudo bem, então estamos de volta.

00:55:33.710 --> 00:55:38.260
E se eu voltar no tempo, como se isso fosse realmente

00:55:38.260 --> 00:55:44.920
o primeiro aplicativo da web que criei em 1997, acredito.

00:55:44.920 --> 00:55:48.790
Então, na época, isso teria sido, o que, meu segundo ano ou mais.

00:55:48.790 --> 00:55:50.980
Eu tinha feito CS50, fiz uma aula de acompanhamento

00:55:50.980 --> 00:55:53.510
chamado CS51, que é um tipo diferente de programação.

00:55:53.510 --> 00:55:56.470
E então eu praticamente aprendi sozinho uma linguagem chamada Perl, que

00:55:56.470 --> 00:55:58.210
é um pouco menos popular hoje em dia.

00:55:58.210 --> 00:56:01.540
Mas é outra linguagem como Python, como Java, como JavaScript,

00:56:01.540 --> 00:56:04.210
como outros que podem ser usados ​​para fazer aplicativos baseados na web.

00:56:04.210 --> 00:56:08.410
E a web era muito jovem na época e o processo pelo qual

00:56:08.410 --> 00:56:11.710
alunos, meus colegas, poderiam se inscrever para o primeiro ano intramural

00:56:11.710 --> 00:56:13.120
programa de esportes - também conhecido como

00:56:13.120 --> 00:56:17.260
frosh IMs era pegar um pedaço de papel e escrever seu nome e e-mail

00:56:17.260 --> 00:56:21.000
abordá-lo e atravessá-lo pelo pátio até Wigglesworth, creio eu,

00:56:21.000 --> 00:56:22.000
onde o Proctor morava.

00:56:22.000 --> 00:56:24.083
E você deslizaria o pedaço de papel por baixo da porta,

00:56:24.083 --> 00:56:26.780
e era assim que apresentávamos formulários na minha época.

00:56:26.780 --> 00:56:31.600
Portanto, esta foi uma oportunidade, mesmo em 1997, para mover as coisas online.

00:56:31.600 --> 00:56:34.690
E o site continuou vivo até acho que 2007.

00:56:34.690 --> 00:56:38.470
Eu encontrei isso online e então se tornou outra coisa desde então.

00:56:38.470 --> 00:56:41.440
Mas este era um site através do qual as pessoas podiam se inscrever para esportes,

00:56:41.440 --> 00:56:44.480
e as pessoas podiam registrar as pontuações de vários jogos e outros enfeites.

00:56:44.480 --> 00:56:46.350
E assim, por baixo do capô, eu nem sequer

00:56:46.350 --> 00:56:48.100
sabe alguma coisa sobre bancos de dados na época,

00:56:48.100 --> 00:56:51.760
eram apenas arquivos CSV nos quais eu estava armazenando os dados.

00:56:51.760 --> 00:56:53.590
Mas havia formulários HTML.

00:56:53.590 --> 00:56:56.350
E havia com o Perl, a linguagem da época, o jeito

00:56:56.350 --> 00:57:00.340
para fazer exatamente o tipo de coisa que acabamos de fazer com o Flask.

00:57:00.340 --> 00:57:04.780
E então o que eu pensei que faríamos é implementar uma versão um pouco menos feia

00:57:04.780 --> 00:57:05.950
disto.

00:57:05.950 --> 00:57:11.620
Fundos gráficos repetitivos estiveram na Vogue em 1997, como você pode ver aqui.

00:57:11.620 --> 00:57:16.190
Mas essa era a estética da época, incluindo a chamada tag Blink.

00:57:16.190 --> 00:57:18.775
Então, vamos pelo menos focar na funcionalidade deste site

00:57:18.775 --> 00:57:20.650
e não tanto a estética, e ver se

00:57:20.650 --> 00:57:23.830
pode implementar alguns dos encanamentos para realmente resolver um mundo real

00:57:23.830 --> 00:57:24.865
problema representativo.

00:57:24.865 --> 00:57:27.490
Seja para esportes internos de calouros, ou algo parecido

00:57:27.490 --> 00:57:30.520
onde você está obtendo dados dos usuários e processando-os de alguma forma.

00:57:30.520 --> 00:57:32.770
Então deixe-me passar aqui para o VS Code.

00:57:32.770 --> 00:57:35.860
Deixe-me criar um novo diretório chamado Frush IMs, apenas para que possamos manter

00:57:35.860 --> 00:57:38.140
todo esse código em seu próprio diretório.

00:57:38.140 --> 00:57:40.240
Deixe-me CD em Frush IMs.

00:57:40.240 --> 00:57:43.270
Deixe-me criar proativamente outro diretório chamado templates,

00:57:43.270 --> 00:57:45.850
em que nossos modelos-- nossos arquivos .HTML--

00:57:45.850 --> 00:57:47.110
precisa viver.

00:57:47.110 --> 00:57:50.800
E, eventualmente, irei em frente e criarei dois

00:57:50.800 --> 00:57:54.700
arquivos minimamente, app.py e index.html.

00:57:54.700 --> 00:57:59.680
Então, vamos fazer o primeiro deles, app.py viverá no meu diretório de mensagens instantâneas,

00:57:59.680 --> 00:58:03.080
e vou apenas recriar algo muito simples como fizemos anteriormente.

00:58:03.080 --> 00:58:09.400
Portanto, do flask em minúsculas, importe o Flask em letras maiúsculas, renderize o modelo e também

00:58:09.400 --> 00:58:09.970
solicitar.

00:58:09.970 --> 00:58:11.710
Portanto, a mesma primeira linha de antes.

00:58:11.710 --> 00:58:13.870
Deixe-me dar a mim mesmo uma variável chamada app,

00:58:13.870 --> 00:58:19.660
defina-o igual a chamar a função Flask, F maiúsculo, com __name__,

00:58:19.660 --> 00:58:27.200
e então deixe-me dar a mim mesmo uma rota para barra como antes com uma função de índice.

00:58:27.200 --> 00:58:29.200
Embora, novamente, eu poderia chamar isso de qualquer coisa que eu quiser.

00:58:29.200 --> 00:58:32.020
E só por enquanto, vamos retornar o modelo de renderização de,

00:58:32.020 --> 00:58:34.760
aspas sem aspas, "index.html" como se isso existisse.

00:58:34.760 --> 00:58:37.780
Portanto, este não é realmente um aplicativo da Web tanto quanto é no momento

00:58:37.780 --> 00:58:41.570
apenas uma recriação do servidor HTTP para um arquivo.

00:58:41.570 --> 00:58:48.250
Vamos agora em outra aba criar um arquivo de templates chamado index.html.

00:58:48.250 --> 00:58:50.830
E vou economizar algumas teclas.

00:58:50.830 --> 00:58:54.340
Deixe-me copiar e colar de quase todo o layout anterior.

00:58:54.340 --> 00:58:57.880
Alterei o título com antecedência para Frosh IMs em vez de Hello,

00:58:57.880 --> 00:58:59.950
mas este é essencialmente o mesmo modelo.

00:58:59.950 --> 00:59:02.890
E por enquanto, porque estou em index.html,

00:59:02.890 --> 00:59:06.560
Eu não vou usar extends ou qualquer coisa de bloco chique ainda.

00:59:06.560 --> 00:59:09.340
Vou apenas criar um formulário relativamente simples

00:59:09.340 --> 00:59:11.530
através do qual antigamente meus colegas de classe podiam

00:59:11.530 --> 00:59:14.210
se inscreveram para esportes internos.

00:59:14.210 --> 00:59:19.510
Então vamos em frente aqui, e vou propor que façamos isso.

00:59:19.510 --> 00:59:24.625
Nesta página teremos um formulário, cuja ação será uma rota chamada

00:59:24.625 --> 00:59:27.940
/register, embora eu possa chamar isso de qualquer coisa que eu queira.

00:59:27.940 --> 00:59:30.970
Será um pouco privado, então vou usar POST em vez de GET,

00:59:30.970 --> 00:59:34.360
só para que as pessoas não acidentalmente se registrem duas vezes

00:59:34.360 --> 00:59:36.700
pressionando recarregar sem aviso prévio.

00:59:36.700 --> 00:59:39.880
Dentro deste formulário, vamos em frente e dar-lhes

00:59:39.880 --> 00:59:44.860
uma entrada em que o preenchimento automático estará desativado, como sempre, para fins de demonstração.

00:59:44.860 --> 00:59:47.950
Foco automático para que o cursor vá lá inicialmente.

00:59:47.950 --> 00:59:51.760
O nome deste campo será literalmente nome porque eu quero o nome do meu colega

00:59:51.760 --> 00:59:53.470
se quiserem se inscrever em algum esporte.

00:59:53.470 --> 00:59:55.840
O espaço reservado será novamente, entre aspas, "nome",

00:59:55.840 --> 00:59:58.090
apenas para que eles vejam algumas instruções cinzas.

00:59:58.090 --> 01:00:02.260
E o tipo deste campo será de fato texto como antes.

01:00:02.260 --> 01:00:06.080
E então preciso dar a eles a capacidade de se inscrever em alguns esportes.

01:00:06.080 --> 01:00:09.193
Por que não simplificamos, como antigamente, basquete, futebol,

01:00:09.193 --> 01:00:11.860
e Ultimate Frisbee foram três dos esportes que apoiamos.

01:00:11.860 --> 01:00:13.568
E então deixe-me fazer isso - e você pode não

01:00:13.568 --> 01:00:17.650
já viu isso antes, a menos que você tenha se envolvido mais com formulários por conta própria.

01:00:17.650 --> 01:00:21.280
Mas posso criar um menu de seleção-- também conhecido como menu suspenso--

01:00:21.280 --> 01:00:25.100
em HTML, dentro do qual há um monte de opções.

01:00:25.100 --> 01:00:27.610
E cada opção normalmente segue este paradigma--

01:00:27.610 --> 01:00:31.270
o valor da opção e, em seguida, o texto real que o humano vê.

01:00:31.270 --> 01:00:37.810
Então o valor dessas opções será-- que tal fazermos basquete como um só.

01:00:37.810 --> 01:00:40.120
E eu quero que o humano veja literalmente a mesma coisa.

01:00:40.120 --> 01:00:42.790
Embora, assim como um link em HTML, eles possam ser diferentes,

01:00:42.790 --> 01:00:44.320
mas vou mantê-los iguais.

01:00:44.320 --> 01:00:49.240
Outra opção será, digamos, futebol.

01:00:49.240 --> 01:00:51.500
E-- oops, deixe-me corrigir minhas citações.

01:00:51.500 --> 01:00:53.512
E este humano verá exatamente a mesma coisa,

01:00:53.512 --> 01:00:54.970
embora pudesse dizer outra coisa.

01:00:54.970 --> 01:00:59.470
E, finalmente, o valor será, entre aspas, "ultimate Frisbee",

01:00:59.470 --> 01:01:03.958
e os humanos verão a mesma coisa lá - Frisbee definitivo.

01:01:03.958 --> 01:01:07.000
Tudo bem, então isso vai criar, como veremos em breve, apenas um menu suspenso

01:01:07.000 --> 01:01:08.770
menu com três opções separadas.

01:01:08.770 --> 01:01:11.020
Se eu quiser que os alunos possam enviar isso agora,

01:01:11.020 --> 01:01:13.810
deixe-me dar a eles um botão, cujo tipo é enviar.

01:01:13.810 --> 01:01:17.330
E este botão será como a palavra registrar nele.

01:01:17.330 --> 01:01:19.210
Então eu acho que estamos muito bem para ir.

01:01:19.210 --> 01:01:22.300
Isso tudo é apenas HTML - sem Python, sem Flask per se,

01:01:22.300 --> 01:01:24.770
exceto para a renderização deste mesmo modelo.

01:01:24.770 --> 01:01:26.770
Então deixe-me entrar na janela do meu terminal.

01:01:26.770 --> 01:01:29.800
Deixe-me executar o Flask dentro deste diretório

01:01:29.800 --> 01:01:31.690
porque eu preciso servir este aplicativo em vez disso.

01:01:31.690 --> 01:01:34.270
Vou ver uma saída feia, incluindo minha própria URL.

01:01:34.270 --> 01:01:36.820
E se eu passar o mouse sobre isso e abrir esse URL,

01:01:36.820 --> 01:01:39.130
Agora devo ver uma forma mais interessante.

01:01:39.130 --> 01:01:40.930
Não tem apenas um campo para o nome,

01:01:40.930 --> 01:01:43.750
mas também este menu suspenso com todos os três esportes.

01:01:43.750 --> 01:01:48.130
Agora, esta não é talvez a melhor experiência do usuário até agora

01:01:48.130 --> 01:01:51.640
porque sinto que estou influenciando as pessoas a se inscreverem no basquete

01:01:51.640 --> 01:01:54.520
talvez porque esteja marcado por padrão. quero dizer muitas formas

01:01:54.520 --> 01:01:57.410
hoje em dia tem um espaço reservado em branco para o formulário.

01:01:57.410 --> 01:01:59.720
Então, isso é apenas uma coisa estética, mas eu posso fazer isso.

01:01:59.720 --> 01:02:02.530
Deixe-me voltar para a mesma forma e deixe-me me entregar

01:02:02.530 --> 01:02:06.760
apenas uma opção em branco no topo que, na verdade, vou desativar.

01:02:06.760 --> 01:02:09.400
Então, tecnicamente, você não pode selecioná-lo proativamente,

01:02:09.400 --> 01:02:11.740
mas vou selecioná-lo por padrão. E assim

01:02:11.740 --> 01:02:14.860
provavelmente nunca vimos esses atributos HTML antes.

01:02:14.860 --> 01:02:20.470
Mas se eu quiser criar o equivalente a um título para este menu suspenso,

01:02:20.470 --> 01:02:24.070
Vou criar literalmente uma opção desativada que é automaticamente

01:02:24.070 --> 01:02:27.070
selecionado chamado Sport para que você não possa selecioná-lo por si só,

01:02:27.070 --> 01:02:28.700
mas está lá no topo.

01:02:28.700 --> 01:02:32.440
Então, se eu voltar agora para minha outra guia, recarregue--

01:02:32.440 --> 01:02:34.270
apenas marginalmente mais bonita do que antes.

01:02:34.270 --> 01:02:37.330
E não estou influenciando as pessoas a se registrarem acidentalmente no basquete

01:02:37.330 --> 01:02:37.830
sozinho.

01:02:37.830 --> 01:02:41.290
E se eu clicar aqui, você verá que o esporte está esmaecido e, portanto, não

01:02:41.290 --> 01:02:45.010
selecionáveis ​​manualmente, mas ainda posso selecionar qualquer um desses outros três.

01:02:45.010 --> 01:02:48.610
Tudo bem, infelizmente se eu digitar David e tentar registrar,

01:02:48.610 --> 01:02:54.160
por exemplo, para futebol e clicar em Registrar, eu acabo em /registro.

01:02:54.160 --> 01:02:56.870
E não há ponto de interrogação, ou nome, ou esporte,

01:02:56.870 --> 01:03:00.220
então provavelmente é POST em vez de GET-- essas são dicas--

01:03:00.220 --> 01:03:01.450
mas não encontrado.

01:03:01.450 --> 01:03:07.510
Observe que a guia aqui diz muito sucintamente, 404 não encontrado.

01:03:07.510 --> 01:03:09.080
Bem, por que isso?

01:03:09.080 --> 01:03:12.690
Só para esclarecer, por que /register me deu um 404?

01:03:16.240 --> 01:03:19.170
Qual é a lógica aqui?

01:03:19.170 --> 01:03:23.260
Talvez apenas diga o óbvio, ou...

01:03:23.260 --> 01:03:24.260
Não existe, certo?

01:03:24.260 --> 01:03:25.968
Ainda não fizemos essa etapa, certo?

01:03:25.968 --> 01:03:27.420
Então, algo tão simples quanto isso.

01:03:27.420 --> 01:03:30.620
E então eu meio que insisto nesse ponto porque, como você está

01:03:30.620 --> 01:03:33.680
aprendendo muitas dessas convenções e um pouco dessa nova sintaxe,

01:03:33.680 --> 01:03:35.270
honestamente, você só vai cometer erros estúpidos.

01:03:35.270 --> 01:03:36.520
Algo não vai funcionar.

01:03:36.520 --> 01:03:38.410
Mas, novamente, volte aos primeiros princípios.

01:03:38.410 --> 01:03:39.830
Por que não é encontrado?

01:03:39.830 --> 01:03:43.490
Tudo bem, o registro deve ser um modelo, talvez chamado de registro.HTML.

01:03:43.490 --> 01:03:45.050
Ah, esqueci meu app.route.

01:03:45.050 --> 01:03:47.810
Portanto, esse deve ser o tipo de pensamento ao tentar diagnosticar

01:03:47.810 --> 01:03:49.280
esses problemas avançando.

01:03:49.280 --> 01:03:54.480
Tudo bem, então deixe-me entrar em app.py e me dê uma segunda rota aqui.

01:03:54.480 --> 01:03:57.920
Então app.route, entre aspas, "/route".

01:03:57.920 --> 01:04:00.510
Então deixe-me definir uma função chamada qualquer coisa que eu quiser,

01:04:00.510 --> 01:04:04.310
mas vou chamá-lo-- desculpe, não /route, /register.

01:04:04.310 --> 01:04:07.280
Deixe-me chamar a função, só para ser consistente, registe-se.

01:04:07.280 --> 01:04:09.500
Então... mas eu poderia chamar isso do que eu quiser.

01:04:09.500 --> 01:04:12.440
E só por enquanto não vamos fazer nada muito interessante,

01:04:12.440 --> 01:04:16.760
vamos apenas retornar a renderização de um modelo chamado success.HTML.

01:04:16.760 --> 01:04:19.190
Vamos fingir por enquanto que o registro foi bem-sucedido

01:04:19.190 --> 01:04:21.170
não importa quem você é ou o que você faz.

01:04:21.170 --> 01:04:25.380
Agora preciso desse modelo e só tenho index.html neste momento.

01:04:25.380 --> 01:04:27.470
Então, deixe-me agora fazer minhas melhores práticas.

01:04:27.470 --> 01:04:29.060
Deixe-me copiar tudo isso.

01:04:29.060 --> 01:04:33.470
Deixe-me-- em uma janela de terminal separada, deixe-me codificar--

01:04:33.470 --> 01:04:36.110
deixe-me entrar no meu diretório Frush IMs.

01:04:36.110 --> 01:04:40.190
E deixe-me criar um novo modelo chamado layout.HTML como antes.

01:04:40.190 --> 01:04:42.320
Deixe-me colar todo o mesmo código.

01:04:42.320 --> 01:04:46.310
Deixe-me excluir o formulário e apenas colocar esse grande espaço reservado,

01:04:46.310 --> 01:04:52.010
então bloquear o corpo e, em seguida, finalizar o bloco é tudo o que fiz anteriormente.

01:04:52.010 --> 01:04:54.260
Isso é apenas uma espécie de clichê agora convenção.

01:04:54.260 --> 01:04:55.620
Tudo o resto vou deixar igual.

01:04:55.620 --> 01:04:58.430
Mas se eu quisesse torná-lo mais bonito, poderia adicionar meu CSS no topo.

01:04:58.430 --> 01:05:01.430
Se eu quisesse adicionar esse plano de fundo louco e repetitivo,

01:05:01.430 --> 01:05:03.110
Eu provavelmente poderia fazer isso em cima também.

01:05:03.110 --> 01:05:06.170
Para que eu possa fazer com que cada página pareça tão feia quanto na minha época,

01:05:06.170 --> 01:05:08.270
mas vamos nos concentrar apenas hoje no texto.

01:05:08.270 --> 01:05:13.820
Tudo bem, adicione agora que tenho o layout desse HTML, deixe-me limpar index.html.

01:05:13.820 --> 01:05:15.740
Não preciso de toda essa redundância.

01:05:15.740 --> 01:05:17.930
Não preciso de todas essas tags no topo.

01:05:17.930 --> 01:05:23.000
Em vez disso, lembre-se, acho que só preciso estender, entre aspas,

01:05:23.000 --> 01:05:27.980
"layout.HTML" com os sinais apropriados e chaves.

01:05:27.980 --> 01:05:30.500
Eu então tenho o corpo de bloco apropriado, embora eu

01:05:30.500 --> 01:05:31.950
poderia chamar de corpo o que eu quiser.

01:05:31.950 --> 01:05:34.280
Mas vou me ater à minha convenção anterior.

01:05:34.280 --> 01:05:37.610
E vou deletar as tags aqui que não preciso mais.

01:05:37.610 --> 01:05:38.240
Por que?

01:05:38.240 --> 01:05:42.110
Porque se eu entrar em layout.HTML, já tenho todas as minhas tags abertas,

01:05:42.110 --> 01:05:43.280
todas as minhas tags próximas.

01:05:43.280 --> 01:05:48.360
As únicas coisas que eu quero em index.html serão as que pertencem ao corpo.

01:05:48.360 --> 01:05:50.780
Encerre o bloco aqui.

01:05:50.780 --> 01:05:53.990
E só para ser pedante, deixe-me seguir em frente e destacar tudo isso.

01:05:53.990 --> 01:05:58.070
Pressione Shift Tab e isso removerá o recuo apenas para alinhar as coisas.

01:05:58.070 --> 01:05:59.123
Só para ficar arrumado.

01:05:59.123 --> 01:06:01.790
Tudo bem, então melhor, mesmo que pareça um pouco enigmático agora.

01:06:01.790 --> 01:06:03.582
Mas agora eu estabeleci as bases para fazer

01:06:03.582 --> 01:06:07.430
uma terceira página, uma quarta página, que não tem todo o mesmo copy paste.

01:06:07.430 --> 01:06:09.920
Tudo bem, agora vamos voltar para app.py.

01:06:09.920 --> 01:06:12.450
Success.HTML é onde parei.

01:06:12.450 --> 01:06:14.630
Então OK, deixe-me abrir a janela do meu terminal.

01:06:14.630 --> 01:06:19.280
Deixe-me codificar um modelo chamado success.HTML cujo objetivo na vida

01:06:19.280 --> 01:06:22.610
é literalmente apenas para dizer, você está registrado.

01:06:22.610 --> 01:06:25.440
Apenas para que vejamos alguma mensagem informativa na tela.

01:06:25.440 --> 01:06:29.300
Portanto, esta parte que ainda preciso estende layout.HTML.

01:06:29.300 --> 01:06:33.020
Ainda há um pouco de copiar e colar, o que é um pouco feio

01:06:33.020 --> 01:06:34.160
mas assim seja.

01:06:34.160 --> 01:06:40.130
Corpo do bloco para este modelo, e só vou dizer, você está registrado!

01:06:40.130 --> 01:06:41.810
Tudo bem, e então finalize o bloco.

01:06:41.810 --> 01:06:43.080
Tão super simples.

01:06:43.080 --> 01:06:45.110
É apenas uma mensagem informativa afirmando

01:06:45.110 --> 01:06:47.300
que o aluno está matriculado.

01:06:47.300 --> 01:06:50.430
Tudo bem, vamos voltar para a forma original, que é esta.

01:06:50.430 --> 01:06:53.630
Deixe-me recarregar para ter certeza de que meu HTML foi recarregado.

01:06:53.630 --> 01:06:58.130
Digite David, vou me inscrever novamente no futebol e clique em Registrar.

01:06:58.130 --> 01:07:01.680
E, oh, interessante-- método não permitido.

01:07:01.680 --> 01:07:08.980
Portanto, não estou mais recebendo um 404, estou recebendo 405 em /register.

01:07:08.980 --> 01:07:10.900
Qual é a dedução aqui?

01:07:10.900 --> 01:07:12.250
Como eu estraguei tudo dessa vez?

01:07:15.130 --> 01:07:16.280
405 é progresso.

01:07:16.280 --> 01:07:16.780
Sim?

01:07:16.780 --> 01:07:18.200
AUDIÊNCIA: [INAUDÍVEL]

01:07:18.200 --> 01:07:21.260
DAVID MALAN: Então não é-- o espaço reservado que eu acho que está OK.

01:07:21.260 --> 01:07:23.510
Isso agora é sobre o material HTTP subjacente.

01:07:23.510 --> 01:07:26.270
O método não foi permitido-- não foi permitido.

01:07:26.270 --> 01:07:27.942
AUDIÊNCIA: [INAUDÍVEL]

01:07:27.942 --> 01:07:28.900
DAVID MALAN: Diga de novo?

01:07:28.900 --> 01:07:29.460
AUDIÊNCIA: [INAUDÍVEL]

01:07:29.460 --> 01:07:31.220
DAVID MALAN: Então GET versus POST também.

01:07:31.220 --> 01:07:34.610
Então, por padrão, todas essas rotas no Flask apenas por padrão

01:07:34.610 --> 01:07:35.930
assuma GET porque é seguro.

01:07:35.930 --> 01:07:39.360
Não permite que você envie informações para o servidor da mesma maneira.

01:07:39.360 --> 01:07:43.970
Mas se eu quiser oferecer suporte a POST, lembre-se de que mudamos isso para method=,

01:07:43.970 --> 01:07:46.680
e, em seguida, uma lista com, entre aspas, "POST".

01:07:46.680 --> 01:07:51.290
Então eu só preciso habilitar o suporte para esse método que é esse verbo HTTP.

01:07:51.290 --> 01:07:52.883
Tudo bem, vamos voltar ao formulário.

01:07:52.883 --> 01:07:54.800
Recarregue só para ter certeza de que não estraguei tudo.

01:07:54.800 --> 01:07:58.580
Digite meu nome David, selecione futebol no menu suspenso e clique em Registrar.

01:07:58.580 --> 01:08:02.480
E agora não estou apenas em /register na URL,

01:08:02.480 --> 01:08:04.432
afirma que estou realmente registrado.

01:08:04.432 --> 01:08:05.390
Agora é claro que não sou--

01:08:05.390 --> 01:08:06.640
Eu não fiz nada de interessante.

01:08:06.640 --> 01:08:09.540
Não há banco de dados, não há arquivo CSV, chegaremos a isso daqui a pouco.

01:08:09.540 --> 01:08:11.720
Mas pelo menos agora tenho o encanamento no lugar

01:08:11.720 --> 01:08:15.230
fazer algo dinâmico baseado nesse esporte.

01:08:15.230 --> 01:08:18.510
Tudo bem, bem, como posso agora melhorar isso?

01:08:18.510 --> 01:08:22.850
Que tal irmos em frente e implementar-- armazenar os registrantes reais

01:08:22.850 --> 01:08:24.840
em um dicionário na memória do computador.

01:08:24.840 --> 01:08:27.007
Em vez de apenas alegar que estão registrados,

01:08:27.007 --> 01:08:28.310
vamos fazer uma notação.

01:08:28.310 --> 01:08:30.649
E da maneira mais simples, como fizemos semanas atrás em Python,

01:08:30.649 --> 01:08:32.840
é apenas armazenar coisas em uma variável na memória.

01:08:32.840 --> 01:08:36.500
Como uma lista ou dicionário, um conjunto, qualquer coisa assim.

01:08:36.500 --> 01:08:39.349
Tudo bem, deixe-me voltar para o VS Code e em app.py,

01:08:39.349 --> 01:08:43.399
e acho que o que vou ter que fazer aqui é mudar minha rota de registro

01:08:43.399 --> 01:08:46.710
para realmente fazer algumas informações úteis.

01:08:46.710 --> 01:08:49.910
Mas antes de registrar o usuário, vamos considerar

01:08:49.910 --> 01:08:51.750
onde eu realmente quero colocá-los.

01:08:51.750 --> 01:08:57.020
E então deixe-me propor que que tal fazermos isso.

01:08:57.020 --> 01:08:59.899
No topo do meu arquivo, deixe-me ir em frente e declarar

01:08:59.899 --> 01:09:03.439
uma variável global chamada registrants, e defina

01:09:03.439 --> 01:09:06.510
que é igual a um dicionário vazio.

01:09:06.510 --> 01:09:09.229
Já fizemos isso antes, quando estávamos brincando anteriormente

01:09:09.229 --> 01:09:11.330
com o uso de dicionários para armazenar pares chave-valor.

01:09:11.330 --> 01:09:14.210
E vou propor que armazenemos os registrantes como um dicionário, por quê?

01:09:14.210 --> 01:09:15.710
Porque vou simplificar.

01:09:15.710 --> 01:09:18.430
Como se o nome fosse o nome do aluno-- ou desculpe,

01:09:18.430 --> 01:09:20.180
a chave será o nome do aluno.

01:09:20.180 --> 01:09:22.847
E o valor vai ser qualquer esporte que eles se inscreveram.

01:09:22.847 --> 01:09:26.149
Então, David e futebol, e Carter e basquete, então é gentil

01:09:26.149 --> 01:09:28.910
de fazer sentido para um dicionário de duas colunas, por assim dizer,

01:09:28.910 --> 01:09:30.890
como costumamos representá-lo na tela.

01:09:30.890 --> 01:09:32.750
Então, como posso usar este dicionário?

01:09:32.750 --> 01:09:34.220
Bem, deixe-me ir em frente e fazer isso.

01:09:34.220 --> 01:09:40.319
Aqui em /register, deixe-me prosseguir e fazer isso inicialmente.

01:09:40.319 --> 01:09:44.720
Que tal obtermos o nome do usuário de request.form.GET

01:09:44.720 --> 01:09:46.803
e defini-lo igual a qualquer que seja o valor de name.

01:09:46.803 --> 01:09:48.678
E não vou dar um valor padrão agora

01:09:48.678 --> 01:09:52.187
porque não quero chamar o mundo estudantil ou algo estranho assim.

01:09:52.187 --> 01:09:54.229
Por enquanto, vou presumir que está lá.

01:09:54.229 --> 01:09:56.540
Vamos então criar outra variável chamada esporte, e fazer

01:09:56.540 --> 01:10:01.700
request.form.GET, entre aspas, "esporte" para obter os esportes desses alunos.

01:10:01.700 --> 01:10:07.100
E então vamos em frente e fazer isso-- no dicionário do registrante, vamos

01:10:07.100 --> 01:10:09.920
indexá-lo usando o nome do aluno, e vamos

01:10:09.920 --> 01:10:12.720
defini-lo igual a qualquer que seja o esporte.

01:10:12.720 --> 01:10:14.990
Então, eu tenho essas variáveis ​​apenas para manter meu código organizado,

01:10:14.990 --> 01:10:19.850
e agora estou colocando um par de valor-chave nisso--

01:10:19.850 --> 01:10:21.740
nesse dicionário.

01:10:21.740 --> 01:10:24.510
Tudo bem, bem, o que eu quero fazer agora?

01:10:24.510 --> 01:10:27.795
E então eu vou em frente e digo sucesso.HTML, claro.

01:10:27.795 --> 01:10:28.920
Vamos em frente e fazer isso.

01:10:28.920 --> 01:10:31.200
Mas agora acho que sucesso.HTML significa isso.

01:10:31.200 --> 01:10:33.680
Então, deixe-me voltar ao formulário-- recarregar.

01:10:33.680 --> 01:10:37.010
Deixe-me digitar David e futebol--

01:10:37.010 --> 01:10:39.290
registro.

01:10:39.290 --> 01:10:43.910
Deixe-me voltar e dizer Carter e basquete--

01:10:43.910 --> 01:10:45.570
registro.

01:10:45.570 --> 01:10:46.310
OK.

01:10:46.310 --> 01:10:48.630
Agora vamos ver o que eu quero fazer a seguir.

01:10:48.630 --> 01:10:52.430
Que tal eu entrar em--

01:10:52.430 --> 01:10:54.960
deixa eu me dar outro caminho e vamos brincar por aqui.

01:10:54.960 --> 01:10:59.300
Então app.route, vamos me dar outra terceira rota

01:10:59.300 --> 01:11:02.420
chamados registrantes, cujo propósito na vida é apenas me mostrar

01:11:02.420 --> 01:11:03.800
quem são todos esses registrantes.

01:11:03.800 --> 01:11:06.060
Assim como você esperaria de um site como este.

01:11:06.060 --> 01:11:09.780
E então deixe-me definir uma função chamada registrantes ou qualquer outra coisa.

01:11:09.780 --> 01:11:16.280
Em seguida, deixe-me retornar a renderização de um modelo chamado registrants.HTML.

01:11:16.280 --> 01:11:18.410
E deixe-me passar--

01:11:18.410 --> 01:11:19.320
isso é legal.

01:11:19.320 --> 01:11:21.470
Eu posso fazer registrants=registrants.

01:11:21.470 --> 01:11:23.760
O que novamente parece estranho, mas o que estou fazendo?

01:11:23.760 --> 01:11:26.480
Estou presumindo passar em um espaço reservado chamado

01:11:26.480 --> 01:11:30.620
registrantes, cujo valor é este dicionário que tenho

01:11:30.620 --> 01:11:32.870
coletando todos os registros em.

01:11:32.870 --> 01:11:34.882
Tão semelhante ao espaço reservado para o nome antes,

01:11:34.882 --> 01:11:38.090
mas é um pouco mais poderoso porque agora é um dicionário inteiro, não apenas

01:11:38.090 --> 01:11:39.140
uma única corda.

01:11:39.140 --> 01:11:40.910
Então eu acho que agora--

01:11:40.910 --> 01:11:42.360
deixe-me ser criativo aqui.

01:11:42.360 --> 01:11:49.950
Deixe-me entrar em meus modelos na minha pasta de modelos e vamos fazer isso.

01:11:49.950 --> 01:11:53.450
Vamos para a janela do meu terminal, vamos criar

01:11:53.450 --> 01:11:56.780
outro modelo chamado registrants.HTML que é

01:11:56.780 --> 01:12:00.600
na verdade, vamos fazer essa exibição de todos os inscritos para nós.

01:12:00.600 --> 01:12:06.170
Então, estende layout.HTML apenas para que eu possa pegar emprestado todo o mesmo HTML de antes.

01:12:06.170 --> 01:12:09.620
E vamos definir o corpo do bloco como antes.

01:12:09.620 --> 01:12:12.890
E dentro deste bloco final eu quero colocar,

01:12:12.890 --> 01:12:16.670
Não sei, uma lista em negrito ou uma lista ordenada de todos os inscritos.

01:12:16.670 --> 01:12:18.000
Então, como posso fazer isso?

01:12:18.000 --> 01:12:21.620
Bem, vamos fazer uma lista não ordenada, UL.

01:12:21.620 --> 01:12:27.080
E é aqui que Jinja e Flask geralmente ficam interessantes.

01:12:27.080 --> 01:12:34.570
Eu quero que haja algo assim-- um li e então o nome do aluno,

01:12:34.570 --> 01:12:36.250
e então um L--

01:12:36.250 --> 01:12:38.200
talvez-- li, sim, assim.

01:12:38.200 --> 01:12:39.910
E então talvez esporte?

01:12:39.910 --> 01:12:41.140
Algo assim?

01:12:41.140 --> 01:12:44.380
Mas não passei em um nome, não passei em um esporte,

01:12:44.380 --> 01:12:47.263
Passei em todo o dicionário de registrantes.

01:12:47.263 --> 01:12:49.180
Agora, em Python, se estivéssemos apenas fazendo algo

01:12:49.180 --> 01:12:53.180
na janela do terminal preto e branco e fazendo um programa de linha de comando,

01:12:53.180 --> 01:12:55.840
você sabe que eu provavelmente teria algum tipo de loop for em Python.

01:12:55.840 --> 01:12:58.030
Jinja permite que você faça isso.

01:12:58.030 --> 01:13:01.300
Portanto, uma linguagem de modelagem tende a vir com mecanismos muito leves

01:13:01.300 --> 01:13:05.180
para fazer espaços reservados, fazer loops simples, fazer condições simples.

01:13:05.180 --> 01:13:08.270
Então Python gosta de sintaxe, e é quase idêntico.

01:13:08.270 --> 01:13:09.760
Então observe o que posso fazer.

01:13:09.760 --> 01:13:12.040
Dentro desta lista não ordenada, deixe-me não

01:13:12.040 --> 01:13:17.150
comece a produzir manualmente um único li, deixe-me usar esta sintaxe.

01:13:17.150 --> 01:13:21.640
A mesma sintaxe de Jinja que usei para o bloco, então sinal de porcentagem de chaves.

01:13:21.640 --> 01:13:25.330
E eu vou dizer isso-- para o nome dos registrantes.

01:13:25.330 --> 01:13:29.390
Então, isso é como a sintaxe do Python para iterar em um dicionário.

01:13:29.390 --> 01:13:33.100
E agora isso vai parecer estúpido, mas o oposto disso é o fim.

01:13:33.100 --> 01:13:35.140
Portanto, em HTML, você usa a barra.

01:13:35.140 --> 01:13:35.650
Em Jinja.

01:13:35.650 --> 01:13:37.845
Você literalmente usa a palavra fim, sem espaço,

01:13:37.845 --> 01:13:39.220
e, em seguida, o nome da palavra-chave.

01:13:39.220 --> 01:13:41.350
Então, end for é como você fecha isso.

01:13:41.350 --> 01:13:44.080
Mas é aqui que o modelo fica muito legal.

01:13:44.080 --> 01:13:50.800
Agora você pode fazer li, e aqui eu posso fazer algo como o nome daquele aluno.

01:13:50.800 --> 01:13:51.470
E é isso.

01:13:51.470 --> 01:13:52.880
Eu vou deixar assim.

01:13:52.880 --> 01:13:58.000
E o que estou fazendo aqui é realmente usar um modelo, pois os modelos são planejados.

01:13:58.000 --> 01:14:00.730
Eu tenho os blocos de construção básicos do que

01:14:00.730 --> 01:14:04.480
Eu quero que esta saída pareça, mas graças a este pequeno loop for aqui,

01:14:04.480 --> 01:14:05.890
graças à sintaxe de Jinja--

01:14:05.890 --> 01:14:08.110
a chave e o sinal de porcentagem, eu sou

01:14:08.110 --> 01:14:11.810
vai iterar sobre cada dicionário imprimindo nome, nome, nome, nome.

01:14:11.810 --> 01:14:14.980
E então, se eu tenho dois filhos registrados agora, vou ver dois li's.

01:14:14.980 --> 01:14:17.420
David e Carter, respectivamente.

01:14:17.420 --> 01:14:23.860
Então vamos ver, deixe-me voltar para minha guia de mensagens instantâneas aqui.

01:14:23.860 --> 01:14:27.370
E ainda não tenho um link, então tenho que fazer isso manualmente

01:14:27.370 --> 01:14:28.810
como um desenvolvedor faria.

01:14:28.810 --> 01:14:34.570
Deixe-me ir para /registrants, diminuir o zoom e pressionar Enter.

01:14:34.570 --> 01:14:37.690
E você verá o que provavelmente verá também ao cometer erros

01:14:37.690 --> 01:14:39.200
pela primeira vez neste mundo.

01:14:39.200 --> 01:14:40.930
Então, onde está a mensagem de erro?

01:14:40.930 --> 01:14:44.480
Infelizmente, o erro interno do servidor não é tão útil.

01:14:44.480 --> 01:14:46.490
Mas dizemos que você vê a janela do terminal.

01:14:46.490 --> 01:14:49.783
Então, se eu for para a janela do terminal, não estou prestando atenção

01:14:49.783 --> 01:14:50.950
para isso por algum tempo.

01:14:50.950 --> 01:14:52.950
E, de fato, tenho duas janelas de terminal abertas, então

01:14:52.950 --> 01:14:54.950
que ainda posso usar comandos no prompt.

01:14:54.950 --> 01:14:58.510
Mas se eu voltar para minha primeira janela de terminal, também conhecida como bash,

01:14:58.510 --> 01:15:01.330
você verá na janela do seu terminal ao desenvolver

01:15:01.330 --> 01:15:05.622
aplicativos da web, todos os erros que você cometeu no próprio terminal.

01:15:05.622 --> 01:15:08.830
Este é um daqueles tracebacks do Python relacionados a mim aqui.

01:15:08.830 --> 01:15:10.460
Agora deixe-me ir em frente aqui.

01:15:10.460 --> 01:15:15.490
E vamos ver-- erro de tipo-- a função não é iterável.

01:15:15.490 --> 01:15:21.440
Bloco final-- para a função de nome não é iterável.

01:15:21.440 --> 01:15:23.750
Tudo bem, então que erro eu cometi?

01:15:23.750 --> 01:15:26.390
Bem, isso é o que acontece quando eu não sigo minhas anotações

01:15:26.390 --> 01:15:27.960
e fazer alterações em tempo real.

01:15:27.960 --> 01:15:31.850
Então eu tenho essa variável na linha cinco chamada registrants e toda minúscula.

01:15:31.850 --> 01:15:35.195
Mas o que eu fiz então na mosca aqui na linha 22?

01:15:38.220 --> 01:15:40.600
Eu defini uma função chamada registrants.

01:15:40.600 --> 01:15:42.888
Então, erro de novato, eu não deveria ter feito isso.

01:15:42.888 --> 01:15:45.180
Não posso ter uma variável e uma função com o mesmo nome

01:15:45.180 --> 01:15:47.170
porque os símbolos são literalmente idênticos.

01:15:47.170 --> 01:15:50.430
Só para deixar claro que esta variável aqui é realmente global,

01:15:50.430 --> 01:15:55.260
usaremos nossa convenção como fizemos em C frequentemente, quando tínhamos uma variável global.

01:15:55.260 --> 01:15:59.220
Vamos capitalizar tudo apenas para destacá-lo como um valor constante

01:15:59.220 --> 01:15:59.860
lá em cima.

01:15:59.860 --> 01:16:04.170
E aqui embaixo, o que vou fazer é passar os registrantes em letras maiúsculas.

01:16:04.170 --> 01:16:06.550
Então isso foi estúpido, não quis confundir lá.

01:16:06.550 --> 01:16:08.400
Mas a razão desse erro, para ficar claro,

01:16:08.400 --> 01:16:11.370
é que você não pode ter uma função com o mesmo nome de uma variável.

01:16:11.370 --> 01:16:12.990
Eu poderia apenas mudar o nome da variável completamente.

01:16:12.990 --> 01:16:14.698
Vou seguir em frente e apenas capitalizar

01:16:14.698 --> 01:16:18.240
para que realmente se destaque que esta é, de fato, uma variável global no topo.

01:16:18.240 --> 01:16:20.910
Tudo bem, agora vou voltar para o meu navegador.

01:16:20.910 --> 01:16:23.025
Vamos fazer David e futebol.

01:16:26.640 --> 01:16:29.200
Tudo bem, mas haverá alguns outros erros aqui.

01:16:29.200 --> 01:16:32.760
Então, na linha 17, deixe-me ir em frente e alterar esta variável

01:16:32.760 --> 01:16:36.750
para ser capitalizado lá porque na verdade eu quero colocar a chave e o valor

01:16:36.750 --> 01:16:40.170
nesta variável recém-nomeada como registrantes de todas as capitais.

01:16:40.170 --> 01:16:42.370
Deixe-me agora voltar ao VS Code aqui.

01:16:42.370 --> 01:16:45.900
Deixe-me voltar ao formulário e começar a adicionar alguns dados novos.

01:16:45.900 --> 01:16:48.540
Deixe-me registrar David para o futebol.

01:16:48.540 --> 01:16:49.927
Clicando em cadastre-se agora.

01:16:49.927 --> 01:16:51.510
E devemos ver, você está registrado.

01:16:51.510 --> 01:16:54.210
Mas, esperançosamente, agora está de fato na memória do computador.

01:16:54.210 --> 01:16:58.650
Deixe-me voltar e registrar agora Carter para o basquete.

01:16:58.650 --> 01:17:00.120
Clicando em registrar novamente.

01:17:00.120 --> 01:17:01.740
E espero que agora esteja registrado.

01:17:01.740 --> 01:17:06.210
Se agora eu alterar minha rota manualmente para /registrants,

01:17:06.210 --> 01:17:10.260
que é esta rota recém-adicionada que eu fiz, e pressione Enter, agora eu vejo--

01:17:10.260 --> 01:17:10.770
graças a Deus.

01:17:10.770 --> 01:17:15.790
Agora vejo a lista não ordenada contendo tudo na memória do computador.

01:17:15.790 --> 01:17:17.760
Então, quando eu digo, você está registrado, eu meio que

01:17:17.760 --> 01:17:20.220
significa isso agora porque o servidor ainda está em execução.

01:17:20.220 --> 01:17:24.330
E na memória do computador está, nesta variável global registrante,

01:17:24.330 --> 01:17:26.460
um dicionário de pares chave-valor.

01:17:26.460 --> 01:17:29.080
Claro, estamos vendo apenas as chaves no momento.

01:17:29.080 --> 01:17:32.770
Portanto, pode ser bom ver os valores também.

01:17:32.770 --> 01:17:38.600
Então, deixe-me voltar ao código VS e entrar no HTML dos registrantes.

01:17:38.600 --> 01:17:40.350
E eu vou fazer algo um pouco confuso.

01:17:40.350 --> 01:17:42.640
Vou apenas dizer-- que tal--

01:17:42.640 --> 01:17:46.380
apenas para torná-lo uma frase, está registrado.

01:17:46.380 --> 01:17:51.660
E agora outro espaço reservado, vou dizer o nome do colchete dos registrantes.

01:17:51.660 --> 01:17:55.050
Assim como em Python, se registrants for ele mesmo

01:17:55.050 --> 01:18:00.090
um dicionário, colchetes de registrantes e, em seguida, a chave que você deseja indexar

01:18:00.090 --> 01:18:02.560
também é uma sintaxe perfeitamente válida.

01:18:02.560 --> 01:18:08.020
Então agora deixe-me voltar para /registrants, deixe-me clicar em recarregar novamente.

01:18:08.020 --> 01:18:09.900
Então, por que não está funcionando para todos?

01:18:09.900 --> 01:18:12.480
Qual é o bug que introduzi anteriormente?

01:18:12.480 --> 01:18:15.510
Se David está registrado para nenhum e Carter está registrado para nenhum,

01:18:15.510 --> 01:18:19.330
mas David e Carter estão no dicionário, isso é bom.

01:18:19.330 --> 01:18:21.100
Então, alguns dos dados estão lá.

01:18:21.100 --> 01:18:23.605
Então, por que não há esportes associados?

01:18:23.605 --> 01:18:25.980
Bem, a primeira coisa que eu literalmente acabei de fazer na sua frente

01:18:25.980 --> 01:18:30.000
tudo foi que eu fui para app.py e olhei para a linha 17 pensando,

01:18:30.000 --> 01:18:31.480
como eu estraguei isso?

01:18:31.480 --> 01:18:35.610
Estou colocando esporte como valor da chave que é o nome do aluno.

01:18:35.610 --> 01:18:38.230
Tudo bem, a linha 17 parecia boa para mim alguns segundos atrás.

01:18:38.230 --> 01:18:41.940
Então eu olho com meus olhos para a linha 16, e isso também parecia bom.

01:18:41.940 --> 01:18:46.450
Meu primeiro pensamento foi, oh, eu usei request.args em vez de request.form

01:18:46.450 --> 01:18:46.950
em vez de?

01:18:46.950 --> 01:18:49.117
Porque isso teria assumido GET em vez de POST.

01:18:49.117 --> 01:18:51.330
Mas não, isso parece bom também.

01:18:51.330 --> 01:18:55.690
Então meu instinto final foi. oh meu Deus, eu estraguei o formulário HTML?

01:18:55.690 --> 01:18:58.080
E é por isso que voltei para minha guia aqui.

01:18:58.080 --> 01:19:03.060
Eu fui para o formulário original aqui, depois vejo o código-fonte da página.

01:19:03.060 --> 01:19:05.790
E isso pode não ser tão óbvio para você se você nunca

01:19:05.790 --> 01:19:07.650
visto o menu Selecionar antes--

01:19:07.650 --> 01:19:13.045
o que aparentemente está faltando aqui que pode explicar meu erro?

01:19:13.045 --> 01:19:13.545
Sim.

01:19:13.545 --> 01:19:15.060
AUDIÊNCIA: O nome é forma.

01:19:15.060 --> 01:19:18.988
DAVID MALAN: Sim, eu não nomeei este campo de formulário, entre aspas, "esporte".

01:19:18.988 --> 01:19:21.780
Agora, para ser justo, você nunca me viu fazer isso como um menu de seleção antes

01:19:21.780 --> 01:19:23.340
e é diferente desta entrada.

01:19:23.340 --> 01:19:26.970
Quando você tem uma tag de entrada, você literalmente diz name=whatever

01:19:26.970 --> 01:19:28.248
na etiqueta de entrada.

01:19:28.248 --> 01:19:30.540
Acontece que... não sei por que pulei isso antes.

01:19:30.540 --> 01:19:33.030
Eu provavelmente pretendia voltar a isso-- a tag select também

01:19:33.030 --> 01:19:34.900
pode receber um parâmetro de nome.

01:19:34.900 --> 01:19:38.820
Então, se eu voltar ao parâmetro name aqui e voltar

01:19:38.820 --> 01:19:42.420
e adicionar o parâmetro de nome, deixe-me entrar nesse modelo, que

01:19:42.420 --> 01:19:44.010
é index.html.

01:19:44.010 --> 01:19:48.090
Deixe-me adicionar name= aspas sem aspas, "esporte" em letras minúsculas,

01:19:48.090 --> 01:19:52.560
que é diferente da estética visual deste deficiente temporário

01:19:52.560 --> 01:19:55.320
opção que existe apenas para tornar as coisas mais bonitas para o humano.

01:19:55.320 --> 01:20:01.680
Agora deixe-me ir em frente aqui, e primeiro vou entrar na janela do meu terminal,

01:20:01.680 --> 01:20:04.920
e na verdade vou apertar o controle C para parar o servidor completamente

01:20:04.920 --> 01:20:07.197
porque eu quero jogar fora o conteúdo da memória

01:20:07.197 --> 01:20:10.530
e, portanto, livrar-se daquele dicionário que tinha David e Carter e aqueles não

01:20:10.530 --> 01:20:11.110
valores.

01:20:11.110 --> 01:20:13.620
Então, isso é como eu limpando a memória do computador.

01:20:13.620 --> 01:20:16.110
Vou executar novamente a execução do Flask.

01:20:16.110 --> 01:20:18.012
Eu recebo o mesmo URL de antes.

01:20:18.012 --> 01:20:20.220
Vou passar o mouse sobre isso e abrir a nova guia.

01:20:20.220 --> 01:20:22.680
E só para ter certeza, vou fazer view page source.

01:20:22.680 --> 01:20:28.230
E aqui vejo agora, OK, agora o formulário tem um nome e um esporte nele.

01:20:28.230 --> 01:20:30.420
Tudo bem, agora eu realmente vou cruzar os dedos

01:20:30.420 --> 01:20:32.520
porque eu pretendo que isso agora funcione.

01:20:32.520 --> 01:20:35.130
David vai se inscrever novamente no futebol.

01:20:35.130 --> 01:20:37.380
Registre-- afirma que estamos registrados.

01:20:37.380 --> 01:20:40.920
Vou voltar e fazer isso de novo por Carter e pelo basquete.

01:20:40.920 --> 01:20:44.580
Registre-- ainda não temos um link, então vou subir manualmente

01:20:44.580 --> 01:20:49.830
para o URL e altere /register para registrantes como antes.

01:20:49.830 --> 01:20:51.690
Reduza o zoom e pressione Enter.

01:20:51.690 --> 01:20:52.740
E graças a Deus.

01:20:52.740 --> 01:20:55.650
Agora estou realmente registrado corretamente para isso.

01:20:55.650 --> 01:20:56.910
Então-- oh, obrigado.

01:21:01.075 --> 01:21:02.950
Então, o que é, como 20 anos depois, eu ainda estou

01:21:02.950 --> 01:21:04.367
lutando para implementar este site?

01:21:04.367 --> 01:21:09.610
OK, agora temos pela primeira vez em Python e coisas da web,

01:21:09.610 --> 01:21:11.250
agora temos um aplicativo da web adequado.

01:21:11.250 --> 01:21:13.750
E não é apenas ecoando de volta Alô, David, Alô, Carter--

01:21:13.750 --> 01:21:15.670
isso agora pode funcionar para qualquer um de vocês.

01:21:15.670 --> 01:21:18.580
E atualmente é servido de forma privada, mas se eu tornasse este URL público,

01:21:18.580 --> 01:21:22.180
Eu poderia colocar isso na web agora e permitir que qualquer pessoa no mundo se registrasse.

01:21:22.180 --> 01:21:25.010
Mas há alguns problemas aqui.

01:21:25.010 --> 01:21:27.770
Há algumas falhas de segurança potencialmente.

01:21:27.770 --> 01:21:30.580
E então, por exemplo, deixe-me voltar ao formulário da web aqui.

01:21:30.580 --> 01:21:34.510
E deixe-me abrir a guia de inspeção-- as ferramentas do desenvolvedor--

01:21:34.510 --> 01:21:38.110
e apenas lembrá-lo de que qualquer pessoa na Internet, não apenas você, o desenvolvedor,

01:21:38.110 --> 01:21:42.340
mas um adversário pode ver todo o seu HTML, ver todo o seu CSS,

01:21:42.340 --> 01:21:43.510
ver todo o seu JavaScript.

01:21:43.510 --> 01:21:47.380
Mas o mais importante, porque tudo isso é do lado do cliente no navegador,

01:21:47.380 --> 01:21:50.050
não há literalmente nada que os impeça tecnicamente

01:21:50.050 --> 01:21:53.542
de alterar o HTML, ou pelo menos a cópia dele.

01:21:53.542 --> 01:21:55.000
E fiz isso na semana passada com Yale.

01:21:55.000 --> 01:21:56.200
Eu mudei o site deles.

01:21:56.200 --> 01:21:58.370
Mas não, mudei minha cópia do site deles.

01:21:58.370 --> 01:22:02.530
Mas quando os formulários se envolvem, você pode ser realmente malicioso agora.

01:22:02.530 --> 01:22:05.500
Porque mesmo que este menu suspenso apenas

01:22:05.500 --> 01:22:09.610
tem basquete, futebol e frisbee, suponha

01:22:09.610 --> 01:22:12.370
Eu realmente quero me registrar para--

01:22:12.370 --> 01:22:15.513
que tal digamos--

01:22:15.513 --> 01:22:16.555
nomeie seu esporte favorito.

01:22:16.555 --> 01:22:17.560
PÚBLICO: Voleibol.

01:22:17.560 --> 01:22:18.250
DAVID MALAN: Voleibol.

01:22:18.250 --> 01:22:20.170
Queremos muito nos inscrever no vôlei,

01:22:20.170 --> 01:22:22.630
mas este site não me permite.

01:22:22.630 --> 01:22:25.720
Bem, não há nada que me impeça de ir na guia Elementos

01:22:25.720 --> 01:22:28.990
no meu navegador, indo para o menu Selecionar aqui,

01:22:28.990 --> 01:22:31.720
e você sabe o que, ninguém [inaudível] Frisbee final.

01:22:31.720 --> 01:22:33.790
Vamos mudar isso para vôlei.

01:22:33.790 --> 01:22:36.580
E vamos mudar isso para vôlei--

01:22:36.580 --> 01:22:37.510
Digitar.

01:22:37.510 --> 01:22:39.970
Vou fechar o inspetor agora.

01:22:39.970 --> 01:22:43.960
E conforme solicitado, agora apoiamos o vôlei na forma.

01:22:43.960 --> 01:22:47.410
Agora não mudou no servidor, para ser justo,

01:22:47.410 --> 01:22:49.330
mas pense em como o HTTP funciona.

01:22:49.330 --> 01:22:53.050
Quando eu preencho isso com digamos, vamos ver, o nome de Bernie--

01:22:53.050 --> 01:22:55.990
Bernie também quer se inscrever no vôlei.

01:22:55.990 --> 01:23:00.280
No momento, meu código vai apenas confiar que o que está no formulário de solicitação

01:23:00.280 --> 01:23:04.240
é o que estava na própria forma original, não importa

01:23:04.240 --> 01:23:07.310
se o adversário humano realmente o mudou.

01:23:07.310 --> 01:23:09.580
Então, se eu realmente enviar este formulário e clicar

01:23:09.580 --> 01:23:12.670
Inscreva-se no Bernie e no vôlei, mesmo que isso não seja

01:23:12.670 --> 01:23:16.720
um dos esportes disponíveis suportados, se eu for agora aos inscritos,

01:23:16.720 --> 01:23:20.050
meu site, no entanto, confiou que Bernie

01:23:20.050 --> 01:23:22.510
e talvez você esteja inscrito no vôlei.

01:23:22.510 --> 01:23:24.130
Então, qual é a implicação disso?

01:23:24.130 --> 01:23:27.250
Certamente aconteceu no passado quando realmente mal implementado

01:23:27.250 --> 01:23:32.123
sites permitem que você especifique o preço de um item, por exemplo,

01:23:32.123 --> 01:23:33.040
em seu carrinho de compras.

01:23:33.040 --> 01:23:35.890
E eles apenas confiam nisso quando você clica em Enviar ou adicionar ao carrinho

01:23:35.890 --> 01:23:39.220
ele adiciona o preço ao servidor de back-end.

01:23:39.220 --> 01:23:42.640
Se você não está validando o preço e certificando-se, como em um banco de dados que,

01:23:42.640 --> 01:23:44.410
espere um minuto, esse preço é válido.

01:23:44.410 --> 01:23:46.630
Ou espere um minuto, esses esportes são válidos.

01:23:46.630 --> 01:23:48.850
Quem sabe o que as pessoas vão fazer no seu site?

01:23:48.850 --> 01:23:53.090
E é muito simples hackear um site de acordo.

01:23:53.090 --> 01:23:57.820
Agora, podemos consertar isso facilmente com algum estilo Python da sexta semana.

01:23:57.820 --> 01:24:00.080
Nós realmente só precisamos fazer um pouco de lógica aqui.

01:24:00.080 --> 01:24:01.430
E então deixe-me propor isso.

01:24:01.430 --> 01:24:03.710
Deixe-me entrar em app.py aqui.

01:24:03.710 --> 01:24:09.610
E bem no topo, deixe-me também criar uma variável global chamada

01:24:09.610 --> 01:24:10.960
esportes em todas as tampas.

01:24:10.960 --> 01:24:13.660
E vou definir isso igual a entre colchetes

01:24:13.660 --> 01:24:16.010
a lista de esportes que eu realmente quero apoiar.

01:24:16.010 --> 01:24:20.110
Vou colocar basquete aqui, vou colocar futebol aqui e...

01:24:20.110 --> 01:24:21.700
Desculpa, nada de voleibol oficialmente.

01:24:21.700 --> 01:24:24.140
Vou colocar o frisbee final aqui.

01:24:24.140 --> 01:24:26.800
Então eu tenho esta lista global de esportes suportados.

01:24:26.800 --> 01:24:29.650
Agora pense em como eu fiz este formulário há um tempo atrás.

01:24:29.650 --> 01:24:31.670
Acabei de codificar esses esportes aqui.

01:24:31.670 --> 01:24:36.280
Bem, eu não preciso fazer isso, posso usar minha própria lista oficial de esportes

01:24:36.280 --> 01:24:37.070
em vez de.

01:24:37.070 --> 01:24:41.740
Deixe-me rolar para baixo até meu modelo de renderização index.HTML aqui.

01:24:41.740 --> 01:24:44.530
Deixe-me dizer que os esportes que quero apoiar são esses.

01:24:44.530 --> 01:24:47.630
Então, usando o mesmo truque de espaço reservado de antes,

01:24:47.630 --> 01:24:51.190
mas agora estou informando ao modelo quais esportes apoiamos atualmente.

01:24:51.190 --> 01:24:56.480
Agora, se eu voltar para index.HTML, não preciso fazer nada disso manualmente.

01:24:56.480 --> 01:24:59.500
Deixe-me me livrar de todas essas três opções, que eu manualmente

01:24:59.500 --> 01:25:03.100
inserido anteriormente, deixe-me usar meu novo truque com a sintaxe Jinja

01:25:03.100 --> 01:25:06.040
e dizer para esportes em esportes.

01:25:06.040 --> 01:25:09.400
Então deixe-me proativamente dizer fim para, apenas para terminar esse pensamento.

01:25:09.400 --> 01:25:12.640
E aqui, deixe-me fazer a opção value=value=[? Esportes ?]..

01:25:15.280 --> 01:25:17.980
E então para que o humano também veja as mesmas palavras,

01:25:17.980 --> 01:25:19.640
Eu vou dizer esporte aqui.

01:25:19.640 --> 01:25:22.690
Então eu mudei completamente o que estava codificado--

01:25:22.690 --> 01:25:25.780
digitado manualmente-- para algo agora que é completamente dinâmico.

01:25:25.780 --> 01:25:28.750
Então agora não vai parar alguém contraditório como eu

01:25:28.750 --> 01:25:31.150
de alterar o HTML, mas observe isso.

01:25:31.150 --> 01:25:35.350
O comportamento no formulário se voltarmos ainda é agora

01:25:35.350 --> 01:25:37.190
o mesmo menu suspenso de antes.

01:25:37.190 --> 01:25:39.110
Então, esteticamente, parece o mesmo.

01:25:39.110 --> 01:25:39.860
Mas você sabe o que?

01:25:39.860 --> 01:25:40.985
Por que não somos espertos agora.

01:25:40.985 --> 01:25:44.290
E vamos para app.py e a rota /register,

01:25:44.290 --> 01:25:46.450
e por que não dizemos isso.

01:25:46.450 --> 01:25:53.920
Se-- que tal esporte não em esportes, então vamos voltar a renderizar

01:25:53.920 --> 01:25:57.460
falha de modelo.HTML.

01:25:57.460 --> 01:25:59.210
Agora, este modelo ainda não existe.

01:25:59.210 --> 01:26:01.040
Então deixe-me fazer isso bem rápido.

01:26:01.040 --> 01:26:03.040
Vou copiar esse código de antes.

01:26:03.040 --> 01:26:08.383
Deixe-me criar um arquivo de código em failed.HTML.

01:26:08.383 --> 01:26:09.800
Eu só vou colar isso aqui.

01:26:09.800 --> 01:26:12.383
Portanto, temos uma mensagem de erro super simples e direi:

01:26:12.383 --> 01:26:13.750
Você não está registrado.

01:26:13.750 --> 01:26:15.610
Isso é o que queremos dizer com fracasso.

01:26:15.610 --> 01:26:18.790
E agora em app.py, considere a lógica que adicionei.

01:26:18.790 --> 01:26:23.320
SPORTS em letras maiúsculas na linha 22 é a mesma lista global

01:26:23.320 --> 01:26:27.160
como antes, perguntando [? Pitonicamente, ?] se o esporte não

01:26:27.160 --> 01:26:29.320
nos esportes, bem, então você me hackeou.

01:26:29.320 --> 01:26:34.460
Como se você tentasse injetar vôlei ou algum outro esporte no request.form.

01:26:34.460 --> 01:26:37.990
Então, vou apenas dizer, sem falha, não deixando você se registrar.

01:26:37.990 --> 01:26:42.280
E eu posso fazer isso um pouco mais detalhadamente também.

01:26:42.280 --> 01:26:43.780
Por que eu também não digo isso.

01:26:43.780 --> 01:26:47.680
Se não for o nome -- então, se o nome estiver em branco, vamos retornar da mesma forma

01:26:47.680 --> 01:26:50.785
um modelo de renderização de failed.HTML.

01:26:50.785 --> 01:26:52.660
Em outras palavras, se você não me deu um nome,

01:26:52.660 --> 01:26:55.760
você deixou em branco, isso não é útil para eu administrar o programa de esportes.

01:26:55.760 --> 01:26:57.950
Vamos também considerar isso um fracasso.

01:26:57.950 --> 01:27:00.220
Então, se eu voltar a esta guia agora, vou

01:27:00.220 --> 01:27:03.700
para recarregar apenas para ter certeza de que tenho o lado do cliente mais recente, deixe-me ser preguiçoso

01:27:03.700 --> 01:27:04.960
e apenas clique em Registrar.

01:27:04.960 --> 01:27:06.100
Digitar.

01:27:06.100 --> 01:27:08.920
Você não está registrado porque não dei um nome real.

01:27:08.920 --> 01:27:10.370
Tudo bem, vamos voltar.

01:27:10.370 --> 01:27:13.480
Que tal agora eu digitar David, mas não, não vou escolher um esporte.

01:27:13.480 --> 01:27:15.500
Eu só quero me registrar.

01:27:15.500 --> 01:27:17.060
Não, isso não funcionou.

01:27:17.060 --> 01:27:20.220
Agora deixe-me ir em frente aqui e escolher o futebol.

01:27:20.220 --> 01:27:22.770
Isso, eu acho, funciona.

01:27:22.770 --> 01:27:27.810
Deixe-me voltar agora e tentar este truque de hacker pelo qual eu entro no menu suspenso

01:27:27.810 --> 01:27:31.050
menu, vou para o menu Selecionar.

01:27:31.050 --> 01:27:34.830
Eu mudo, como antes, frisbee final para vôlei,

01:27:34.830 --> 01:27:38.100
e eu vou mudar esse aqui para vôlei.

01:27:38.100 --> 01:27:40.110
Deixe-me fechar a guia agora.

01:27:40.110 --> 01:27:44.850
Parece que está disponível agora, mas quando clico em Registrar desta vez,

01:27:44.850 --> 01:27:47.040
diz que você não está registrado.

01:27:47.040 --> 01:27:50.250
E isso é muito melhor do que confiar em outras técnicas que você

01:27:50.250 --> 01:27:53.850
pode ver ou ter visto online em relação ao HTML porque também há

01:27:53.850 --> 01:27:54.640
este truque.

01:27:54.640 --> 01:27:56.410
Deixe-me voltar para a tela aqui.

01:27:56.410 --> 01:27:59.272
Deixe-me voltar para index.html, e você pode ter visto online,

01:27:59.272 --> 01:28:01.230
ou você pode eventualmente ver on-line que há

01:28:01.230 --> 01:28:03.570
outros atributos que você pode usar conforme necessário.

01:28:03.570 --> 01:28:06.760
Você pode literalmente dizer ao navegador, uh-uh, este campo é obrigatório.

01:28:06.760 --> 01:28:08.100
Você não pode deixar em branco.

01:28:08.100 --> 01:28:12.480
Se eu voltar para o navegador agora, recarregue e novamente presumo ser preguiçoso

01:28:12.480 --> 01:28:15.360
e eu não digito nenhum nome e clico em Registrar--

01:28:15.360 --> 01:28:16.500
Isso é legal.

01:28:16.500 --> 01:28:20.970
Agora o navegador está sendo um pouco mais útil para mim, dizendo não, não, não.

01:28:20.970 --> 01:28:21.940
Isso é necessário.

01:28:21.940 --> 01:28:23.192
Você tem que preencher isso.

01:28:23.192 --> 01:28:24.900
Mas, novamente, se você sabe o que está fazendo.

01:28:24.900 --> 01:28:28.080
OK, bem, eu discordo de sua exigência de um nome meu.

01:28:28.080 --> 01:28:29.440
Deixa eu entrar aqui.

01:28:29.440 --> 01:28:33.930
Deixe-me ir até esta tag, deixe-me excluir o atributo obrigatório,

01:28:33.930 --> 01:28:36.880
e agora eu deslizo.

01:28:36.880 --> 01:28:38.680
Mas eu não deslizei no servidor.

01:28:38.680 --> 01:28:40.710
E então há uma diferença aqui e uma distinção importante,

01:28:40.710 --> 01:28:43.330
e tantas pessoas no mundo real ainda estragam tudo.

01:28:43.330 --> 01:28:46.200
Há validação do lado do cliente, como realmente verificar

01:28:46.200 --> 01:28:48.960
que os dados sejam os esperados no lado do cliente, o navegador.

01:28:48.960 --> 01:28:50.730
E há validação do lado do servidor.

01:28:50.730 --> 01:28:53.785
E mesmo que a validação do lado do cliente, adicionando esse atributo necessário

01:28:53.785 --> 01:28:55.410
torna as coisas mais fáceis de usar, certo?

01:28:55.410 --> 01:28:56.790
Como se fosse um pequeno pop-up bonito.

01:28:56.790 --> 01:28:58.082
Ele me diz que é necessário.

01:28:58.082 --> 01:29:00.210
Parece melhor do que a versão anterior.

01:29:00.210 --> 01:29:01.920
Não é confiável.

01:29:01.920 --> 01:29:06.390
Você não pode confiar em nenhuma entrada que venha do usuário porque claramente

01:29:06.390 --> 01:29:11.120
com cerca de uma hora de CS50, eles podem aprender como transformar todas essas defesas

01:29:11.120 --> 01:29:11.620
desligado.

01:29:11.620 --> 01:29:14.700
Portanto, mesmo que você goste mais da interface do usuário do lado do cliente,

01:29:14.700 --> 01:29:18.630
você tem que, tem que, tem que fazer a validação do lado do servidor sempre.

01:29:18.630 --> 01:29:20.290
Os usuários não são confiáveis.

01:29:20.290 --> 01:29:23.100
E assim que qualquer aplicativo ou site que você criar se tornar popular,

01:29:23.100 --> 01:29:27.205
infelizmente, então você tem que lidar com todas as possibilidades adversárias

01:29:27.205 --> 01:29:27.705
também.

01:29:27.705 --> 01:29:31.680
AUDIÊNCIA: Existe alguma maneira de hackear dentro do lado do servidor

01:29:31.680 --> 01:29:34.480
informações ou potencialmente hackear [INAUDÍVEL] ou algo assim?

01:29:34.480 --> 01:29:35.688
DAVID MALAN: Uma boa pergunta.

01:29:35.688 --> 01:29:38.930
O adversário poderia acessar coisas confidenciais como app.py?

01:29:38.930 --> 01:29:40.520
Teoricamente não.

01:29:40.520 --> 01:29:43.100
Se o próprio Flask estiver com erros, então com certeza, talvez.

01:29:43.100 --> 01:29:46.580
Se você estiver executando algum outro software em seu servidor em seu laptop, com certeza,

01:29:46.580 --> 01:29:47.820
é possível.

01:29:47.820 --> 01:29:49.850
No entanto, se o seu servidor estiver configurado corretamente,

01:29:49.850 --> 01:29:52.580
teoricamente, eles não deveriam ter acesso a isso.

01:29:52.580 --> 01:29:54.680
Com isso dito, veremos em breve, ou você pode

01:29:54.680 --> 01:29:56.930
com seu projeto final se você fizer algo baseado na web,

01:29:56.930 --> 01:29:59.690
você nunca vai querer escrever nomes de usuários

01:29:59.690 --> 01:30:01.993
e senhas em seu código real.

01:30:01.993 --> 01:30:04.410
Você pode colocá-los no que chamamos de variáveis ​​de ambiente.

01:30:04.410 --> 01:30:06.243
Então, meio que na memória do computador, mas não

01:30:06.243 --> 01:30:09.110
no seu código caso você ou alguém estrague tudo,

01:30:09.110 --> 01:30:13.520
ainda há maneiras de se defender contra esses tipos de possibilidades,

01:30:13.520 --> 01:30:14.325
por mais magro.

01:30:14.325 --> 01:30:14.825
Sim.

01:30:14.825 --> 01:30:19.006
AUDIÊNCIA: [INAUDÍVEL] certificando-se de que o vôlei não foi registrado.

01:30:21.872 --> 01:30:23.080
DAVID MALAN: Uma boa pergunta.

01:30:23.080 --> 01:30:26.080
E isso volta aos primeiros princípios, assim como em C e em Python,

01:30:26.080 --> 01:30:29.110
assim que você retornar de uma função, é isso.

01:30:29.110 --> 01:30:31.540
Nada abaixo dessa linha de código é executado.

01:30:31.540 --> 01:30:34.480
E assim, para resumir a questão, embora eu esteja

01:30:34.480 --> 01:30:37.360
retornando esta falha.Modelo HTML, como

01:30:37.360 --> 01:30:40.270
estou me certificando de que ainda não colocamos vôlei acidentalmente

01:30:40.270 --> 01:30:41.770
nesse dicionário global?

01:30:41.770 --> 01:30:44.470
É porque, por exemplo, se você não me der um nome,

01:30:44.470 --> 01:30:48.190
na linha 22 no momento, estou retornando o modelo de falha e pronto.

01:30:48.190 --> 01:30:51.940
As linhas 23, 24, 25, 26, 27 nunca são executadas.

01:30:51.940 --> 01:30:54.820
Em particular, 26 nunca é executado, e isso é

01:30:54.820 --> 01:30:56.680
onde eu estaria salvando o nome.

01:30:56.680 --> 01:31:02.200
Da mesma forma, se obtivermos um esporte inválido que está em branco ou não

01:31:02.200 --> 01:31:06.280
na lista autoritativa original, retornamos falha.HTML

01:31:06.280 --> 01:31:07.510
como um modelo na linha 25.

01:31:07.510 --> 01:31:09.950
Nunca chegamos à linha 26.

01:31:09.950 --> 01:31:13.300
Portanto, tudo se resume a retornar e o que isso significa em Python também.

01:31:13.300 --> 01:31:15.020
Boa pergunta.

01:31:15.020 --> 01:31:17.970
Outras perguntas também?

01:31:17.970 --> 01:31:18.470
Não?

01:31:18.470 --> 01:31:23.150
Tudo bem, que tal fazermos mais um aprimoramento aqui.

01:31:23.150 --> 01:31:27.740
Porque o problema de armazenar tudo neste dicionário global

01:31:27.740 --> 01:31:29.930
pode ser o que?

01:31:29.930 --> 01:31:32.900
Temos tudo funcionando, finalmente, mas por que

01:31:32.900 --> 01:31:35.900
é provavelmente um dicionário global, não o lugar

01:31:35.900 --> 01:31:39.760
armazenar dados de registro de Frush IMs?

01:31:39.760 --> 01:31:41.335
Qual é a implicação disso?

01:31:41.335 --> 01:31:43.870
AUDIÊNCIA: Pode retardar todo o processo.

01:31:43.870 --> 01:31:45.170
DAVID MALAN: OK, pode atrasar todo o processo.

01:31:45.170 --> 01:31:46.878
Mas isso na verdade-- RAM é realmente bom.

01:31:46.878 --> 01:31:48.710
A memória geralmente é uma coisa boa.

01:31:48.710 --> 01:31:51.065
Portanto, não será um problema aqui.

01:31:51.065 --> 01:31:53.815
Por que eu não quero armazenar esses dados, porém, nessa variável?

01:31:57.040 --> 01:32:01.500
Talvez você possa inferir como consertei algo antes.

01:32:01.500 --> 01:32:02.430
Sim, na parte de trás.

01:32:02.430 --> 01:32:04.330
AUDIÊNCIA: [INAUDÍVEL]

01:32:04.330 --> 01:32:07.330
DAVID MALAN: Sim, fica-- é-- a memória é apagada.

01:32:07.330 --> 01:32:10.460
Lixo coletado, se preferir, assim que o Flask parar de funcionar.

01:32:10.460 --> 01:32:14.650
Então, se você apertar o controle C, você acabou de perder todos os seus calouros

01:32:14.650 --> 01:32:16.060
que se inscreveu no esporte.

01:32:16.060 --> 01:32:17.570
Provavelmente não é uma coisa boa.

01:32:17.570 --> 01:32:20.770
Eu fiz isso deliberadamente um momento atrás e apertei Control C porque eu fiz

01:32:20.770 --> 01:32:24.670
deseja limpar o dicionário, mas confiando que seu servidor nunca

01:32:24.670 --> 01:32:27.978
travar, e seu código sempre funcionará, e a energia nunca acabará,

01:32:27.978 --> 01:32:30.520
essa não é a maneira certa de criar qualquer tipo de aplicativo da web

01:32:30.520 --> 01:32:31.580
com dados persistentes.

01:32:31.580 --> 01:32:34.030
Provavelmente, o que queremos fazer é reintroduzir os CSVs

01:32:34.030 --> 01:32:36.100
e nós jogamos com aqueles em C e em Python.

01:32:36.100 --> 01:32:40.960
Poderia usar totalmente CSVs, mas agora também temos SQL à nossa disposição.

01:32:40.960 --> 01:32:43.820
E deixe-me propor que façamos isso em SQL.

01:32:43.820 --> 01:32:46.570
E para isso, deixe-me ir em frente e abrir uma versão do programa

01:32:46.570 --> 01:32:47.797
que escrevi com antecedência.

01:32:47.797 --> 01:32:49.630
Então deixe-me ir em frente e fechar esses modelos

01:32:49.630 --> 01:32:52.180
que vai parecer muito parecido, mas um pouco diferente

01:32:52.180 --> 01:32:54.160
daqueles que escrevi com antecedência.

01:32:54.160 --> 01:32:57.880
E deixe-me ir em frente e abrir nos dias de hoje...

01:32:57.880 --> 01:33:02.950
deixe-me ir para a fonte nove, deixe-me ir para as mensagens instantâneas, que tal...

01:33:02.950 --> 01:33:05.800
versão quatro, tecnicamente, nas versões online.

01:33:05.800 --> 01:33:08.870
E deixe-me ir em frente e abrir o app.py da seguinte maneira.

01:33:08.870 --> 01:33:12.370
Então aqui está uma versão já feita que faz algo um pouco diferente.

01:33:12.370 --> 01:33:15.110
Bem no topo, estou importando a biblioteca CS50 SQL,

01:33:15.110 --> 01:33:17.110
que você deve se lembrar que usamos algumas semanas

01:33:17.110 --> 01:33:19.930
passe apenas para escrever Python que fala com um banco de dados SQL.

01:33:19.930 --> 01:33:22.660
E este parece um momento oportuno para trazer essa ideia de volta.

01:33:22.660 --> 01:33:25.330
Aqui na linha oito, estou criando uma variável de banco de dados

01:33:25.330 --> 01:33:30.280
que abre um arquivo chamado frush IMs.db usando a sintaxe que vimos antes.

01:33:30.280 --> 01:33:33.758
Eu criei este arquivo Frush IMsdb antes da aula

01:33:33.758 --> 01:33:35.800
apenas para que tenhamos algumas colunas nas quais

01:33:35.800 --> 01:33:37.730
para armazenar nomes e esportes e tal.

01:33:37.730 --> 01:33:41.200
Aqui está o mesmo array global, uma lista global chamada esportes,

01:33:41.200 --> 01:33:44.470
e vamos ver o que está acontecendo lá embaixo.

01:33:44.470 --> 01:33:47.230
Se eu rolar para baixo até o índice, isso é o mesmo

01:33:47.230 --> 01:33:49.960
como antes, enquanto escrevíamos juntos na hora.

01:33:49.960 --> 01:33:53.050
Vamos pular o cancelamento do registro por um momento e ir agora para o registro.

01:33:53.050 --> 01:33:55.888
Este é um pouco diferente, mas vamos ver o que fiz.

01:33:55.888 --> 01:33:58.430
Tenho alguns comentários aqui porque escrevi com antecedência.

01:33:58.430 --> 01:34:01.472
E acho que essa lógica é praticamente a mesma, embora eu a tenha reforçado.

01:34:01.472 --> 01:34:05.770
E estou fazendo duas perguntas ao mesmo tempo usando na linha 38, a palavra-chave ou aqui.

01:34:05.770 --> 01:34:07.810
Só pra dizer, se não tem nome, ou o esporte

01:34:07.810 --> 01:34:10.540
não está no esporte, é o que vamos chamar, agora, de um fracasso.

01:34:10.540 --> 01:34:15.280
Mas o que é divertido agora é que na linha 42, estou usando o CS50 SQL

01:34:15.280 --> 01:34:18.130
biblioteca para executar algum SQL real.

01:34:18.130 --> 01:34:22.630
E vou inserir em uma tabela chamada registrants duas colunas--

01:34:22.630 --> 01:34:23.620
nome e esporte.

01:34:23.620 --> 01:34:24.970
Quais nomes e esportes?

01:34:24.970 --> 01:34:28.720
Bem, esses dois valores com espaços reservados, conectando nome e esporte.

01:34:28.720 --> 01:34:30.220
Observe que estou usando os pontos de interrogação.

01:34:30.220 --> 01:34:33.400
Absolutamente necessário para não recebermos uma daquelas injeção de SQL

01:34:33.400 --> 01:34:35.410
ataques porque isso também pode ser possível

01:34:35.410 --> 01:34:38.380
se alguém digitou algumas palavras perigosas ou palavras-chave como excluir,

01:34:38.380 --> 01:34:40.720
ou aspas simples ou ponto-e-vírgula no formulário.

01:34:40.720 --> 01:34:43.690
Aqui estou deixando a biblioteca higienizar os dados.

01:34:43.690 --> 01:34:45.730
E então este é um truque que ainda não vimos,

01:34:45.730 --> 01:34:48.190
e realmente vai começar a amarrar as coisas.

01:34:48.190 --> 01:34:52.960
Também posso usar uma função de redirecionamento no Flask que tem o efeito de fazer

01:34:52.960 --> 01:34:56.710
o truque, se você quiser, safetyschool.org novamente,

01:34:56.710 --> 01:35:01.630
por meio do qual, após o registro do usuário, se eu quiser mostrá-los automaticamente agora

01:35:01.630 --> 01:35:04.217
todos que estão registrados em /registrants,

01:35:04.217 --> 01:35:07.300
Eu não tenho que esperar manualmente que eles mudem o URL como eu tenho feito

01:35:07.300 --> 01:35:08.680
fazendo nos últimos minutos.

01:35:08.680 --> 01:35:11.920
Posso apenas redirecioná-los para qualquer lugar que eu queira no meu aplicativo.

01:35:11.920 --> 01:35:15.740
Ou diabos, eu poderia redirecioná-los para qualquer URL na internet usando esta função

01:35:15.740 --> 01:35:16.240
chamar.

01:35:16.240 --> 01:35:18.670
E é apenas uma boa maneira de enviá-los para uma rota diferente

01:35:18.670 --> 01:35:21.580
se você quiser que eles vejam, neste caso, esses registrantes.

01:35:21.580 --> 01:35:22.630
Então deixe-me fazer isso.

01:35:22.630 --> 01:35:26.470
No mesmo diretório, deixe-me aumentar o tamanho da janela do meu terminal.

01:35:26.470 --> 01:35:32.380
Deixe-me fazer SQLite três de Frosh IMs.db e digite .schema.

01:35:32.380 --> 01:35:34.840
E você pode realmente ver que ele se encaixa em duas linhas

01:35:34.840 --> 01:35:38.600
aqui que cada registrante tem um ID--

01:35:38.600 --> 01:35:40.460
que será atribuído automaticamente 1, 2,

01:35:40.460 --> 01:35:43.210
3, em cima-- um nome que não é um texto nulo,

01:35:43.210 --> 01:35:45.025
e um esporte que também é o mesmo.

01:35:45.025 --> 01:35:47.650
E a chave primária será apenas esse identificador exclusivo.

01:35:47.650 --> 01:35:49.300
Para que eu fiz com antecedência.

01:35:49.300 --> 01:35:52.990
Mas se eu selecionar a estrela do ponto e vírgula dos registrantes,

01:35:52.990 --> 01:35:56.140
não há ninguém registrado atualmente para nenhum esporte.

01:35:56.140 --> 01:35:58.250
Mas vamos tentar agora executar isso.

01:35:58.250 --> 01:36:02.350
Deixe-me prosseguir e encerrar minha versão antiga, que escrevemos juntos.

01:36:02.350 --> 01:36:03.550
E eu vou fechar essa guia.

01:36:03.550 --> 01:36:07.630
Deixe-me executar o Flask nesta versão quatro aqui.

01:36:07.630 --> 01:36:09.910
Tudo bem, vou ver uma saída semelhante.

01:36:09.910 --> 01:36:11.530
Vou abrir a URL agora.

01:36:11.530 --> 01:36:14.230
E você verá que fiz algumas mudanças antes.

01:36:14.230 --> 01:36:18.740
Em vez de usar um menu de seleção, usei os chamados botões de opção agora,

01:36:18.740 --> 01:36:20.740
que é uma referência aos botões de rádio da velha escola

01:36:20.740 --> 01:36:23.112
que eram mutuamente exclusivos nos carros da época.

01:36:23.112 --> 01:36:24.320
E veremos como fazer isso.

01:36:24.320 --> 01:36:26.440
Mas é apenas uma alternativa para um menu selecionado.

01:36:26.440 --> 01:36:30.200
E vou prosseguir e digitar meu nome novamente aqui.

01:36:30.200 --> 01:36:34.150
Vou fazer David, vou jogar futebol selecionando este botão de opção,

01:36:34.150 --> 01:36:36.310
e vou clicar em Registrar agora.

01:36:36.310 --> 01:36:37.630
E observe o que aconteceu.

01:36:37.630 --> 01:36:42.070
A formatação é um pouco feia, mas também era assim há 20 anos.

01:36:42.070 --> 01:36:47.470
Aqui eu tenho agora na rota /registrants, em vez de uma lista não ordenada,

01:36:47.470 --> 01:36:49.450
Estou apenas usando uma tabela HTML simples.

01:36:49.450 --> 01:36:51.980
Vou mostrar a vocês como é daqui a pouco também.

01:36:51.980 --> 01:36:53.960
E mostrarei a você este botão de cancelamento de registro,

01:36:53.960 --> 01:36:55.870
que é meio desnecessariamente grande.

01:36:55.870 --> 01:36:58.090
Eu também tenho funcionalidade, veremos em breve,

01:36:58.090 --> 01:37:01.370
para saber como você também pode cancelar o registro de alguém de um esporte.

01:37:01.370 --> 01:37:03.790
Portanto, tire seu nome da disputa.

01:37:03.790 --> 01:37:06.090
Bem, deixe-me voltar para a janela do meu terminal aqui.

01:37:06.090 --> 01:37:10.110
E vou clicar no sinal de mais para me dar um segundo terminal para que eu possa ir

01:37:10.110 --> 01:37:12.870
de volta à fonte nove mensagens instantâneas Frosh quatro.

01:37:12.870 --> 01:37:16.440
Vou fazer o SQLite do Frush IMs.db.

01:37:16.440 --> 01:37:19.830
Vou selecionar a estrela dos inscritos agora,

01:37:19.830 --> 01:37:24.720
e agora você vai ver que de fato tem o David inscrito no futebol.

01:37:24.720 --> 01:37:29.670
E, de fato, se eu sair do programa Flask com Control C e executá-lo novamente,

01:37:29.670 --> 01:37:32.820
não é grande coisa porque a próxima versão do Flask

01:37:32.820 --> 01:37:34.480
usará apenas o banco de dados também.

01:37:34.480 --> 01:37:37.740
Então estou persistindo mantendo os dados no SQLite,

01:37:37.740 --> 01:37:41.850
enquanto na verdade estou pegando usando meu código Python no Flask.

01:37:41.850 --> 01:37:45.540
Tudo bem, vamos colocar mais uma pessoa aqui para podermos deletar um de nós também.

01:37:45.540 --> 01:37:49.823
Carter para basquete, registre-se e agora vemos nós dois aqui.

01:37:49.823 --> 01:37:51.490
Tudo bem, então vamos ver como fizemos isso.

01:37:51.490 --> 01:37:55.230
Vamos voltar ao VS Code, deixe-me encolher a janela do meu terminal.

01:37:55.230 --> 01:37:58.470
Deixe-me entrar no--

01:37:58.470 --> 01:38:02.100
na verdade, vamos para o diretório de modelos,

01:38:02.100 --> 01:38:05.880
e vejamos, por exemplo, index.html.

01:38:05.880 --> 01:38:08.610
Anteriormente, estávamos usando um menu de seleção.

01:38:08.610 --> 01:38:11.790
Acontece que os botões de opção usam a tag de entrada,

01:38:11.790 --> 01:38:16.980
mas em vez de ter uma entrada de type=text, como para o nome do humano,

01:38:16.980 --> 01:38:18.600
você tem type=radio.

01:38:18.600 --> 01:38:20.790
E desde que cada um dos seus botões de opção

01:38:20.790 --> 01:38:23.190
tem o mesmo nome, o mesmo nome, o mesmo nome,

01:38:23.190 --> 01:38:25.210
é isso que os torna mutuamente exclusivos.

01:38:25.210 --> 01:38:27.840
Então, marcar um botão de opção desliga os outros

01:38:27.840 --> 01:38:29.370
porque têm o mesmo nome.

01:38:29.370 --> 01:38:31.980
O valor que desejo atribuir a cada um desses botões de opção

01:38:31.980 --> 01:38:33.970
é apenas o espaço reservado do esporte.

01:38:33.970 --> 01:38:35.720
Isso é o que o humano vê na tela.

01:38:35.720 --> 01:38:37.512
Portanto, é quase o mesmo que o menu Selecionar,

01:38:37.512 --> 01:38:39.180
apenas parece esteticamente diferente.

01:38:39.180 --> 01:38:40.530
Mas há o meu mesmo botão.

01:38:40.530 --> 01:38:42.450
Então essa é toda a diferença que fiz lá.

01:38:42.450 --> 01:38:46.350
E eu adicionei uma tag de título, H1, apenas para dizer registre-se para deixar claro o que é.

01:38:46.350 --> 01:38:50.100
Mas vamos dar uma olhada em outro arquivo.

01:38:50.100 --> 01:38:54.930
Sendo este agora, que tal a rota /registrants.

01:38:54.930 --> 01:38:58.770
Então, se eu abrir registrants.HTML aqui agora,

01:38:58.770 --> 01:39:01.320
é muito mais detalhado do que minha lista não ordenada.

01:39:01.320 --> 01:39:03.180
Mas isso é apenas um HTML chato.

01:39:03.180 --> 01:39:07.410
Aqui está minha etiqueta de tabela, cabeçalho da tabela, linha da tabela, cabeçalho da tabela.

01:39:07.410 --> 01:39:10.560
Isso torna as coisas em negrito como a primeira linha da tabela.

01:39:10.560 --> 01:39:12.290
Nome, esporte, são minhas duas colunas.

01:39:12.290 --> 01:39:14.790
Eu tenho uma terceira coluna vazia apenas para que eu possa ajustar esse botão,

01:39:14.790 --> 01:39:16.170
como logo veremos novamente.

01:39:16.170 --> 01:39:18.070
Corpo em T para corpo de mesa.

01:39:18.070 --> 01:39:21.180
Aqui está o mesmo truque de loop novamente para que eu possa produzir

01:39:21.180 --> 01:39:23.640
para cada registrante, uma linha inteira da tabela.

01:39:23.640 --> 01:39:26.610
E há uma forma estranha ali, mas voltaremos a isso.

01:39:26.610 --> 01:39:30.870
Mas há o nome do registrante, há os esportes do registrante.

01:39:30.870 --> 01:39:34.140
Mas observe a sintaxe ligeiramente diferente aqui.

01:39:34.140 --> 01:39:37.410
Lembre-se de que a seleção do CS50--

01:39:37.410 --> 01:39:42.060
A função execute do CS50, quando ele retorna para você uma lista de dicionários,

01:39:42.060 --> 01:39:46.000
você pode acessar as colunas individuais por meio dessas chaves.

01:39:46.000 --> 01:39:48.060
Então, vamos para a rota /registrants.

01:39:48.060 --> 01:39:52.440
Deixe-me voltar ao app.py, role para baixo aqui e é realmente super simples.

01:39:52.440 --> 01:39:57.790
Aqui eu tenho uma rota /registrants que primeiro executa select star from

01:39:57.790 --> 01:39:58.290
registrantes.

01:39:58.290 --> 01:39:59.550
Então, apenas coisas velhas de SQL.

01:39:59.550 --> 01:40:01.650
Dê-me todos da mesa dos inscritos,

01:40:01.650 --> 01:40:04.650
deixe-me renderizar o modelo chamado registrants.HTML

01:40:04.650 --> 01:40:07.950
e apenas passar nesta lista de dicionários.

01:40:07.950 --> 01:40:10.200
E ainda não fizemos isso, mas se você voltar

01:40:10.200 --> 01:40:16.300
para registrants.HTML, como você itera sobre cada dicionário dessa lista?

01:40:16.300 --> 01:40:19.230
Bem, a sintaxe é apenas para registrantes e registrantes.

01:40:19.230 --> 01:40:24.570
Isso torna este dicionário um de cada vez na lista, assim como em Python.

01:40:24.570 --> 01:40:28.590
Então registrant.name e registrant.sport são apenas outra sintaxe

01:40:28.590 --> 01:40:31.560
para usar a notação de colchetes.

01:40:31.560 --> 01:40:34.350
É apenas um pouco mais limpo e um pouco mais

01:40:34.350 --> 01:40:37.170
sucinto do que ter aspas e colchetes em todos os lugares.

01:40:37.170 --> 01:40:40.340
E o resto é apenas HTML.

01:40:40.340 --> 01:40:43.670
Então, o que acontece agora se eu quiser...

01:40:43.670 --> 01:40:46.440
Carter foi cortado do time de basquete, por assim dizer.

01:40:46.440 --> 01:40:48.030
Então, como fazemos isso?

01:40:48.030 --> 01:40:51.830
Bem, queremos clicar neste botão, cancelar o registro, ao lado do nome de Carter.

01:40:51.830 --> 01:40:53.330
Mas como isso funciona?

01:40:53.330 --> 01:40:55.400
E pense agora em qualquer site que você visitou

01:40:55.400 --> 01:40:59.030
que tem algo como um carrinho de compras onde você pode remover coisas

01:40:59.030 --> 01:41:02.780
do seu carrinho, ou atualize as quantidades, ou adicione mais quantidades às suas compras

01:41:02.780 --> 01:41:04.710
carrinho na Amazon ou qualquer outra coisa.

01:41:04.710 --> 01:41:08.450
Bem, vamos ver o HTML que meu aplicativo cuspiu.

01:41:08.450 --> 01:41:10.700
Vamos realmente olhar para isso aqui e nós vamos

01:41:10.700 --> 01:41:15.050
veja o seguinte-- veremos que temos aqui no HTML

01:41:15.050 --> 01:41:19.280
que chegou ao usuário, não só David na primeira coluna, futebol

01:41:19.280 --> 01:41:23.810
e o segundo, observe que meu formulário registrants.HTML também está cuspindo

01:41:23.810 --> 01:41:26.660
uma minúscula forma de teia própria.

01:41:26.660 --> 01:41:30.080
É feio, mas por enquanto só me preocupo com sua funcionalidade.

01:41:30.080 --> 01:41:32.090
E observe o que estou fazendo aqui.

01:41:32.090 --> 01:41:36.950
Cada registrante neste banco de dados recebe seu próprio botão de cancelamento de registro.

01:41:36.950 --> 01:41:40.220
E esse formulário tem um botão que diz cancelar o registro.

01:41:40.220 --> 01:41:42.710
Mas observe o que mais cada uma dessas formas tem.

01:41:42.710 --> 01:41:46.130
Não há caixa de texto, não há menu suspenso, não há botões de opção.

01:41:46.130 --> 01:41:51.300
Em vez disso, você tem um campo de entrada oculto aqui.

01:41:51.300 --> 01:41:56.330
Portanto, existe uma maneira com HTML de ter um formulário que enviará informações,

01:41:56.330 --> 01:42:00.320
mas você não precisa dar ao usuário a capacidade de alterar essas informações.

01:42:00.320 --> 01:42:04.400
Você pode simplesmente ir em frente e colocá-lo dentro do formulário de forma invisível, se quiser.

01:42:04.400 --> 01:42:05.960
Escondido na moda.

01:42:05.960 --> 01:42:09.170
E então o que vai acontecer é se eu clicar no botão cancelar o registro

01:42:09.170 --> 01:42:12.950
ao lado de Carter, sua chave primária é dois.

01:42:12.950 --> 01:42:15.230
Em vez disso, o meu é um.

01:42:15.230 --> 01:42:18.380
Então, o que vai acontecer se eu clicar no botão de cancelamento de registro?

01:42:18.380 --> 01:42:25.850
Ele envia um formulário com um parâmetro de ID cujo valor é dois,

01:42:25.850 --> 01:42:28.010
e o envia para a rota de cancelamento de registro.

01:42:28.010 --> 01:42:29.160
Então, o que isso significa?

01:42:29.160 --> 01:42:31.910
Bem, se eu for para o VS Code e for para app.py, vamos

01:42:31.910 --> 01:42:35.390
veja a raiz de cancelamento de registro que eu pulei.

01:42:35.390 --> 01:42:40.880
Portanto, se você acessar a rota de cancelamento de registro via POST, esse código será chamado.

01:42:40.880 --> 01:42:46.010
Pego no request.form o ID que foi enviado de forma oculta.

01:42:46.010 --> 01:42:49.010
Se realmente existe um ID, ou seja, não está em branco, não é zero,

01:42:49.010 --> 01:42:51.650
é um número real como 1, 2, 3 ou mais,

01:42:51.650 --> 01:42:57.440
Eu executo a exclusão dos registrantes onde ID = esse valor

01:42:57.440 --> 01:42:58.880
com um espaço reservado de ponto de interrogação.

01:42:58.880 --> 01:43:02.120
E então redireciono o usuário de volta aos registrantes.

01:43:02.120 --> 01:43:05.600
Agora, se eu voltar a este formulário aqui, clico em cancelar o registro,

01:43:05.600 --> 01:43:07.250
veremos isso em ação.

01:43:07.250 --> 01:43:08.960
Foi-se agora Carter.

01:43:08.960 --> 01:43:11.990
E, de fato, se eu voltar para a janela do meu terminal aqui,

01:43:11.990 --> 01:43:17.990
Eu abro o SQLite três de Frosh IMs.db e executo novamente select star from registrants,

01:43:17.990 --> 01:43:20.010
Carter agora se foi.

01:43:20.010 --> 01:43:23.330
Novamente, usando formulários HTML muito simples, você

01:43:23.330 --> 01:43:26.420
pode obter botões, links e outros mecanismos de interface do usuário

01:43:26.420 --> 01:43:28.830
para fazer coisas no servidor que você deseja.

01:43:28.830 --> 01:43:30.590
Mas há um perigo aqui.

01:43:30.590 --> 01:43:34.760
Isso agora é realmente significado-- este exemplo como um site administrativo

01:43:34.760 --> 01:43:39.710
como se fosse há 20 anos apenas para nós, funcionários internos, estarmos fazendo as coisas.

01:43:39.710 --> 01:43:44.820
Tecnicamente isso é perigoso, o que acabei de fazer também.

01:43:44.820 --> 01:43:49.740
Mesmo que a identidade de Carter seja dois e escondida, e a minha seja uma e escondida,

01:43:49.740 --> 01:43:52.170
o que isso poderia permitir a um adversário fazer se eles

01:43:52.170 --> 01:43:53.970
tinha acesso de administrador ao mesmo site?

01:43:57.470 --> 01:43:58.175
Alguma ideia?

01:44:01.775 --> 01:44:02.275
Sim.

01:44:02.275 --> 01:44:04.140
AUDIÊNCIA: Eles poderiam alterar o valor e depois cancelar o registro?

01:44:04.140 --> 01:44:04.650
DAVID MALAN: Sim.

01:44:04.650 --> 01:44:06.817
Eles podem alterar o valor desse atributo oculto

01:44:06.817 --> 01:44:10.200
abrindo as ferramentas do desenvolvedor do Chrome, altere o número no HTML.

01:44:10.200 --> 01:44:13.540
Eles podem deletar qualquer um, cancelar o registro de quem quiserem do banco de dados.

01:44:13.540 --> 01:44:16.980
Agora, neste caso, afirmo que está tudo bem porque isso é apenas

01:44:16.980 --> 01:44:19.620
significava para nós, funcionários que praticavam esportes naquela época.

01:44:19.620 --> 01:44:21.190
Mas é de fato um risco.

01:44:21.190 --> 01:44:23.250
Não seria bom se pudéssemos realmente

01:44:23.250 --> 01:44:26.850
garantir que apenas os usuários autorizados

01:44:26.850 --> 01:44:29.370
estão autorizados a executar determinadas ações?

01:44:29.370 --> 01:44:32.130
Acho que, para esse recurso, estamos realmente

01:44:32.130 --> 01:44:35.350
vai precisar introduzir algo um pouco mais.

01:44:35.350 --> 01:44:37.590
E então aqui, é claro, está uma oportunidade

01:44:37.590 --> 01:44:41.010
para falar brevemente sobre, realmente, o que você e eu fazemos o dia todo, todos os dias.

01:44:41.010 --> 01:44:43.260
Entramos em um ou mais sites ou aplicativos,

01:44:43.260 --> 01:44:45.990
ou pelo menos até você sair automaticamente

01:44:45.990 --> 01:44:47.260
e você tem que fazer isso de novo.

01:44:47.260 --> 01:44:49.290
Por exemplo, aqui está uma captura de tela do Gmail.

01:44:49.290 --> 01:44:51.957
Quando você digita seu nome de usuário, você digita sua senha, talvez

01:44:51.957 --> 01:44:54.900
seu código de dois fatores que é enviado por mensagem de texto ou enviado para o seu telefone,

01:44:54.900 --> 01:44:55.980
então você está logado.

01:44:55.980 --> 01:44:58.830
E, felizmente, você não é solicitado a fazer login novamente, normalmente,

01:44:58.830 --> 01:45:02.880
por várias horas, dias ou semanas, dependendo do site.

01:45:02.880 --> 01:45:04.860
Como o Gmail mantém você conectado por muito tempo.

01:45:04.860 --> 01:45:08.700
Seu banco provavelmente desconecta você dentro de uma hora ou mais por questões de segurança.

01:45:08.700 --> 01:45:11.220
Isso é totalmente configurável no servidor.

01:45:11.220 --> 01:45:14.340
Mas como o Gmail sabe, como o Google sabe

01:45:14.340 --> 01:45:17.130
que mesmo quando você está verificando e-mails diferentes de novo e de novo,

01:45:17.130 --> 01:45:20.940
e, novamente, como eles sabem que você ainda é a mesma pessoa que se conectou?

01:45:20.940 --> 01:45:24.600
Bem, acontece que usando esses mesmos blocos de construção de hoje...

01:45:24.600 --> 01:45:27.190
HTTP e HTML e mais--

01:45:27.190 --> 01:45:30.660
você pode realmente implementar a noção de um recurso de login

01:45:30.660 --> 01:45:34.988
fazendo o equivalente a algo com algo chamado cookies.

01:45:34.988 --> 01:45:36.780
Essencialmente o que acontece quando você loga pela primeira vez

01:45:36.780 --> 01:45:39.210
em um site pela primeira vez com sucesso

01:45:39.210 --> 01:45:42.030
com seu nome de usuário e senha, um cookie, por assim dizer,

01:45:42.030 --> 01:45:43.260
é plantado em seu computador.

01:45:43.260 --> 01:45:46.020
E metaforicamente, é como pegar um carimbo de mão,

01:45:46.020 --> 01:45:48.240
e sua mão agora está carimbada - neste caso,

01:45:48.240 --> 01:45:51.030
um rosto sorridente - para que todas as vezes que você

01:45:51.030 --> 01:45:53.580
clique em um link no mesmo site-- google.com,

01:45:53.580 --> 01:45:55.800
gmail.com, qualquer coisa-- sem o seu conhecimento,

01:45:55.800 --> 01:45:58.710
seu navegador está constantemente apresentando esse carimbo de mão.

01:45:58.710 --> 01:46:01.368
Assim como ir a um clube, ou um parque de diversões, ou algo assim

01:46:01.368 --> 01:46:03.660
assim, onde eles não querem verificar sua identidade novamente.

01:46:03.660 --> 01:46:04.860
Eles não querem verificar o seu bilhete novamente,

01:46:04.860 --> 01:46:07.440
eles só querem ver rapidamente o mesmo carimbo de mão.

01:46:07.440 --> 01:46:10.350
E essa é uma das coisas que um navegador está sempre

01:46:10.350 --> 01:46:12.000
fazendo por você uma vez que você está logado.

01:46:12.000 --> 01:46:16.350
Quaisquer cookies que tenham sido plantados, por assim dizer, em seu Mac, PC ou telefone,

01:46:16.350 --> 01:46:20.190
são constantemente representados no site toda vez que você clica em um link

01:46:20.190 --> 01:46:22.590
ou faça outra solicitação a esse site.

01:46:22.590 --> 01:46:26.100
E mecanicamente como isso funciona, não apenas metaforicamente em tinta,

01:46:26.100 --> 01:46:27.840
essencialmente é isso que acontece.

01:46:27.840 --> 01:46:32.160
Aqui está um exemplo de uma solicitação HTTP para algo como o Gmail.

01:46:32.160 --> 01:46:34.560
E suponha, por exemplo, que você tenha feito login.

01:46:34.560 --> 01:46:38.460
Normalmente, desde a semana passada, dissemos que voltando do servidor

01:46:38.460 --> 01:46:42.780
seria outro envelope virtual contendo uma mensagem 200 OK, e então

01:46:42.780 --> 01:46:46.440
a página da web real, ou a foto de um gato, ou o que quer que seja.

01:46:46.440 --> 01:46:50.250
Mas o Google também pode, se eles verificarem que você tem algum nome de usuário

01:46:50.250 --> 01:46:52.500
e senha inseridos corretamente, eles podem fazer

01:46:52.500 --> 01:46:54.570
o equivalente a carimbar sua mão.

01:46:54.570 --> 01:46:57.570
E a maneira como eles fazem isso é enviar uma linha adicional

01:46:57.570 --> 01:47:01.380
de texto nesse envelope virtual do servidor para o seu navegador,

01:47:01.380 --> 01:47:04.860
literalmente usando outro cabeçalho HTTP.

01:47:04.860 --> 01:47:08.700
Não é o tipo de conteúdo-- que apenas mundano diz a você que tipo de conteúdo

01:47:08.700 --> 01:47:14.640
voltou-- eles literalmente enviam um cabeçalho HTTP chamado set-cookie.

01:47:14.640 --> 01:47:18.540
E então eles definem um par de valores-chave em seu Mac ou PC.

01:47:18.540 --> 01:47:21.840
Este é o equivalente técnico deste carimbo de mão sorridente.

01:47:21.840 --> 01:47:24.510
E o que seu computador foi projetado para fazer--

01:47:24.510 --> 01:47:27.990
porque seu computador e navegador de internet devem implementar

01:47:27.990 --> 01:47:29.160
HTTP--

01:47:29.160 --> 01:47:32.745
sempre que você clicar em outro link no Gmail ou clicar em outro e-mail,

01:47:32.745 --> 01:47:36.690
ou algo semelhante, seu navegador sem que você saiba, apresenta esse carimbo de mão.

01:47:36.690 --> 01:47:39.600
E como ele faz isso tecnicamente está no envelope

01:47:39.600 --> 01:47:42.570
envia para o Google a partir do seu navegador, não

01:47:42.570 --> 01:47:47.860
enviar set-cookie apenas envia cookie: e exatamente a mesma coisa.

01:47:47.860 --> 01:47:51.540
E desde que o Google seja inteligente e tenha um banco de dados ou algo assim

01:47:51.540 --> 01:47:54.210
de todos os valores da sessão--

01:47:54.210 --> 01:47:58.800
sessão é o termo técnico para essa manutenção de informações em HTTP.

01:47:58.800 --> 01:48:00.720
Enquanto o Google tiver um grande banco de dados que

01:48:00.720 --> 01:48:05.010
sabe que meu valor de cookie é 1, 2, 3 e seu valor de cookie é 4, 5, 6,

01:48:05.010 --> 01:48:08.970
eles podem inferir a partir deste carimbo de mão virtual

01:48:08.970 --> 01:48:11.190
cujos e-mails eles deveriam mostrar.

01:48:11.190 --> 01:48:13.330
O meu ou o seu ou algo parecido.

01:48:13.330 --> 01:48:14.980
Portanto, isso é apenas arranhar a superfície.

01:48:14.980 --> 01:48:19.620
Mas se eu realmente quiser permitir que apenas Carter cancele seu registro,

01:48:19.620 --> 01:48:22.320
Eu só tenho que ter certeza de que eu registrei ele de alguma forma--

01:48:22.320 --> 01:48:24.000
nome de usuário, senha, tudo isso.

01:48:24.000 --> 01:48:27.390
Eu carimbo sua mão, ou realmente, coloco um biscoito em seu computador.

01:48:27.390 --> 01:48:30.720
E somente se o cookie dele estiver alinhado com o do usuário

01:48:30.720 --> 01:48:36.100
Identidade que ele está tentando cancelar, caso tenha permissão para fazê-lo.

01:48:36.100 --> 01:48:37.930
Então tudo isso é bem possível.

01:48:37.930 --> 01:48:40.027
E, de fato, o termo técnico para isso é sessão.

01:48:40.027 --> 01:48:42.360
E o que pensamos que faríamos em nosso tempo restante hoje,

01:48:42.360 --> 01:48:46.620
mostrar-lhe alguns exemplos de como exatamente alguns dos sites mais familiares

01:48:46.620 --> 01:48:49.020
funcionalidade é implementada hoje, algumas das quais

01:48:49.020 --> 01:48:53.220
você usará em seu próprio conjunto de problemas nove, que será uma rede

01:48:53.220 --> 01:48:55.330
app ou talvez até mesmo seu projeto final.

01:48:55.330 --> 01:48:57.010
Então deixe-me ir em frente e fazer isso.

01:48:57.010 --> 01:49:00.930
Deixe-me fechar minhas guias anteriores e todas as mensagens instantâneas congeladas e vamos prosseguir

01:49:00.930 --> 01:49:03.840
para implementar alguma noção de login.

01:49:03.840 --> 01:49:06.630
Daqui a pouco, mudarei para o VS Code,

01:49:06.630 --> 01:49:10.620
e o que vou fazer é, de fato, em meu diretório source nine,

01:49:10.620 --> 01:49:12.730
Vou entrar em um diretório de login.

01:49:12.730 --> 01:49:15.630
E se eu digitar ls aqui, você verá app.py,

01:49:15.630 --> 01:49:18.600
requirements.txt, que se refere apenas às bibliotecas que eu

01:49:18.600 --> 01:49:21.887
deseja instalar automaticamente e uma pasta de modelos também.

01:49:21.887 --> 01:49:23.970
Vou seguir em frente e parar o servidor anterior

01:49:23.970 --> 01:49:25.860
e fechar a janela do terminal, e eu vou

01:49:25.860 --> 01:49:28.440
para abrir esta versão do app.py.

01:49:28.440 --> 01:49:30.540
Portanto, há algumas novas linhas aqui.

01:49:30.540 --> 01:49:33.030
E daremos a você essas linhas para o conjunto de problemas nove,

01:49:33.030 --> 01:49:36.480
mas eu tenho algumas das coisas familiares aqui, incluindo este novo redirecionamento

01:49:36.480 --> 01:49:37.590
função que acabamos de usar.

01:49:37.590 --> 01:49:41.130
E eu tenho uma variável de sessão que vem com o Flask também.

01:49:41.130 --> 01:49:43.380
Então, o que é bom novamente sobre o Flask é que ele lida

01:49:43.380 --> 01:49:45.150
com todas essas coisas de biscoito para você.

01:49:45.150 --> 01:49:46.450
Ele define o cookie.

01:49:46.450 --> 01:49:47.520
Ele verifica o cookie.

01:49:47.520 --> 01:49:50.370
E o que o Flask faz por você é que ele lhe dá

01:49:50.370 --> 01:49:54.690
a abstração de uma variável chamada sessão para que qualquer coisa

01:49:54.690 --> 01:49:57.870
você coloca a variável de sessão, que é um dicionário,

01:49:57.870 --> 01:50:00.210
estará lá de novo, e de novo, e de novo

01:50:00.210 --> 01:50:02.070
sempre que esse mesmo usuário voltar.

01:50:02.070 --> 01:50:04.590
Uma sessão é como você implementa, essencialmente,

01:50:04.590 --> 01:50:07.140
o proverbial carrinho de compras.

01:50:07.140 --> 01:50:10.170
Se eu estou logado na Amazon, você está logado na Amazon,

01:50:10.170 --> 01:50:13.590
A Amazon sabe qual de nós é qual por meio desse cookie.

01:50:13.590 --> 01:50:17.460
E a Amazon, se estiver usando Flask, fornece ao programador

01:50:17.460 --> 01:50:19.050
com um dicionário chamado sessão.

01:50:19.050 --> 01:50:22.020
E os frascos garantem que, quando Carter estiver visitando o local,

01:50:22.020 --> 01:50:24.510
o código usa seu objeto de sessão.

01:50:24.510 --> 01:50:27.660
Quando estou visitando o site, ele usa meu objeto de sessão.

01:50:27.660 --> 01:50:29.760
Mas tudo é implementado com esses mesmos cookies.

01:50:29.760 --> 01:50:31.677
Este é o mesmo de antes.

01:50:31.677 --> 01:50:34.260
Essas linhas são novas e você as verá no conjunto de problemas nove.

01:50:34.260 --> 01:50:37.770
É assim que habilitamos as sessões em um aplicativo da web.

01:50:37.770 --> 01:50:39.690
E vou apenas acenar com as mãos para o detalhe.

01:50:39.690 --> 01:50:41.940
Há diferentes maneiras de implementar sessões,

01:50:41.940 --> 01:50:44.730
se você usa cookies no servidor, cookies no navegador,

01:50:44.730 --> 01:50:45.630
ou outras coisas.

01:50:45.630 --> 01:50:49.440
Eles apenas garantem que estamos armazenando as informações da sessão

01:50:49.440 --> 01:50:52.090
o carrinho de compras no próprio servidor.

01:50:52.090 --> 01:50:54.640
Agora aqui em baixo, vamos em frente e fazer isso.

01:50:54.640 --> 01:50:56.700
Vamos executar o Flask.

01:50:56.700 --> 01:51:00.060
Corra para eu ver o que esse app faz.

01:51:00.060 --> 01:51:03.270
Se eu fizer isso e visitar o URL gerado,

01:51:03.270 --> 01:51:05.800
você verá uma página da web muito simples aqui.

01:51:05.800 --> 01:51:07.620
E se eu digitar, por exemplo, meu nome--

01:51:07.620 --> 01:51:10.530
Não vou me preocupar com uma senha-- e clique em Login,

01:51:10.530 --> 01:51:13.300
você verá que está logado como David.

01:51:13.300 --> 01:51:14.710
E agora posso sair.

01:51:14.710 --> 01:51:16.950
Vou prosseguir e clicar em Sair.

01:51:16.950 --> 01:51:19.925
E agora parece saber que não estou logado novamente.

01:51:19.925 --> 01:51:22.800
Posso fazer login como Carter porque não me preocupei em implementar senhas

01:51:22.800 --> 01:51:25.860
para simplificar, mas agora o site sabe que estou logado como Carter.

01:51:25.860 --> 01:51:29.970
Melhor ainda, se eu recarregar, recarregar, recarregar ou clicar neste botão novamente,

01:51:29.970 --> 01:51:34.920
e, novamente, observe que ainda sabe que sou Carter até o momento

01:51:34.920 --> 01:51:36.510
enquanto eu saio.

01:51:36.510 --> 01:51:38.070
Tudo bem, bem, como isso está funcionando?

01:51:38.070 --> 01:51:40.410
Bem, vamos voltar ao VS Code aqui e deixar

01:51:40.410 --> 01:51:43.020
me role para baixo para, primeiro, esta rota.

01:51:43.020 --> 01:51:45.780
Este é um paradigma muito comum aqui, segundo o qual

01:51:45.780 --> 01:51:48.000
Estou verificando a rota do índice.

01:51:48.000 --> 01:51:53.970
Se não houver um nome na sessão, redirecione o usuário para /login.

01:51:53.970 --> 01:51:54.970
Agora, o que isso significa?

01:51:54.970 --> 01:51:57.280
Bem, deixe-me voltar ao VS Code aqui.

01:51:57.280 --> 01:51:59.627
Deixe-me ir para o arquivo /route.

01:51:59.627 --> 01:52:01.710
Então, novamente, seu URL será diferente, mas estou apenas

01:52:01.710 --> 01:52:03.390
indo para ir para barra e pressione Enter.

01:52:03.390 --> 01:52:06.550
Observe que fui redirecionado automaticamente para fazer login.

01:52:06.550 --> 01:52:07.862
E muitos sites fazem isso.

01:52:07.862 --> 01:52:11.070
Se você for a um site e não estiver logado, muitas vezes será redirecionado

01:52:11.070 --> 01:52:15.330
para /login, ou /account, ou algo assim, onde você for solicitado.

01:52:15.330 --> 01:52:17.980
O código para fazer isso está aqui.

01:52:17.980 --> 01:52:21.150
Se não houver nome na sessão, se não houver nome no carrinho de compras,

01:52:21.150 --> 01:52:25.560
se quiser, vá em frente e retorne o usuário para logar, nessa rota.

01:52:25.560 --> 01:52:29.843
Caso contrário, , implicitamente se eles estiverem logados, mostre a eles index.html.

01:52:29.843 --> 01:52:31.260
Então vamos descer a toca do coelho.

01:52:31.260 --> 01:52:34.650
Deixe-me abrir no VS Code uma segunda janela de terminal.

01:52:34.650 --> 01:52:39.690
Deixe-me ir para a fonte nove e entrar nesta mesma demonstração de login,

01:52:39.690 --> 01:52:43.920
e deixe-me abrir o modelo chamado index.html.

01:52:43.920 --> 01:52:45.360
E aqui está tudo isso.

01:52:45.360 --> 01:52:47.350
Há algum layout, mas quem se importa neste momento,

01:52:47.350 --> 01:52:49.680
é apenas o HTML genérico clichê.

01:52:49.680 --> 01:52:51.300
Aqui está o bloco do corpo.

01:52:51.300 --> 01:52:52.350
Eu tenho isto.

01:52:52.350 --> 01:52:57.450
E isso também é Jinja por causa da chave e do sinal. sinal de porcentagem.

01:52:57.450 --> 01:53:01.290
Se houver um nome na sessão-- isso é apenas a sintaxe do Python--

01:53:01.290 --> 01:53:02.700
então diga esta frase.

01:53:02.700 --> 01:53:03.990
Você está logado como--

01:53:03.990 --> 01:53:07.350
qualquer nome que esteja na sessão, no carrinho de compras, se preferir.

01:53:07.350 --> 01:53:10.950
E então eu só tenho este link HTML para desconectar o usuário.

01:53:10.950 --> 01:53:14.130
Caso contrário, se não houver nome na sessão, logicamente,

01:53:14.130 --> 01:53:15.570
apenas diga que você não está logado.

01:53:15.570 --> 01:53:18.490
Em vez disso, forneça a eles um link manual para fazer login.

01:53:18.490 --> 01:53:23.700
Isso é tudo que esse modelo específico faz, mas como o /login funciona?

01:53:23.700 --> 01:53:27.450
Bem, vamos entrar neste outro modelo, código de login.HTML,

01:53:27.450 --> 01:53:28.740
para o qual sou redirecionado.

01:53:28.740 --> 01:53:29.950
Super simples.

01:53:29.950 --> 01:53:32.160
Isso é apenas copiar e colar do HTML antes.

01:53:32.160 --> 01:53:35.520
Eu tenho um formulário de login que terá uma ação de /login,

01:53:35.520 --> 01:53:40.470
envia por questão de privacidade apenas por um POST, e o resto é apenas

01:53:40.470 --> 01:53:41.190
uma forma simples.

01:53:41.190 --> 01:53:44.670
E estou usando um input type=submit em vez de button=type=submit,

01:53:44.670 --> 01:53:46.140
mas a mesma ideia aqui também.

01:53:46.140 --> 01:53:50.100
E se eu voltar para app.py, vamos ver como o login funciona.

01:53:50.100 --> 01:53:50.700
Tudo bem.

01:53:50.700 --> 01:53:54.060
É muita coisa de uma vez só, mas são reaplicações relativamente simples

01:53:54.060 --> 01:53:55.180
da mesma ideia.

01:53:55.180 --> 01:54:01.680
Portanto, se o usuário visitar /login via GET ou POST, chame essa função de login.

01:54:01.680 --> 01:54:05.550
Se o usuário enviou via POST e vimos essa técnica antes,

01:54:05.550 --> 01:54:08.040
vá em frente e faça isso na linha 23.

01:54:08.040 --> 01:54:14.580
Armazene nesta variável de sessão especial que vem com o Flask uma chave de nome,

01:54:14.580 --> 01:54:17.890
e armazenar nele o próprio nome do usuário.

01:54:17.890 --> 01:54:21.570
Então, entre aspas, "nome" terá um valor de David, ou Carter, ou algo parecido.

01:54:21.570 --> 01:54:24.180
E assim que você fizer isso, redirecione o usuário de volta

01:54:24.180 --> 01:54:26.950
para cortar apenas para que eles vejam a página inicial novamente.

01:54:26.950 --> 01:54:29.730
E é assim que a Amazon e todos esses outros sites também funcionam.

01:54:29.730 --> 01:54:33.120
Caso contrário, se eles visitarem esta página implicitamente via GET,

01:54:33.120 --> 01:54:36.408
e mesmo que eu não tenha dito = = CHEGUE em qualquer lugar,

01:54:36.408 --> 01:54:39.450
essa é a implicação porque se você só pode chegar aqui por um GET ou POST,

01:54:39.450 --> 01:54:42.750
e já lidamos com POST, logicamente tudo o que resta é GET.

01:54:42.750 --> 01:54:45.960
Bem, então apenas mostre a eles a tela de login.

01:54:45.960 --> 01:54:49.500
Mas há meia dúzia de maneiras de expressar essa mesma lógica.

01:54:49.500 --> 01:54:52.360
E então, para sair, isso é meio direto.

01:54:52.360 --> 01:54:56.610
Se o usuário clicar no link de logout e terminar em /logout, essa rota,

01:54:56.610 --> 01:55:02.070
bem, apenas altere o valor dessa chave na sessão para nenhum.

01:55:02.070 --> 01:55:03.600
Efetivamente, não, Carter se foi.

01:55:03.600 --> 01:55:04.320
David se foi.

01:55:04.320 --> 01:55:06.610
Não há ninguém logado.

01:55:06.610 --> 01:55:09.600
Isso é tudo o que é necessário para realmente implementar

01:55:09.600 --> 01:55:11.850
a noção de entrar e sair de um site.

01:55:11.850 --> 01:55:14.220
Além disso, a senha, que provavelmente deve envolver o banco de dados,

01:55:14.220 --> 01:55:15.630
Mas uma coisa de cada vez.

01:55:15.630 --> 01:55:19.050
E realmente, a sessão é como a versão do código de um carrinho de compras

01:55:19.050 --> 01:55:23.198
pelo qual, se eu visitar o mesmo código, obtenho meu próprio objeto de sessão.

01:55:23.198 --> 01:55:25.740
Se Carter visitar o site, ele obterá seu próprio objeto de sessão.

01:55:25.740 --> 01:55:28.950
E a maneira como Flask nos mantém corretos é que eles

01:55:28.950 --> 01:55:32.490
colocar um cookie no meu computador, um cookie diferente no computador dele,

01:55:32.490 --> 01:55:36.690
e os usa para garantir que a sessão certa seja

01:55:36.690 --> 01:55:40.120
mostrado para o usuário real correto.

01:55:40.120 --> 01:55:43.740
Dúvidas sobre essa noção de sessões?

01:55:46.860 --> 01:55:47.580
Não?

01:55:47.580 --> 01:55:51.270
Tudo bem, que tal alguns exemplos finais apenas para juntar tudo isso.

01:55:51.270 --> 01:55:53.700
Deixe-me voltar ao VS Code aqui.

01:55:53.700 --> 01:55:56.490
Deixe-me sair da minha versão anterior do Flask.

01:55:56.490 --> 01:55:59.400
Vamos para a fonte nove e entrar na loja,

01:55:59.400 --> 01:56:01.020
que é um aplicativo separado completamente.

01:56:01.020 --> 01:56:03.660
E vamos começar apenas executando o Flask para ver o que ele faz.

01:56:03.660 --> 01:56:06.750
Vamos passar o mouse sobre o URL e abri-lo em outra guia.

01:56:06.750 --> 01:56:08.590
E isso é muito feio também.

01:56:08.590 --> 01:56:09.660
Deixe-me aumentar o zoom.

01:56:09.660 --> 01:56:12.270
Mas é uma livraria muito simples.

01:56:12.270 --> 01:56:15.670
Como um amazon.com inicial para cada um desses sete livros aqui,

01:56:15.670 --> 01:56:16.980
cada um dos quais parece ser--

01:56:16.980 --> 01:56:19.950
talvez este seja H1, este é H2, H2, H2, H2.

01:56:19.950 --> 01:56:22.410
E então há um botão embaixo de cada um.

01:56:22.410 --> 01:56:25.590
Bem, agora vamos usar isso como uma oportunidade para inferir,

01:56:25.590 --> 01:56:27.760
como para qualquer site, como isso funciona.

01:56:27.760 --> 01:56:29.790
Deixe-me ir em frente e ver a fonte da página--

01:56:29.790 --> 01:56:32.620
e você pode fazer isso para qualquer site na internet.

01:56:32.620 --> 01:56:36.660
Vamos tentar descobrir como esta livraria adiciona coisas a um carrinho.

01:56:36.660 --> 01:56:38.340
Bem, aqui está a tag H1.

01:56:38.340 --> 01:56:39.000
Desinteressante.

01:56:39.000 --> 01:56:40.170
H2, H2, H2.

01:56:40.170 --> 01:56:42.480
Portanto, a parte suculenta está nessas formas.

01:56:42.480 --> 01:56:46.255
Cada uma dessas formas tem uma ação de /cart,

01:56:46.255 --> 01:56:48.880
então essa é a rota que vai ser interessante em um momento.

01:56:48.880 --> 01:56:51.330
E usa POST por questões de privacidade.

01:56:51.330 --> 01:56:54.870
Cada um desses formulários, como o recurso de cancelamento de registro para Carter,

01:56:54.870 --> 01:57:00.000
tem um atributo de ID-- um parâmetro de ID que está oculto, visualmente,

01:57:00.000 --> 01:57:03.090
que tem um valor de 1, ou 2, ou 3.

01:57:03.090 --> 01:57:07.360
Então, como os códigos de barra exclusivos para os livros, se você quiser.

01:57:07.360 --> 01:57:09.100
Mas números super pequenos, no nosso caso.

01:57:09.100 --> 01:57:10.980
E então cada uma dessas outras formas apenas -

01:57:10.980 --> 01:57:13.260
cada um desses outros livros tem uma forma idêntica

01:57:13.260 --> 01:57:15.690
exceto pelo valor disso aqui.

01:57:15.690 --> 01:57:18.060
Agora, neste caso, isso não é grande coisa

01:57:18.060 --> 01:57:22.650
que um usuário poderia hackear tecnicamente o HTML desta livraria, amazon.com,

01:57:22.650 --> 01:57:25.860
e mudar os IDs porque, uau, o que eles vão fazer de pior?

01:57:25.860 --> 01:57:29.280
Comprar mais livros adicionando mais IDs ao carrinho de compras?

01:57:29.280 --> 01:57:30.300
Isso não é um problema.

01:57:30.300 --> 01:57:33.240
Não há preços aqui, são apenas ideias únicas de livros.

01:57:33.240 --> 01:57:35.880
Então, enquanto o cancelamento do registro talvez tenha sido preocupante

01:57:35.880 --> 01:57:38.040
porque você está mudando o servidor, eu acho

01:57:38.040 --> 01:57:42.120
está tudo bem porque o usuário só pode, na pior das hipóteses, comprar mais livros do que

01:57:42.120 --> 01:57:43.960
pode apenas através dos botões.

01:57:43.960 --> 01:57:45.840
Então, como isso funciona agora?

01:57:45.840 --> 01:57:49.260
Bem, vamos entrar no VS Code novamente aqui.

01:57:49.260 --> 01:57:51.120
Deixe-me dar a mim mesmo outra janela de terminal.

01:57:51.120 --> 01:57:56.778
E em source nine/store, deixe-me abrir app.py, que é onde está toda a lógica.

01:57:56.778 --> 01:57:59.820
Vou folhear a maior parte disso rapidamente porque já vimos isso antes.

01:57:59.820 --> 01:58:02.310
Essas importações são praticamente as mesmas de antes.

01:58:02.310 --> 01:58:03.718
Esta linha é a mesma.

01:58:03.718 --> 01:58:05.760
Esta linha é quase a mesma, mas o banco de dados agora

01:58:05.760 --> 01:58:09.630
é chamado de store.db em vez de Frush IMs.db.

01:58:09.630 --> 01:58:12.720
Este é o código clichê para apenas habilitar as sessões,

01:58:12.720 --> 01:58:14.380
essa noção de carrinho de compras.

01:58:14.380 --> 01:58:16.410
E então vamos ver como o índice funciona.

01:58:16.410 --> 01:58:18.780
Como é que estou vendo todos os sete livros de uma vez?

01:58:18.780 --> 01:58:23.550
Bem, nesta função de índice, estou usando na linha 19, selecione estrela de livros

01:58:23.550 --> 01:58:25.230
para obter todos os livros do banco de dados.

01:58:25.230 --> 01:58:28.920
E então estou renderizando um modelo chamado HTML de livraria passando

01:58:28.920 --> 01:58:30.868
como um espaço reservado para todos esses livros.

01:58:30.868 --> 01:58:33.160
Tudo bem, vamos entrar na toca do coelho por um segundo.

01:58:33.160 --> 01:58:36.750
Deixe-me abrir books.HTML em meu diretório de modelos.

01:58:36.750 --> 01:58:39.540
E aqui novamente, mesmo que seja novo hoje,

01:58:39.540 --> 01:58:42.480
é provavelmente cada vez mais familiar sintaticamente.

01:58:42.480 --> 01:58:44.100
Aqui está o H1.

01:58:44.100 --> 01:58:45.490
Aqui está o meu laço.

01:58:45.490 --> 01:58:49.840
Aqui está o H2, que produzirá o título do livro atual nesse loop.

01:58:49.840 --> 01:58:51.030
Aqui está o formulário.

01:58:51.030 --> 01:58:54.100
Aqui está o ID desse livro que será gerado no formulário.

01:58:54.100 --> 01:58:59.260
Portanto, não digitei manualmente sete formulários longos, apenas fiz um neste modelo

01:58:59.260 --> 01:59:00.990
para que seja gerado automaticamente.

01:59:00.990 --> 01:59:03.060
Literalmente, o que um site como a Amazon faria

01:59:03.060 --> 01:59:08.220
fazer para mostrar 10 livros por vez ou 10 resultados de pesquisa ou mais por vez.

01:59:08.220 --> 01:59:12.000
Tudo bem, vamos para /cart, que era o suculento.

01:59:12.000 --> 01:59:15.430
E este é mais longo, mas vamos ver se podemos raciocinar sobre isso.

01:59:15.430 --> 01:59:20.790
Se o usuário enviar via GET ou POST para /cart, primeiro faremos isso.

01:59:20.790 --> 01:59:23.790
E isso é apenas necessário e alguns clichês reescritos.

01:59:23.790 --> 01:59:28.330
Vamos usar o objeto de sessão para armazenar uma variável chamada carrinho que

01:59:28.330 --> 01:59:29.830
neste caso, será uma lista.

01:59:29.830 --> 01:59:31.960
Portanto, a sessão, novamente, é apenas um dicionário.

01:59:31.960 --> 01:59:33.660
Você pode colocar o que quiser nele.

01:59:33.660 --> 01:59:36.450
Anteriormente colocamos os nomes dos alunos e esportes.

01:59:36.450 --> 01:59:40.170
Agora o que eu quero fazer é--

01:59:40.170 --> 01:59:45.720
desculpe, anteriormente colocamos o nome do aluno, o nome do usuário nele.

01:59:45.720 --> 01:59:50.920
Agora vou armazenar uma chave de carrinho cujo valor é uma lista.

01:59:50.920 --> 01:59:51.420
Por que?

01:59:51.420 --> 01:59:54.360
Porque quero agregar mais e mais livros nesta lista.

01:59:54.360 --> 01:59:57.960
Tudo bem, isso apenas garante que eu tenha pelo menos um carrinho de compras vazio

01:59:57.960 --> 02:00:00.030
a primeira vez que o usuário faz isso.

02:00:00.030 --> 02:00:04.020
Se eles visitarem este formulário via POST, vamos em frente e obter o ID do livro

02:00:04.020 --> 02:00:05.040
que eles postaram.

02:00:05.040 --> 02:00:08.880
Se não estiver vazio, se houver um número, como 1, ou 2, ou 3,

02:00:08.880 --> 02:00:11.590
vamos em frente e vamos para o carrinho de compras--

02:00:11.590 --> 02:00:14.040
que é uma lista, por esta linha -

02:00:14.040 --> 02:00:16.050
e apenas anexe esse ID.

02:00:16.050 --> 02:00:18.120
Portanto, esta lista de livros em seu carrinho de compras

02:00:18.120 --> 02:00:23.220
vai conter 1, 2, 4, 6, quaisquer que sejam os livros que você está realmente comprando.

02:00:23.220 --> 02:00:25.830
E então o usuário é redirecionado para o carrinho.

02:00:25.830 --> 02:00:29.070
E se, porém, o usuário chegasse aqui via GET e não POST?

02:00:29.070 --> 02:00:31.120
Bem, este é relativamente direto.

02:00:31.120 --> 02:00:37.200
Se você apenas visitar /cart, selecionamos a estrela dos livros onde o ID está em--

02:00:37.200 --> 02:00:39.540
OK, isso é interessante--

02:00:39.540 --> 02:00:40.767
esta lista.

02:00:40.767 --> 02:00:42.850
E esta é a sintaxe que você pode não ter visto antes.

02:00:42.850 --> 02:00:46.160
Mas se você ler a documentação da biblioteca do CS50, se você

02:00:46.160 --> 02:00:49.670
selecione algo e use um espaço reservado de ponto de interrogação,

02:00:49.670 --> 02:00:55.520
e o espaço reservado em si é uma lista, geramos uma lista de valores separada por vírgulas

02:00:55.520 --> 02:00:58.760
assim como você usaria talvez nos conjuntos de problemas sete

02:00:58.760 --> 02:01:01.320
para fazer consultas SQL por conta própria.

02:01:01.320 --> 02:01:04.970
Portanto, isso significa apenas mostrar-me apenas os livros em meu carrinho de compras.

02:01:04.970 --> 02:01:07.610
Não de Carter, não de outra pessoa, não em todo o banco de dados,

02:01:07.610 --> 02:01:12.900
apenas mostre-me os livros em meu carrinho de compras e, em seguida, processe-os como tal.

02:01:12.900 --> 02:01:17.450
Portanto, vimos apenas como é o catálogo aqui em /books.

02:01:17.450 --> 02:01:22.230
Vamos em frente e adicionar talvez o primeiro livro ao meu carrinho.

02:01:22.230 --> 02:01:27.890
E agora vejo em /cart apenas o primeiro livro cujo ID é um.

02:01:27.890 --> 02:01:30.200
Deixe-me agora voltar para a livraria aqui,

02:01:30.200 --> 02:01:33.510
role para baixo até talvez o sétimo livro e adicione-o ao meu carrinho.

02:01:33.510 --> 02:01:36.200
E agora eu vejo isso aqui também.

02:01:36.200 --> 02:01:40.050
Enquanto isso, todas essas informações são armazenadas na minha sessão.

02:01:40.050 --> 02:01:43.470
E então, quando eu recarrego este carrinho de novo e de novo,

02:01:43.470 --> 02:01:47.060
a razão pela qual só estou vendo meus dois é porque estamos

02:01:47.060 --> 02:01:49.160
verificando apenas a lista na minha sessão.

02:01:49.160 --> 02:01:52.760
E os frascos garantem, novamente, que minha sessão é diferente da sua sessão,

02:01:52.760 --> 02:01:55.410
é diferente da sessão de Carter também.

02:01:55.410 --> 02:01:58.170
Mas você escreve o código uma vez e funciona para milhares,

02:01:58.170 --> 02:02:01.850
milhões de pessoas em paralelo.

02:02:01.850 --> 02:02:04.105
Alguma pergunta sobre isso?

02:02:06.840 --> 02:02:07.770
Sim, nas costas.

02:02:07.770 --> 02:02:09.230
AUDIÊNCIA: [INAUDÍVEL]

02:02:09.230 --> 02:02:10.897
DAVID MALAN: Desculpe, diga um pouco mais alto.

02:02:10.897 --> 02:02:15.160
AUDIÊNCIA: [INAUDÍVEL]

02:02:15.160 --> 02:02:16.780
DAVID MALAN: Então, para recapitular.

02:02:16.780 --> 02:02:19.780
Portanto, os usuários nunca terão os mesmos valores de sessão.

02:02:19.780 --> 02:02:21.613
Teoricamente, o biscoito que é plantado

02:02:21.613 --> 02:02:23.530
não parece um rosto sorridente para todos.

02:02:23.530 --> 02:02:26.897
Cada um de nós recebe um grande número aleatório que nos é atribuído.

02:02:26.897 --> 02:02:29.230
Seria como se cada um de nós tivesse uma mão completamente única

02:02:29.230 --> 02:02:30.790
carimbo que ninguém mais pode ver.

02:02:30.790 --> 02:02:34.720
A razão pela qual ninguém mais pode ver é porque, se o site estiver usando HTTPs,

02:02:34.720 --> 02:02:37.750
toda vez que este carimbo de mão é mostrado, toda vez que este cookie é enviado de volta

02:02:37.750 --> 02:02:40.130
e adiante, tudo é criptografado também.

02:02:40.130 --> 02:02:44.110
Cada um de nós pode-- mesmo que tenhamos o mesmo conteúdo por coincidência

02:02:44.110 --> 02:02:46.930
porque gostamos dos mesmos livros, serão biscoitos separados,

02:02:46.930 --> 02:02:49.660
memória separada, sessões separadas.

02:02:49.660 --> 02:02:50.290
Atrás de você.

02:02:50.290 --> 02:02:50.790
Sim.

02:02:50.790 --> 02:02:53.903
AUDIÊNCIA: [INAUDÍVEL]

02:02:53.903 --> 02:02:55.320
DAVID MALAN: Realmente boa pergunta.

02:02:55.320 --> 02:02:56.403
Quando termina a sessão?

02:02:56.403 --> 02:02:57.540
Totalmente configurável.

02:02:57.540 --> 02:03:01.230
Normalmente termina quando fecha o separador ou quando sai do navegador.

02:03:01.230 --> 02:03:05.340
Ou você também pode configurar cookies para serem persistentes por um dia,

02:03:05.340 --> 02:03:06.780
por uma semana, por mais tempo.

02:03:06.780 --> 02:03:12.030
Por exemplo, quando você faz login no Gmail,

02:03:12.030 --> 02:03:13.950
eles plantam um cookie no seu computador provavelmente

02:03:13.950 --> 02:03:16.170
por uma semana, um mês, um ano, algo assim

02:03:16.170 --> 02:03:18.870
porque seria irritante e provavelmente levaria você ao Outlook

02:03:18.870 --> 02:03:21.930
ou qualquer outra coisa se você continuasse tendo que fazer login em sua conta.

02:03:21.930 --> 02:03:25.290
Considerando que sua conta bancária pode realmente esperar que você feche a guia.

02:03:25.290 --> 02:03:27.510
E então, para sua própria segurança financeira, eles apenas

02:03:27.510 --> 02:03:29.490
exclua automaticamente a sessão muito antes.

02:03:29.490 --> 02:03:30.780
Mas totalmente configurável.

02:03:30.780 --> 02:03:32.910
Por padrão, conforme estou usando, normalmente

02:03:32.910 --> 02:03:35.040
ser jogado fora quando o próprio navegador for encerrado.

02:03:35.040 --> 02:03:39.600
E aqui também está outro motivo para desenvolver sites usando o modo de navegação anônima

02:03:39.600 --> 02:03:42.190
porque se você quiser jogar fora todos os seus cookies,

02:03:42.190 --> 02:03:43.920
você fecha o modo de janela anônima.

02:03:43.920 --> 02:03:46.380
Abra um novo e agora você está começando do zero.

02:03:46.380 --> 02:03:48.850
Você não precisa excluir manualmente todos os seus cookies,

02:03:48.850 --> 02:03:51.955
o que pode desconectar você de sites com os quais você realmente se importa.

02:03:51.955 --> 02:03:52.455
Sim.

02:03:52.455 --> 02:03:56.132
AUDIÊNCIA: [INAUDÍVEL]

02:03:56.132 --> 02:03:57.340
DAVID MALAN: Uma boa pergunta.

02:03:57.340 --> 02:03:59.710
Ao usar sessões, se alguém alterar maliciosamente

02:03:59.710 --> 02:04:02.020
o valor de tais formas, poderia afetar outras pessoas?

02:04:02.020 --> 02:04:04.930
Teoricamente, não porque o pior que você pode fazer

02:04:04.930 --> 02:04:07.928
é como adicionar livros ao seu próprio carrinho de compras que você não quer lá.

02:04:07.928 --> 02:04:09.970
Nesse ponto, mesmo estando no servidor,

02:04:09.970 --> 02:04:12.640
não afeta você, ou Carter, ou qualquer outra pessoa,

02:04:12.640 --> 02:04:20.110
a menos que haja algo mais global acontecendo, como se inscrever em um esporte,

02:04:20.110 --> 02:04:22.240
ou remover livros do banco de dados da Amazon.

02:04:22.240 --> 02:04:23.480
Isso seria problemático.

02:04:23.480 --> 02:04:27.820
Mas, neste caso, estamos removendo coisas apenas da minha própria sessão

02:04:27.820 --> 02:04:29.890
que o site está me dando.

02:04:29.890 --> 02:04:33.350
Tudo bem, o último tópico de hoje é isso aqui,

02:04:33.350 --> 02:04:35.440
que está em todo lugar hoje em dia, essas coisas

02:04:35.440 --> 02:04:38.710
chamadas APIs, ou interfaces de programação de aplicativos.

02:04:38.710 --> 02:04:40.630
E este é um termo muito genérico, na verdade.

02:04:40.630 --> 02:04:44.980
Porque qualquer função que você usou em C, em Scratch, em Python,

02:04:44.980 --> 02:04:47.470
no SQL, são todas APIs.

02:04:47.470 --> 02:04:51.640
Existe uma maneira padrão de interface com essas funções.

02:04:51.640 --> 02:04:52.730
Todos eles têm nomes.

02:04:52.730 --> 02:04:54.190
Às vezes, eles têm valores de retorno.

02:04:54.190 --> 02:04:55.660
Às vezes eles têm argumentos.

02:04:55.660 --> 02:04:58.930
E uma API é apenas como você usa uma função.

02:04:58.930 --> 02:05:03.880
Ou, de forma mais geral, uma API apenas especifica como você interage com algum serviço.

02:05:03.880 --> 02:05:06.910
Hoje em dia há muitos serviços baseados na web

02:05:06.910 --> 02:05:11.170
que você pode usar para recuperar dados como o clima ou a hora atual,

02:05:11.170 --> 02:05:13.750
ou o banco de dados de livros da Amazon, por exemplo,

02:05:13.750 --> 02:05:16.930
todos podem ter APIs, muitas vezes baseadas na web, que

02:05:16.930 --> 02:05:19.600
permitem que você, usando URLs ou alguma outra tecnologia,

02:05:19.600 --> 02:05:22.030
apenas obter dados de outra pessoa como se fosse

02:05:22.030 --> 02:05:23.980
uma função que você está chamando remotamente.

02:05:23.980 --> 02:05:26.740
Mas o HTTP é muitas vezes o mecanismo que está

02:05:26.740 --> 02:05:29.470
usado para realmente obter dados de servidores.

02:05:29.470 --> 02:05:32.450
E a maneira como os dados podem voltar pode ser a seguinte.

02:05:32.450 --> 02:05:36.280
Deixe-me terminar com um exemplo final usando alguns de nossos programas familiares

02:05:36.280 --> 02:05:38.620
de semanas passadas.

02:05:38.620 --> 02:05:42.700
Deixe-me ir em frente e fechar a versão antiga do Flask, voltar para a fonte nove

02:05:42.700 --> 02:05:44.020
e entre em--

02:05:44.020 --> 02:05:47.800
que tal um exemplo chamado shows.

02:05:47.800 --> 02:05:50.200
E a primeira versão disso, zero, eu só vou

02:05:50.200 --> 02:05:52.240
para ir em frente e executar com Flask run.

02:05:52.240 --> 02:05:54.700
Vou passar o mouse sobre meu URL e abri-lo aqui.

02:05:54.700 --> 02:05:58.810
E você verá agora que tenho um formulário bem simples, como continuamos fazendo até hoje.

02:05:58.810 --> 02:06:02.140
Vou digitar como OFFICE, office,

02:06:02.140 --> 02:06:04.300
nesta caixa de pesquisa e clique em Pesquisar.

02:06:04.300 --> 02:06:11.560
E você verá agora que acabei em uma URL que termina em /search?q=office.

02:06:11.560 --> 02:06:15.820
Então, isso é como minha própria versão infantil do google.com, mas eu mesmo o implementei.

02:06:15.820 --> 02:06:20.440
E para qualquer título de um programa de TV de algumas semanas atrás que corresponda

02:06:20.440 --> 02:06:25.090
ESCRITÓRIO, cuspo em uma lista não ordenada.

02:06:25.090 --> 02:06:26.287
Como isso está funcionando?

02:06:26.287 --> 02:06:28.120
Você pode imaginar, mesmo que não

02:06:28.120 --> 02:06:31.540
ser capaz de programar isso de cabeça, certamente, tão cedo--

02:06:31.540 --> 02:06:33.310
deixe-me ir para a fonte nove.

02:06:33.310 --> 02:06:38.680
Deixe-me ir para o show zero, deixe-me abrir app.py.

02:06:38.680 --> 02:06:41.080
E neste arquivo, você verá que estou pegando

02:06:41.080 --> 02:06:45.310
um arquivo chamado shows.db, que é como uma versão mais simples do

02:06:45.310 --> 02:06:47.110
de algumas semanas se passaram.

02:06:47.110 --> 02:06:48.910
É por isso que vejo o formulário da web.

02:06:48.910 --> 02:06:51.260
Minha primeira rota, meu índice é super simples.

02:06:51.260 --> 02:06:52.540
Ele apenas cospe essa forma.

02:06:52.540 --> 02:06:56.230
E minha rota de pesquisa, você pode pensar nisso como google.com,

02:06:56.230 --> 02:06:58.100
é apenas como quatro linhas de código.

02:06:58.100 --> 02:07:03.190
Portanto, se o usuário enviar dados para /search, essa função chamada search será chamada.

02:07:03.190 --> 02:07:06.070
Eu declaro uma variável chamada shows, eu executo

02:07:06.070 --> 02:07:11.770
um comando SQL que é select star from mostra onde o título é como um ponto de interrogação.

02:07:11.770 --> 02:07:14.260
E a sintaxe aqui é um pouco maluca, mas eu

02:07:14.260 --> 02:07:17.860
deseja prefixar o sinal de porcentagem de entrada do usuário,

02:07:17.860 --> 02:07:20.800
e sufixá-lo com um sinal de porcentagem também,

02:07:20.800 --> 02:07:25.240
colocando entre esses dois valores a entrada real, por quê?

02:07:25.240 --> 02:07:27.970
No SQL, o que significa se você tiver um sinal de porcentagem à esquerda

02:07:27.970 --> 02:07:28.930
e para a direita?

02:07:28.930 --> 02:07:30.460
Nada a ver com Jinja hoje.

02:07:30.460 --> 02:07:31.450
AUDIÊNCIA: [INAUDÍVEL]

02:07:31.450 --> 02:07:33.030
DAVID MALAN: Sim, é um curinga.

02:07:33.030 --> 02:07:35.910
Isso significa corresponder a zero ou mais caracteres à esquerda,

02:07:35.910 --> 02:07:38.400
ou corresponder a zero ou mais caracteres à direita,

02:07:38.400 --> 02:07:42.810
você tem que fazer a concatenação como o segundo argumento para esta função.

02:07:42.810 --> 02:07:46.200
Você não pode fazer algo inteligente como colocá-lo aqui em torno do ponto de interrogação,

02:07:46.200 --> 02:07:49.500
o ponto de interrogação é o espaço reservado ao qual você conecta esses valores.

02:07:49.500 --> 02:07:54.000
Mas isso significa apenas, ei SQL, mostre-me todos os títulos que têm OFFICE

02:07:54.000 --> 02:07:55.230
em algum lugar neles.

02:07:55.230 --> 02:07:57.930
Isso me dá de volta uma lista de dicionários.

02:07:57.930 --> 02:08:02.460
Eu passo isso como um espaço reservado para uma variável chamada shows,

02:08:02.460 --> 02:08:05.010
e se olharmos para search.HTML, vamos ver isso.

02:08:05.010 --> 02:08:07.830
No meu diretório de templates existe algo chamado search.HTML.

02:08:07.830 --> 02:08:12.730
Super simples, quero dizer, isso é como a essência dos resultados de pesquisa do google.com.

02:08:12.730 --> 02:08:15.150
Estou usando uma lista não ordenada para manter as coisas simples,

02:08:15.150 --> 02:08:18.570
mas eu integro todos os shows na lista de shows que voltaram,

02:08:18.570 --> 02:08:21.257
e eu emito um li com cada um dos títulos desses programas.

02:08:21.257 --> 02:08:21.840
E é isso.

02:08:21.840 --> 02:08:24.960
Agora o Google tem links azuis, pequenas visualizações e outros textos,

02:08:24.960 --> 02:08:26.820
a primeira frase ou assim de cada página.

02:08:26.820 --> 02:08:28.380
Mas essa é a ideia.

02:08:28.380 --> 02:08:33.450
Isso é muito semelhante em espírito ao que google.com/search faz por você.

02:08:33.450 --> 02:08:37.150
Agora, como isso está funcionando? Não há app.py envolvido aqui ainda.

02:08:37.150 --> 02:08:39.540
Este é apenas um HTTP muito básico.

02:08:39.540 --> 02:08:42.930
Envio o formulário, sigo para outro caminho e recebo de volta os resultados.

02:08:42.930 --> 02:08:44.280
Mas confira esta versão.

02:08:44.280 --> 02:08:48.450
Deixe-me fechar essas guias aqui e abrir minha primeira janela de terminal.

02:08:48.450 --> 02:08:52.590
Deixe-me entrar nos shows um do diretório source nine de hoje

02:08:52.590 --> 02:08:54.480
e execute o Flask desta vez.

02:08:54.480 --> 02:08:57.360
Deixe-me passar o mouse sobre esse URL e abri-lo aqui.

02:08:57.360 --> 02:08:59.520
E agora se foi o botão Enviar.

02:08:59.520 --> 02:09:04.050
Agora vou fazer uma interface de usuário que usa uma técnica chamada AJAX--

02:09:04.050 --> 02:09:08.730
para assíncrono, JavaScript e XML, que é um termo um tanto datado

02:09:08.730 --> 02:09:11.010
porque não estamos mais usando algo chamado XML.

02:09:11.010 --> 02:09:15.990
Mas AJAX é uma técnica pela qual você não precisa mais enviar formulários

02:09:15.990 --> 02:09:17.830
para obter mais dados do servidor.

02:09:17.830 --> 02:09:22.650
Você pode usar JavaScript, na semana passada, ouvir um evento como o pressionamento de tecla

02:09:22.650 --> 02:09:26.130
descendo ou subindo, e assim que você ouvir tal evento,

02:09:26.130 --> 02:09:30.360
você pode secretamente no código JavaScript enviar uma solicitação ao servidor para voltar

02:09:30.360 --> 02:09:34.170
mais dados e, em seguida, conecte-os ao Dom-- a árvore--

02:09:34.170 --> 02:09:35.560
na memória do computador.

02:09:35.560 --> 02:09:37.800
E isso só contribui para experiências mais perfeitas

02:09:37.800 --> 02:09:39.790
como o preenchimento automático em qualquer site.

02:09:39.790 --> 02:09:42.330
Agora, deixe-me tentar digitar O--

02:09:42.330 --> 02:09:44.170
obtivemos o preenchimento automático super rápido.

02:09:44.170 --> 02:09:51.255
FICE. E você verá toda vez que eu adicionar mais chaves à minha entrada,

02:09:51.255 --> 02:09:53.630
Estou fazendo outra busca, outra busca, outra busca,

02:09:53.630 --> 02:09:55.310
e os dados estão mudando.

02:09:55.310 --> 02:09:56.510
Agora, como isso está funcionando?

02:09:56.510 --> 02:09:58.200
Bem, deixe-me voltar ao VS Code aqui.

02:09:58.200 --> 02:10:02.570
E na minha outra janela de terminal, deixe-me abrir app.py.

02:10:02.570 --> 02:10:05.930
E em app.py, você verá que ainda há

02:10:05.930 --> 02:10:13.050
uma rota de pesquisa abaixo que retorna um modelo de pesquisa, mas observe isso.

02:10:13.050 --> 02:10:20.420
Deixe-me entrar em templates/search.HTML e observar aqui que realmente estamos recebendo

02:10:20.420 --> 02:10:26.790
voltar uma lista desordenada de shows de novo, e de novo, e de novo.

02:10:26.790 --> 02:10:30.710
E este HTML que está voltando--

02:10:30.710 --> 02:10:32.750
deixa eu ir aqui.

02:10:32.750 --> 02:10:34.430
Deixe-me abrir meu terminal-- oh, desculpe.

02:10:34.430 --> 02:10:36.320
Esta é a versão errada.

02:10:36.320 --> 02:10:37.790
Desculpe, estava na pasta errada.

02:10:37.790 --> 02:10:39.140
Vamos consertar isso.

02:10:39.140 --> 02:10:42.800
Nos shows um, código de app.py, é quase a mesma coisa.

02:10:42.800 --> 02:10:45.770
Em busca aqui--

02:10:45.770 --> 02:10:47.385
OK, bem, eu mudo isso um pouco.

02:10:47.385 --> 02:10:49.010
Deixe-me mostrar esta versão da pesquisa.

02:10:49.010 --> 02:10:52.130
Se eu abrir app.py, aqui está minha rota de pesquisa.

02:10:52.130 --> 02:10:56.540
Estou obtendo uma variável chamada q, dando a ela o valor de qualquer request.args

02:10:56.540 --> 02:10:59.190
tem do usuário, como q=office.

02:10:59.190 --> 02:11:01.190
E então estou verificando se o usuário realmente digitou

02:11:01.190 --> 02:11:03.260
algo em executar esta consulta SQL.

02:11:03.260 --> 02:11:06.557
Selecione a estrela de shows onde o título é assim usando o mesmo.

02:11:06.557 --> 02:11:08.390
E desta vez apenas para manter as coisas eficientes,

02:11:08.390 --> 02:11:12.110
Limitei os resultados totais a 50 em vez de um número infinito.

02:11:12.110 --> 02:11:16.280
Caso contrário, se o usuário não digitar nada, apenas para ficar super seguro aqui,

02:11:16.280 --> 02:11:18.080
Estou configurando programas iguais a uma lista vazia.

02:11:18.080 --> 02:11:20.330
Então, se você não digitar nada, não há nada para mostrar.

02:11:20.330 --> 02:11:24.478
E não importa o que aconteça, eu renderizo esse modelo chamado search.HTML.

02:11:24.478 --> 02:11:25.520
Bem, vamos ver isso.

02:11:25.520 --> 02:11:30.920
Se eu abrir templates/search.HTML, desta vez não há layout.

02:11:30.920 --> 02:11:34.010
Não há herança desse layout .HTML,

02:11:34.010 --> 02:11:38.270
Estou literalmente gerando apenas um monte de fragmentos de li.

02:11:38.270 --> 02:11:39.052
Por que?

02:11:39.052 --> 02:11:41.010
Bem, vamos ver o que está acontecendo no navegador.

02:11:41.010 --> 02:11:42.890
E este é o começo de uma API.

02:11:42.890 --> 02:11:46.730
Se eu quisesse disponibilizar esta API-- esta programação de aplicativos

02:11:46.730 --> 02:11:47.270
interface--

02:11:47.270 --> 02:11:51.950
Eu poderia dizer ao mundo que, se você quiser pesquisar programas de TV em meu banco de dados,

02:11:51.950 --> 02:12:00.770
ir para URL, isso é algo, algo, /search?q=escritório ou gato, ou cachorro,

02:12:00.770 --> 02:12:01.610
ou qualquer outra coisa.

02:12:01.610 --> 02:12:03.740
E o que eu vou voltar para você é isso.

02:12:03.740 --> 02:12:07.250
Enter-- Vou apenas dar-lhe um monte de tags li, que

02:12:07.250 --> 02:12:08.210
quase parece o mesmo.

02:12:08.210 --> 02:12:10.070
Mas deixe-me ver a fonte da página.

02:12:10.070 --> 02:12:13.520
Só vou lhe devolver um fragmento de HTML.

02:12:13.520 --> 02:12:16.700
Não estou dando a você uma tag HTML, uma tag body, uma tag title, uma tag head.

02:12:16.700 --> 02:12:18.110
Eu não estou dando a você uma página da web.

02:12:18.110 --> 02:12:22.250
Estou dando a você um fragmento de HTML que agora você pode fazer o que quiser,

02:12:22.250 --> 02:12:26.850
incluindo inserir isso em sua própria lista não ordenada.

02:12:26.850 --> 02:12:29.870
Portanto, observe o que acontece neste aplicativo real.

02:12:29.870 --> 02:12:34.910
Se eu voltar ao VS Code aqui, deixe-me abrir meu modelo de índice aqui,

02:12:34.910 --> 02:12:37.850
e você verá alguma mágica do JavaScript.

02:12:37.850 --> 02:12:43.100
Então em JavaScript aqui, no meu formulário que só tinha a caixa de texto e nenhum botão,

02:12:43.100 --> 02:12:44.360
O que eu estou fazendo?

02:12:44.360 --> 02:12:48.680
Em uma tag de script aqui, estou criando uma variável chamada input.

02:12:48.680 --> 02:12:51.860
E estou usando esta função chamada seletor de consulta que

02:12:51.860 --> 02:12:56.670
apenas me dá uma referência à caixa de texto de entrada no formulário.

02:12:56.670 --> 02:12:58.160
Então eu posso ver o que o humano digitou.

02:12:58.160 --> 02:13:00.320
Hoje é um pouco diferente, mas estou

02:13:00.320 --> 02:13:05.420
usando input.addEventListener, que é uma maneira em JavaScript de contá-lo, apenas

02:13:05.420 --> 02:13:08.150
como no Scratch, ouça algo acontecer,

02:13:08.150 --> 02:13:09.620
como a bandeira verde sendo clicada.

02:13:09.620 --> 02:13:13.370
Mas, neste caso, ouça um evento que envolva entrada.

02:13:13.370 --> 02:13:16.070
Isso é como digitar no teclado, seja

02:13:16.070 --> 02:13:19.520
por copiar e colar, entrada manual ou qualquer outra coisa.

02:13:19.520 --> 02:13:22.370
Então, sempre que isso acontecer, chame esta função.

02:13:22.370 --> 02:13:24.170
E async significa assíncrono.

02:13:24.170 --> 02:13:27.710
Este é um termo técnico que significa que esta função pode

02:13:27.710 --> 02:13:30.720
leve uma fração de segundo, talvez até um segundo ou dois para executar.

02:13:30.720 --> 02:13:33.740
Então ele vai fazer isso nos bastidores, como no fundo,

02:13:33.740 --> 02:13:34.520
por assim dizer.

02:13:34.520 --> 02:13:36.300
E o que isso vai fazer?

02:13:36.300 --> 02:13:39.650
Bem, ele vai chamar uma função JavaScript que todos os navegadores agora

02:13:39.650 --> 02:13:43.760
suporte chamado fetch, que é uma função que usa HTTP para ir

02:13:43.760 --> 02:13:46.010
buscar mais dados via servidor.

02:13:46.010 --> 02:13:51.380
Ele vai buscar dados de uma rota chamada /search?q= e qualquer coisa

02:13:51.380 --> 02:13:53.760
o valor é o que o usuário digitou.

02:13:53.760 --> 02:13:56.630
Estou apenas criando manualmente meu próprio mini URL

02:13:56.630 --> 02:13:59.240
e dizendo ao JavaScript para me buscar aquele HTML.

02:13:59.240 --> 02:14:04.015
Quando ele voltar por meio desta linha de texto aqui chamada response.text,

02:14:04.015 --> 02:14:05.390
e deixe-me acenar com a mão em espera.

02:14:05.390 --> 02:14:07.820
Await significa apenas que isso pode não voltar imediatamente.

02:14:07.820 --> 02:14:09.990
Vamos aguardar a resposta e quando chegar,

02:14:09.990 --> 02:14:11.450
então vamos executar este código.

02:14:11.450 --> 02:14:12.810
Eu vou fazer isso.

02:14:12.810 --> 02:14:17.572
Vou pesquisar o documento, toda a página da web, para esta tag UL

02:14:17.572 --> 02:14:20.030
que está em algum lugar nesta página que veremos em um momento.

02:14:20.030 --> 02:14:24.236
Mude seu HTML interno para ser aquele fragmento de li,

02:14:24.236 --> 02:14:26.780
li, li, de todos esses programas correspondentes.

02:14:26.780 --> 02:14:28.190
E para onde vai tudo isso?

02:14:28.190 --> 02:14:30.920
Bem, se rolarmos para cima aqui, você notará que há

02:14:30.920 --> 02:14:33.000
meu HTML usual no topo.

02:14:33.000 --> 02:14:35.360
Etiqueta de cabeça, etiqueta de corpo e tudo isso.

02:14:35.360 --> 02:14:38.240
Há a caixa de texto sobre a qual já falamos.

02:14:38.240 --> 02:14:41.810
Não há botão para enviar porque tudo acontece automaticamente.

02:14:41.810 --> 02:14:45.840
Mas existe por padrão essa UL vazia que não tem nada por padrão

02:14:45.840 --> 02:14:48.750
até começarmos a usar essa API.

02:14:48.750 --> 02:14:51.270
E o floreio final aqui.

02:14:51.270 --> 02:14:56.670
Esta é uma maneira feia e desleixada de obter dados de um servidor

02:14:56.670 --> 02:14:58.890
para apenas recuperar um fragmento de HTML.

02:14:58.890 --> 02:15:00.570
Tipo, e se eu não estiver usando HTML?

02:15:00.570 --> 02:15:04.890
Desejo armazenar esses programas de TV em um PDF ou em alguma outra tag da web,

02:15:04.890 --> 02:15:06.660
em uma mesa, ou algo assim.

02:15:06.660 --> 02:15:08.460
Realmente não faz sentido para o servidor

02:15:08.460 --> 02:15:12.480
presumir que quero tags semelhantes em torno de cada um dos meus dados.

02:15:12.480 --> 02:15:15.570
Melhor seria obter um formato mais genérico de volta.

02:15:15.570 --> 02:15:18.450
E esse formato é quase sempre chamado hoje em dia

02:15:18.450 --> 02:15:20.310
este, nosso acrônimo final--

02:15:20.310 --> 02:15:23.310
JSON, notação de objeto JavaScript.

02:15:23.310 --> 02:15:24.430
E deixe-me fazer isso.

02:15:24.430 --> 02:15:28.830
Deixe-me fechar essas duas guias aqui e abrir a janela do meu terminal,

02:15:28.830 --> 02:15:33.510
e cancele a versão anterior do Flask que estava em execução.

02:15:33.510 --> 02:15:36.300
Deixe-me fechar esta versão e ver nossa versão final chamada

02:15:36.300 --> 02:15:39.430
mostra dois e executa o Flask.

02:15:39.430 --> 02:15:42.510
Vou passar o mouse sobre esse URL e abri-lo em um navegador.

02:15:42.510 --> 02:15:47.010
E vou visitar manualmente, depois de dar zoom, vamos fazer de novo

02:15:47.010 --> 02:15:52.980
/search?q=escritório Digite.

02:15:52.980 --> 02:15:55.470
E é assim que o JSON se parece.

02:15:55.470 --> 02:15:58.050
Agora, à primeira vista, isso não parece uma melhoria.

02:15:58.050 --> 02:16:00.730
Parece loucura que seja apenas essa grande bolha de texto.

02:16:00.730 --> 02:16:02.730
Mas é apenas texto suficiente para o computador

02:16:02.730 --> 02:16:04.980
para ser capaz de processá-lo de forma confiável.

02:16:04.980 --> 02:16:07.935
Observe que há um colchete aqui.

02:16:07.935 --> 02:16:09.810
E se eu realmente rolar para baixo, lá

02:16:09.810 --> 02:16:12.210
seria um colchete fechado como lá embaixo.

02:16:12.210 --> 02:16:16.920
Dentro desse colchete há uma chave, então ID, dois pontos,

02:16:16.920 --> 02:16:18.130
e depois um número.

02:16:18.130 --> 02:16:21.480
Em seguida, um título, entre aspas, dois pontos e, em seguida, o título.

02:16:21.480 --> 02:16:23.470
E então a chave fechada.

02:16:23.470 --> 02:16:26.040
Então, o que você está vendo em JavaScript Object Notation

02:16:26.040 --> 02:16:28.380
é um formato super popular muito padrão que é

02:16:28.380 --> 02:16:32.549
apenas texto que ainda usa colchetes para listas, também conhecidas como matrizes.

02:16:32.549 --> 02:16:36.459
Isso ainda usa chaves para dicionários, pares chave-valor.

02:16:36.459 --> 02:16:39.240
Então, o que você vê aqui é uma lista enorme-- até 50,

02:16:39.240 --> 02:16:43.559
Eu acho que-- shows que voltaram desta API, cada um dos quais

02:16:43.559 --> 02:16:47.830
tem um dicionário, se preferir, um objeto de pares chave-valor.

02:16:47.830 --> 02:16:49.110
Quais chaves e valores?

02:16:49.110 --> 02:16:53.590
Uma chave de ID e uma chave de título, cada uma com um valor, respectivamente.

02:16:53.590 --> 02:16:56.280
E estes são os mesmos dados do IMDb, alguns dos quais

02:16:56.280 --> 02:16:58.290
você pode estar se lembrando visualmente.

02:16:58.290 --> 02:17:01.097
Esta é apenas uma maneira muito crua e amigável para o computador

02:17:01.097 --> 02:17:03.930
de retornar um monte de dados que nós, humanos, não precisamos ver.

02:17:03.930 --> 02:17:08.549
Mas posso usar esses dados voltando ao código VS.

02:17:08.549 --> 02:17:14.190
Deixe-me abrir outra janela de terminal e entrar em source nine/shows2.

02:17:14.190 --> 02:17:21.660
E aqui, deixe-me ir em frente e abrir, que tal modelos index.html,

02:17:21.660 --> 02:17:26.055
que anteriormente apenas usavam aquele truque de HTML interno.

02:17:26.055 --> 02:17:27.930
E isso não vai impressionar-- você não é

02:17:27.930 --> 02:17:29.472
vai ficar satisfeito com esta sintaxe.

02:17:29.472 --> 02:17:32.309
Mas deixe-me pelo menos explicar o que estamos fazendo.

02:17:32.309 --> 02:17:35.070
Acontece que JSON é melhor

02:17:35.070 --> 02:17:39.360
maneira em geral, a linguagem mais genérica, polivalente, agnóstica

02:17:39.360 --> 02:17:42.738
maneira agnóstica de retornar dados de um servidor porque é apenas texto.

02:17:42.738 --> 02:17:45.780
Portanto, não importa se você está usando Python, C, C++ ou JavaScript,

02:17:45.780 --> 02:17:47.760
ou Ruby, ou PHP, ou qualquer outra coisa.

02:17:47.760 --> 02:17:51.490
Todas essas linguagens podem processar informações JSON.

02:17:51.490 --> 02:17:54.270
E, de fato, aqui está um pouco de JavaScript que faz exatamente isso.

02:17:54.270 --> 02:17:56.250
O mesmo código é antes inicialmente.

02:17:56.250 --> 02:18:00.209
Eu declaro uma variável chamada input que me dá acesso à caixa de texto do usuário.

02:18:00.209 --> 02:18:04.150
Eu ouço entradas como teclas subindo e descendo.

02:18:04.150 --> 02:18:07.770
E quando eles acontecem, eu chamo essa função anônima.

02:18:07.770 --> 02:18:11.370
Eu busco dados do servidor usando exatamente o mesmo código de antes.

02:18:11.370 --> 02:18:15.639
Pesquisar?q=escritório ou qualquer outra coisa.

02:18:15.639 --> 02:18:19.080
E agora este é um novo código que eu

02:18:19.080 --> 02:18:23.610
uso para converter esses dados JSON em meu próprio formato HTML,

02:18:23.610 --> 02:18:27.570
seja uma lista não ordenada e uma lista ordenada, uma tabela ou qualquer outra coisa.

02:18:27.570 --> 02:18:28.719
O que eu estou fazendo?

02:18:28.719 --> 02:18:31.200
Eu tenho uma variável chamada HTML inicializar para nada.

02:18:31.200 --> 02:18:33.420
Portanto, inicialmente não tenho HTML.

02:18:33.420 --> 02:18:37.209
Em seguida, itero cada ID nesses programas.

02:18:37.209 --> 02:18:39.360
Portanto, cada um dos identificadores exclusivos do IMDb,

02:18:39.360 --> 02:18:41.309
Eu integro sobre eles um de cada vez.

02:18:41.309 --> 02:18:47.070
E então eu entro no show em seu local de identificação e pego seu título.

02:18:47.070 --> 02:18:52.840
E isso é-- esqueça isso por um momento.

02:18:52.840 --> 02:18:56.549
Eu então pego essa variável HTML, concateno,

02:18:56.549 --> 02:19:03.270
ou junte-se a ele, minha própria tag li, mais o título, mais a tag li de fechamento.

02:19:03.270 --> 02:19:05.370
E eu pulo isso porque ficou assustador muito rápido,

02:19:05.370 --> 02:19:09.570
mas acontece que, se alguns programas de TV tiverem colchetes angulares,

02:19:09.570 --> 02:19:12.299
isso poderia quebrar meu HTML completamente.

02:19:12.299 --> 02:19:15.209
Acontece que você deve se lembrar brevemente da semana passada

02:19:15.209 --> 02:19:18.240
tínhamos o símbolo de direitos autorais, usando uma entidade HTML,

02:19:18.240 --> 02:19:20.129
usando o e comercial e o símbolo de hash,

02:19:20.129 --> 02:19:23.160
e 169 ponto e vírgula-- verifica-se que existem

02:19:23.160 --> 02:19:27.600
outras sequências enigmáticas de caracteres que representam de outra forma

02:19:27.600 --> 02:19:29.730
personagens perigosos ou impossíveis de digitar.

02:19:29.730 --> 02:19:32.580
Assim, o que poderia confundir o computador para pensar

02:19:32.580 --> 02:19:34.695
está no início de uma tag e um e comercial,

02:19:34.695 --> 02:19:38.850
o que também pode levar o computador a pensar que é uma entidade que

02:19:38.850 --> 02:19:39.370
não é.

02:19:39.370 --> 02:19:42.120
Mas, para encurtar a história, existem bibliotecas, felizmente,

02:19:42.120 --> 02:19:43.590
que lidam com muito disso para você.

02:19:43.590 --> 02:19:48.450
Para nossos propósitos, a conclusão é que agora que você entende um pouco de HTTP,

02:19:48.450 --> 02:19:52.050
agora que você entende um pouco de HTML, CSS e JavaScript, todos

02:19:52.050 --> 02:19:54.480
têm suas funções, você pode usá-los em última instância

02:19:54.480 --> 02:19:57.180
para começar a montar seus próprios aplicativos da web, pois você

02:19:57.180 --> 02:20:00.780
para o conjunto de problemas nove, unindo todas essas linguagens

02:20:00.780 --> 02:20:04.140
e construção de aplicativos web completos, aplicativos móveis,

02:20:04.140 --> 02:20:05.680
ou qualquer coisa mais.

02:20:05.680 --> 02:20:08.430
E para isso, acho que estamos todos prontos.

02:20:08.430 --> 02:20:11.950
E o primeiro aqui pode ter esses cookies também.

02:20:11.950 --> 02:20:14.280
Nos vemos na próxima vez em nossa última palestra CS50.

02:20:14.280 --> 02:20:16.730
[MÚSICA, TOCANDO]